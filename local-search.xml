<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ubuntu安裝FishShell+Tide主題與各種插件</title>
    <link href="/uncategorized/8db49697/"/>
    <url>/uncategorized/8db49697/</url>
    
    <content type="html"><![CDATA[<h2 id="開頭"><a href="#開頭" class="headerlink" title="開頭"></a>開頭</h2><p>本篇文章會安裝以下：</p><ul><li><a href="https://fishshell.com/">Fish Shell</a></li><li><a href="https://github.com/jorgebucaran/fisher">Fisher</a></li><li><a href="https://github.com/IlanCosman/tide">Tide</a></li><li><a href="https://github.com/jethrokuan/z">Z</a></li><li><a href="https://github.com/andreiborisov/sponge">Sponge</a></li><li><a href="https://github.com/jorgebucaran/autopair.fish">autopair.fish</a></li><li>fzf.fish<ul><li><a href="https://github.com/junegunn/fzf">fzf</a></li><li><a href="https://github.com/sharkdp/fd">fd</a></li><li><a href="https://github.com/sharkdp/bat">Bat</a></li></ul></li><li>asdf 自動完成</li></ul><p>安裝完，你會得到一個簡單好上手的指令介面。</p><p><img src="/./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/fig01.CwJEK6jr.webp" alt="fig01.webp"></p><h2 id="環境配置"><a href="#環境配置" class="headerlink" title="環境配置"></a>環境配置</h2><p>我的使用環境為 Windows 10 的 Windows Terminal + pwsh 連進 Ubuntu 22.04 LTS 使用。</p><p><img src="/./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/fig02.Db_-5iYC.webp" alt="fig02.webp"></p><h2 id="安裝-必要套件"><a href="#安裝-必要套件" class="headerlink" title="安裝 必要套件"></a>安裝 必要套件</h2><p>shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install wget git curl vim -y<br></code></pre></td></tr></table></figure><h2 id="安裝-Patched-字型"><a href="#安裝-Patched-字型" class="headerlink" title="安裝 Patched 字型"></a>安裝 Patched 字型</h2><p>我們必須先安裝 Patched 過的字型，之後才能正確地顯示字型與圖示，這邊建議使用 <strong>MesloLGS NF</strong> 字體。</p><h3 id="第一種方式"><a href="#第一種方式" class="headerlink" title="第一種方式"></a>第一種方式</h3><p>下載並安裝以下四個字型：</p><ul><li>[MesloLGS NF Regular.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Regular.ttf)</li><li>[MesloLGS NF Bold.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Bold.ttf)</li><li>[MesloLGS NF Italic.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Italic.ttf)</li><li>[MesloLGS NF Bold Italic.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Bold Italic.ttf)</li></ul><p>或是 shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Regular.ttf &amp;&amp;<br><br><br>wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold.ttf &amp;&amp;<br><br><br>wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Italic.ttf &amp;&amp;<br><br><br>wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold%20Italic.ttf<br></code></pre></td></tr></table></figure><h3 id="第二種方式"><a href="#第二種方式" class="headerlink" title="第二種方式"></a>第二種方式</h3><p>Github <a href="https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#tldr">@ryanoasis&#x2F;nerd-fonts</a></p><h2 id="安裝-Fish-shell"><a href="#安裝-Fish-shell" class="headerlink" title="安裝 Fish shell"></a>安裝 Fish shell</h2><p>新增來源庫 &gt; 更新 &gt; 安裝 <a href="https://fishshell.com/">Fish shell</a></p><p>shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-add-repository ppa:fish-shell/release-3<br><br><br>sudo apt update<br><br><br>sudo apt install fish<br></code></pre></td></tr></table></figure><h3 id="設定預設-Shell"><a href="#設定預設-Shell" class="headerlink" title="設定預設 Shell"></a>設定預設 Shell</h3><p>shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s $(which fish)<br></code></pre></td></tr></table></figure><h2 id="安裝-Fisher"><a href="#安裝-Fisher" class="headerlink" title="安裝 Fisher"></a>安裝 Fisher</h2><p><a href="https://github.com/jorgebucaran/fisher">Fisher</a> 是插件管理員。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source &amp;&amp; fisher install jorgebucaran/fisher<br></code></pre></td></tr></table></figure><h3 id="查看已安裝插件"><a href="#查看已安裝插件" class="headerlink" title="查看已安裝插件"></a>查看已安裝插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher list<br></code></pre></td></tr></table></figure><p>結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ fisher list<br><br><br>jorgebucaran/fisher<br><br><br>ilancosman/tide@v6<br><br><br>jethrokuan/z<br><br><br>andreiborisov/sponge<br><br><br>jorgebucaran/autopair.fish<br><br><br>patrickf1/fzf.fish<br></code></pre></td></tr></table></figure><h2 id="安裝-Tide-主題"><a href="#安裝-Tide-主題" class="headerlink" title="安裝 Tide 主題"></a>安裝 Tide 主題</h2><p>還記得 Zsh 的 <a href="https://github.com/romkatv/powerlevel10k">PowerLevel10k</a> 嗎? Tide 基本上就很像 PowerLevel10k。</p><p><video src="./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/w1.webm" controls="controls" width="500" height="300"></video></p><p>安裝 <a href="https://github.com/IlanCosman/tide">Tide</a> ，輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install IlanCosman/tide@v6<br></code></pre></td></tr></table></figure><h3 id="設定-Tide-主題"><a href="#設定-Tide-主題" class="headerlink" title="設定 Tide 主題"></a>設定 Tide 主題</h3><p>安裝完成後，輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tide configure<br></code></pre></td></tr></table></figure><h2 id="安裝插件-Z"><a href="#安裝插件-Z" class="headerlink" title="安裝插件 Z"></a>安裝插件 Z</h2><p>插件 <a href="https://github.com/jethrokuan/z">Z</a> 類似於 <a href="https://github.com/wting/autojump">autojump</a> 的插件，比 <code>cd</code> 更快速地直接跳到想去的資料夾。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install jethrokuan/z<br></code></pre></td></tr></table></figure><h2 id="安裝插件-Sponge"><a href="#安裝插件-Sponge" class="headerlink" title="安裝插件 Sponge"></a>安裝插件 Sponge</h2><p><a href="https://github.com/meaningful-ooo/sponge">Sponge</a> 讓指令歷史紀錄更乾淨，不會去紀錄失敗或是打錯的指令到歷史清單中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install andreiborisov/sponge<br></code></pre></td></tr></table></figure><h3 id="清除指令歷史"><a href="#清除指令歷史" class="headerlink" title="清除指令歷史"></a>清除指令歷史</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">history clear<br></code></pre></td></tr></table></figure><h2 id="安裝插件-autopair-fish"><a href="#安裝插件-autopair-fish" class="headerlink" title="安裝插件 autopair.fish"></a>安裝插件 autopair.fish</h2><p><a href="https://github.com/jorgebucaran/autopair.fish">autopair.fish</a> 自動幫你補上 <code>()</code> ， <code>[]</code> ， <code>&#123;&#125;</code> ， <code>&quot;&quot;</code> ， 還有 <code>&#39;&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install jorgebucaran/autopair.fish<br></code></pre></td></tr></table></figure><h2 id="安裝插件-fzf-fish"><a href="#安裝插件-fzf-fish" class="headerlink" title="安裝插件 fzf.fish"></a>安裝插件 fzf.fish</h2><p><a href="https://github.com/PatrickF1/fzf.fish">fzf.fish</a> 讓你的 Fish 互動性更強大。</p><p>找檔案 Ctrl + Alt + F</p><p><video src="./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/w2.webm" controls="controls" width="500" height="300"></video></p><p>找指令歷史紀錄 Ctrl + R</p><p><video src="./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/w3.webm" controls="controls" width="500" height="300"></video></p><p>找 PID Ctrl + Alt + P</p><p><video src="./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/w4.webm" controls="controls" width="500" height="300"></video></p><p>還有很多功能，請參考 <a href="https://github.com/PatrickF1/fzf.fish">fzf.fish 來源庫</a> 。</p><h3 id="安裝前置套件-fzf"><a href="#安裝前置套件-fzf" class="headerlink" title="安裝前置套件 fzf"></a>安裝前置套件 fzf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf<br><br><br>~/.fzf/install<br></code></pre></td></tr></table></figure><h3 id="安裝前置套件-fd"><a href="#安裝前置套件-fd" class="headerlink" title="安裝前置套件 fd"></a>安裝前置套件 fd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install fd-find<br></code></pre></td></tr></table></figure><p>因為已經有其他叫 fd 的套件，為了避免衝突，所以執行檔是叫 fdfind。我們這邊建立個連結在 <code>/usr/local/bin</code> 叫做 <code>fd</code> 讓我們可以使用 <code>fd</code> 這個指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s $(which fdfind) /usr/local/bin/fd<br></code></pre></td></tr></table></figure><h3 id="安裝前置套件-bat"><a href="#安裝前置套件-bat" class="headerlink" title="安裝前置套件 bat"></a>安裝前置套件 bat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install bat<br></code></pre></td></tr></table></figure><p>因為已經有其他叫 bat 的套件，為了避免衝突，所以執行檔是叫 batcat。我們這邊建立個連結在 <code>/usr/local/bin</code> 叫做 <code>bat</code> 讓我們可以使用 <code>bat</code> 這個指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s $(which batcat) /usr/local/bin/bat<br></code></pre></td></tr></table></figure><h3 id="安裝-fzf-fish"><a href="#安裝-fzf-fish" class="headerlink" title="安裝 fzf.fish"></a>安裝 fzf.fish</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install PatrickF1/fzf.fish<br></code></pre></td></tr></table></figure><h2 id="設定-asdf-自動完成"><a href="#設定-asdf-自動完成" class="headerlink" title="設定 asdf 自動完成"></a>設定 asdf 自動完成</h2><p>若已經有安裝使用 <a href="https://asdf-vm.com/">asdf</a> 軟體版本管理器，設定自動完成如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.config/fish/config.fish<br></code></pre></td></tr></table></figure><p>在 <code>~/.config/fish/config.fish</code> 文件最後添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.asdf/asdf.fish<br></code></pre></td></tr></table></figure><p>最後，輸入以下指令，連結自動完成的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/.config/fish/completions; and ln -s ~/.asdf/completions/asdf.fish ~/.config/fish/completions<br></code></pre></td></tr></table></figure><h2 id="完結"><a href="#完結" class="headerlink" title="完結"></a>完結</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CDN 缓存配置和其它配置实用优化</title>
    <link href="/Web/39758bc7/"/>
    <url>/Web/39758bc7/</url>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.xinac.com/article/498.html">https://www.xinac.com/article/498.html</a></p><h2 id="一、缓存的作用"><a href="#一、缓存的作用" class="headerlink" title="一、缓存的作用"></a>一、缓存的作用</h2><p><code>CDN</code>加速静态资源时，将源站上的资源缓存到距离客户端最近的<code>CDN</code>节点上。当您访问该静态资源时，直接从缓存中获取，避免通过较长的链路回源，提高访问效率。</p><h2 id="二、配置说明"><a href="#二、配置说明" class="headerlink" title="二、配置说明"></a>二、配置说明</h2><p>本文以阿里云为例说明</p><h3 id="（1）缓存过期时间"><a href="#（1）缓存过期时间" class="headerlink" title="（1）缓存过期时间"></a>（1）缓存过期时间</h3><p>支持2种类型</p><ul><li>目录</li></ul><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image.png" alt="CDN缓存配置和其它配置实用优化"></p><ul><li>文件后缀名</li></ul><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-1.png" alt="CDN缓存配置和其它配置实用优化"></p><ul><li>配置建议</li></ul><table><thead><tr><th>地址</th><th>类型</th><th>过期时间</th></tr></thead><tbody><tr><td>ico,jpg,png,gif,jpeg</td><td>文件后缀名</td><td>1个月</td></tr><tr><td>flv,mp4</td><td>文件后缀名</td><td>3个月</td></tr><tr><td>txt,md</td><td>文件后缀名</td><td>1个月</td></tr><tr><td>js,css,map,json</td><td>文件后缀名</td><td>1个月</td></tr><tr><td>svg,eot,ttf,woff,woff2,otf,ttc</td><td>文件后缀名</td><td>3个月</td></tr><tr><td>rar,zip,tar,gz,tgz,7z,jar,exe,msi</td><td>文件后缀名</td><td>3个月</td></tr><tr><td>&#x2F;</td><td>目录</td><td>3天</td></tr></tbody></table><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-5.png" alt="CDN缓存配置和其它配置实用优化"></p><h3 id="（2）状态码过期时间"><a href="#（2）状态码过期时间" class="headerlink" title="（2）状态码过期时间"></a>（2）状态码过期时间</h3><p>可以针对静态资源配置指定目录和文件后缀名的状态码过期时间，资源过期后，自动从<code>CDN</code>节点删除。通过本文您可以了解状态码过期时间的配置方法。</p><p>在设置状态码过期时间时，注意事项如下：</p><ul><li>对于<code>状态码303、304、401、407、600和601</code>，不进行缓存。</li><li>对于<code>状态码204、305、400、403、404、405、414、500、501、502、503和504</code>，如果源站响应了<code>Cache-Control</code>，则遵循源站的<code>Cache-Control</code>原则。如果未设置状态码，则缓存时间默认为1秒。</li><li>如果您同时设置了目录和文件后缀名这两种类型的状态码过期时间，那么先设置的类型生效。</li></ul><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-6.png" alt="CDN缓存配置和其它配置实用优化"></p><h3 id="（3）HTTP头"><a href="#（3）HTTP头" class="headerlink" title="（3）HTTP头"></a>（3）HTTP头</h3><p>如果要允许<code>跨域请求</code>，需要在这里增加配置。</p><p>配置参考：</p><table><thead><tr><th>参数</th><th>取值</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td>*</td></tr><tr><td>Access-Control-Allow-Headers</td><td>*</td></tr><tr><td>Access-Control-Allow-Methods</td><td>GET, POST, OPTIONS</td></tr></tbody></table><h3 id="（4）自定义页面"><a href="#（4）自定义页面" class="headerlink" title="（4）自定义页面"></a>（4）自定义页面</h3><p>可自定义设置<code>404、403、503、504</code>等页面</p><h3 id="（5）rewrite重写"><a href="#（5）rewrite重写" class="headerlink" title="（5）rewrite重写"></a>（5）rewrite重写</h3><p>重写功能支持对请求的URI进行修改、302重定向。可以配置多条<code>rewrite</code>匹配规则。支持正则表达式。</p><h2 id="三、CDN其它配置优化"><a href="#三、CDN其它配置优化" class="headerlink" title="三、CDN其它配置优化"></a>三、CDN其它配置优化</h2><ol><li>基本配置–源站信息，可配置多个源站信息</li></ol><p>多源站可配置<code>多个服务器</code>或<code>服务器+OSS</code>，提升服务质量</p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-4.png" alt="CDN缓存配置和其它配置实用优化"></p><ol><li>回源配置</li></ol><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">回源HOST`，一般要配置为`源站域名<br></code></pre></td></tr></table></figure><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-3.png" alt="CDN缓存配置和其它配置实用优化"></p><p><code>回源SNI</code>，一般配置为<code>源站域名</code>，尽量启用，https访问时需要</p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-2.png" alt="CDN缓存配置和其它配置实用优化"></p><ol><li><code>HTTPS证书</code>，到期<code>自动续签</code></li></ol><p>在CDN里配置<code>https证书</code>时，选择<code>免费证书</code>可以<code>自动续签</code>。如果申请好证书再配置到这里，无法自动续签。</p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-8.png" alt="CDN缓存配置和其它配置实用优化"></p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-7.png" alt="CDN缓存配置和其它配置实用优化"></p><ol><li>尽量启用<code>HTTP/2</code>，<code>OCSP Stapling</code>和<code>TLSv1.3</code></li><li>访问控制，<code>Referer防盗链</code>和<code>UA黑/白名单</code></li></ol><p>如果你的网站盗链严重，可以开启<code>Referer防盗链</code></p><p>如果你的网站被爬虫严重，可以配置<code>IP黑/白名单</code>和<code>UA黑/白名单</code>。<code>IP黑/白名单</code>可以禁止某些IP的高频率访问；<code>UA黑/白名单</code>可以限制某些爬虫的请求</p><ol><li>性能优化，如无特殊需要，尽量启用<code>页面优化</code>、<code>智能压缩</code>、<code>Brotli压缩</code></li><li>其它配置可自行测试效果</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sip 服务器（Freeswitch）屏蔽国外 IP</title>
    <link href="/Linux-Web/67a7fc07/"/>
    <url>/Linux-Web/67a7fc07/</url>
    
    <content type="html"><![CDATA[<p>SIP攻击很常见，特别是各大云服务器，基本上开了个公网IP绑定到实例机器就会被外国IP一遍怼。防范也容易，就是把外国IP禁掉。<br>实现：iptables+ipset，只允许中国IP访问本机，也就实现了封禁国外IP的效果。<br>优点：匹配迅速，免去iptables单链匹配。</p><p>操作步骤：</p><p>1.安装ipset 以及iptabls</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装ipset：</span><br>RedHat：yum install ipset<br>Debian：apt-get install ipset<br><span class="hljs-comment">#建表</span><br>ipset create china <span class="hljs-built_in">hash</span>:net hashsize 10000 maxelem 1000000<br><span class="hljs-comment">#批量增加中国IP到ipset的china表</span><br><span class="hljs-comment">#以下内容保存成脚本执行即可</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">rm</span> -f cn.zone<br>wget http://www.ipdeny.com/ipblocks/data/countries/cn.zone<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">cat</span> cn.zone`<br><span class="hljs-keyword">do</span><br>    ipset add china <span class="hljs-variable">$i</span> <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>2.创建规则文件（<code>vim iptabls.rule</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">*filter<br>:INPUT DROP [0:0]<br>:FORWARD DROP [0:0]<br>:OUTPUT ACCEPT [0:0]<br>-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -m <span class="hljs-built_in">set</span> --match-set china src -p tcp -m tcp --dport 1:65535 -j ACCEPT<br>-A INPUT -m <span class="hljs-built_in">set</span> --match-set china src -p udp -m udp --dport 1:65535 -j ACCEPT<br>-A INPUT -p udp -m udp --dport 16384:32768 -j ACCEPT<br>-A INPUT -s 172.18.0.0/16 -j ACCEPT<br>-A INPUT -p icmp -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A OUTPUT -o lo -j ACCEPT<br>COMMIT<br></code></pre></td></tr></table></figure><p>3.导入规则文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导入规则文件</span><br>iptables-restore &lt; iptabls.rule <br><span class="hljs-comment"># 应用生效</span><br>iptables-apply <br></code></pre></td></tr></table></figure><p>如果提示下面的错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@opensips:~# iptables-apply <br>Error: rulesfile not readable: /etc/network/iptables.up.rules<br></code></pre></td></tr></table></figure><p>可以先创建iptables.up.rules文件，然后再次执行apply即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /etc/network/iptables.up.rules<br></code></pre></td></tr></table></figure><p>4.查看iptables规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@opensips:~# iptables -L<br>Chain INPUT (policy DROP)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED<br>ACCEPT     tcp  --  anywhere             anywhere             match-set china src tcp dpts:tcpmux:65535<br>ACCEPT     udp  --  anywhere             anywhere             match-set china src udp dpts:1:65535<br>ACCEPT     udp  --  anywhere             anywhere             udp dpts:16384:32768<br>ACCEPT     all  --  172.18.0.0/16        anywhere            <br>ACCEPT     icmp --  anywhere             anywhere            <br>ACCEPT     all  --  anywhere             anywhere            <br> <br>Chain FORWARD (policy DROP)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br> <br>Chain OUTPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>ACCEPT     all  --  anywhere             anywhere     <br></code></pre></td></tr></table></figure><p>如果看到上面的信息，iptables就生效了。现在再去看freeswitch的日志就会发现那些乱七八糟的信息都没了。</p><p>参考链接：</p><p><a href="https://www.codeleading.com/article/6624712284">https://www.codeleading.com/article/6624712284</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux,Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Openbox 作为基底打造你自己的 Linux 桌面环境</title>
    <link href="/Linux/bd980760/"/>
    <url>/Linux/bd980760/</url>
    
    <content type="html"><![CDATA[<p>这篇文章会教你如何使用 Openbox 作为基底打造你自己的 Linux 桌面环境。</p><p>很久没有写过这类教程了，如果发现文章中的问题或不足，可以在评论中告诉我😁</p><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><h2 id="Openbox-是什么？"><a href="#Openbox-是什么？" class="headerlink" title="Openbox 是什么？"></a>Openbox 是什么？</h2><p>对于能够找到这篇文章的你，这应该不是你想问的问题吧…</p><p>Openbox 是一个 WM（Window Manager&#x2F;窗口管理器）用来显示并管理每个 GUI 程序的窗口。 经常被人们提到的 Gnome、KDE 之类的东西是 DE（Desktop Environment&#x2F;桌面环境）。一个 DE 通常会包括一个 DM（Display Manager&#x2F;显示管理器，通常用于用户登录并启动桌面环境）、一个 WM（用于显示窗口）、一个 compositor（或许可以翻译为“合成器”？用于渲染特效、透明效果等）和一大堆附加组件（如窗口列表、dock 栏、托盘）。 理论上讲，各个 DE 中的每个部分都可以被替换掉，例如用 LightDM 替换掉 Gnome 自带的 DM：GDM，或用 openbox 替换掉 XFCE 自带的 WM：xfwm。</p><h2 id="为什么不用已有的桌面环境？"><a href="#为什么不用已有的桌面环境？" class="headerlink" title="为什么不用已有的桌面环境？"></a>为什么不用已有的桌面环境？</h2><p>原因如下：</p><ul><li>打包好的桌面环境总会包含你不需要的组件。这就像你去饭店点了一份不要辣椒的菜，结果上的菜里还是有辣椒，老板说这辣椒是送你的，免费的──你觉得 compositor 影响性能，不想要它，但大多数桌面环境（就算是最小化安装的也一样）都会“免费”送你一个，虽说你可以禁用掉它，但是有你完全用不到的组件在你的系统里，还由于软件包依赖问题无法卸装，这还是挺恶心的。</li><li>重量级的桌面环境总是会有类似于 Windows 注册表的东西，例如 dconf。一个文本配置文件就能解决的问题，非要搞得这么复杂。</li><li>你很难搞清桌面环境中每一个组件、每一个软件包的用途，这导致出现 bug 时的问题排查与解决变得非常麻烦复杂。</li><li>你就是喜欢折腾，你就是喜欢与众不同🥴</li></ul><p>自己动手拼凑桌面环境就不会有这些问题。你喜欢 LXDE 的 Panel、Xfce 的终端、Gnome 的截图工具？没有任何问题，你可以你自己喜欢的所有组件放在一起。这就是不使用已有桌面环境的最大优点。</p><p>你的桌面环境是什么样的并不重要，重要的是它是否能让你用得顺手，符合你的习惯，提升你的效率。</p><h2 id="为什么选用-Openbox？"><a href="#为什么选用-Openbox？" class="headerlink" title="为什么选用 Openbox？"></a>为什么选用 Openbox？</h2><p>Openbox 可以说是一个较为“传统”的窗口管理器。它并不支持 wayland，只能运行在传统的 X11 上，但这也保证了它的稳定性，并且对 N 卡有更好的支持。 另外，Openbox 在交互上偏向于使用鼠标。虽然你可以按照你的喜好设置一大堆快捷键，但如果你对键盘操作特别钟情，或是讨厌操作鼠标，可能 <a href="https://i3wm.org/">i3</a>（X11）、<a href="https://swaywm.org/">sway</a>（wayland）类的桌面更适合你。</p><p>相较于重量级的 DE，如 Gnome、KDE，Openbox 极其轻量，并且基本不存在什么依赖。 对于其他轻量级 WM，openbox 可以说是配置起来最简单的，并且有几乎是最完备的生态和社区。</p><h2 id="目标与准则"><a href="#目标与准则" class="headerlink" title="目标与准则"></a>目标与准则</h2><p>这篇文章会以我的桌面环境的配置为例，详细地介绍如何拼凑一个桌面环境。我会详细介绍我自己的方案，但也会给出其它方案，你可以按照自己的喜好来选择。就算WM相同，两个人的桌面也可以从外观和使用上完全不同。</p><p>我自己的准则：</p><ul><li>选择稳定、不频繁更改功能、但仍在开发中的组件</li><li>不使用已过时或已停止开发&#x2F;支持的组件，也不使用有已过时依赖（如python2）的组件</li><li>尽量使用图形库比较新的组件，也就是尽量不用使用了 GTK2&#x2F;QT4 的组件</li><li>效率优先，不在外观与特效上花太多心思，当然成品看起来也不能丑</li><li>在日常使用上，能用 GUI 解决的操作，绝不用 terminal</li><li>使用配置起来简单的组件，就是那些就算用直接改配置文件的方式更改设置也不会很难的组件</li><li>用到的所有组件都可以透过 Arch 官方源与 AUR 安装，当然手动编译也不难</li></ul><p>再次强调，你不需要完全照搬我的配置，我也不推荐你这么做，毕竟只有尝试过更多方案才能选择出最适合你的。这正是 Linux 的精髓。</p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><p>在这里，假设你的系统是 Arch（其他系统也大同小异，只不过可能需要手动编译一些组件），且系统中还没有安装桌面环境与 X Window System。</p><p>下面列出的程序全部都是没有过时或停止开发&#x2F;支持并且依赖也没有过时的。</p><h2 id="基础软件包：X-Window-System、Display-Manager-和-Openbox"><a href="#基础软件包：X-Window-System、Display-Manager-和-Openbox" class="headerlink" title="基础软件包：X Window System、Display Manager 和 Openbox"></a>基础软件包：X Window System、Display Manager 和 Openbox</h2><p>首先需要的是处在最底层的 X Window System。一般来说只需要 xorg-server 包和它的依赖。 另外，这里还需要安装你的显卡对应的 xf86-video 包，如 xf86-video-intel。如果你的机器同时有核显与独显，最好暂时只安装核显的包。</p><p>你还需要一个 DM 来启动 Openbox，我用的是 <a href="https://wiki.archlinux.org/index.php/LightDM">LightDM</a>，当然还有其它选择，如 <a href="https://wiki.archlinux.org/index.php/LXDM">LXDM</a>。顺便一提，如果你准备使用 LXDM 的话，要注意它有 GTK2 与 GTK3 两个版本，一般来说选择 GTK3 版本的比较好。 如果你和我一样选择了 LightDM，那么你还需要一个 Greeter 用来在 GUI 下登录。这里有很多选择，可以参考 <a href="https://wiki.archlinux.org/index.php/LightDM#Greeter">Wiki 中的 Greeter 一节</a>。我使用的是默认的 lightdm-gtk-greeter，主要原因是它可以使用与桌面环境相同的 GTK 主题来保持界面风格的一致。</p><p>当然，不用 DM 也是完全可以的。利用 <a href="https://wiki.archlinux.org/index.php/Xinit">Xinit</a> 你可以在终端中启动 X Window System，并且可以通过切 tty 来实现多用户。</p><p>最后，别忘了安装 Openbox。这里最好顺便装上 xterm，因为刚刚安装好的 Openbox 的应用菜单默认是硬编码的，常用的终端只有 xterm 在菜单中，后面将你喜欢的 GUI 终端添加到 Openbox 应用菜单后你可以直接将 xterm 卸装掉。不装 xterm 也没有任何问题，只不过稍微麻烦一点，最初几步中你需要切换到其它 tty 来执行命令。</p><p>将你的 DM 设置为自启后，重启电脑，不出意外的话重启后你会进入 DM 的登录界面。登录后，你便可以进入 Openbox。</p><h2 id="使桌面环境“可用”"><a href="#使桌面环境“可用”" class="headerlink" title="使桌面环境“可用”"></a>使桌面环境“可用”</h2><p>进入一个未经配置的 Openbox，你只会看到黑色的背景，没有任何其它东西，鼠标右键会显示应用菜单。</p><p>这时你的桌面系统还远远达不到“可用”，至少还需要窗口列表和系统托盘。</p><h3 id="窗口列表与系统托盘"><a href="#窗口列表与系统托盘" class="headerlink" title="窗口列表与系统托盘"></a>窗口列表与系统托盘</h3><p>这里有几种不同方案：</p><h4 id="方案一：使用一个-Dock-栏和一个系统托盘"><a href="#方案一：使用一个-Dock-栏和一个系统托盘" class="headerlink" title="方案一：使用一个 Dock 栏和一个系统托盘"></a>方案一：使用一个 Dock 栏和一个系统托盘</h4><p>这种情况下，你没有窗口列表来显示已打开的窗口，所以需要一个可以显示并重新打开最小化后的窗口的 Dock 栏，这里列出 2 个可选项：</p><ul><li><a href="https://wiki.archlinux.org/index.php/Cairo-Dock">Cairo-Dock</a>──可定制程度比较高，但我个人不太喜欢，因为它不是很轻量，特效太多，而且一些功能需要 compositor 来实现。在我的笔记本（只开了核显）上打开它后散热风扇竟然都会开始转…</li><li><a href="https://wiki.archlinux.org/index.php/Plank">Plank</a>──非常轻量化，可定制性也不错，只是缺少工作区切换的功能，但可以通过设置 Openbox 快捷键或使用其它小组件实现</li></ul><p>窗口列表实现了，但你还需要一个系统托盘，可以选择 <a href="https://wiki.archlinux.org/index.php/Stalonetray">Stalonetray</a>，或 <a href="https://github.com/sargon/trayer-srg">trayer-srg</a>，或 <a href="https://github.com/taffybar/taffybar">taffybar</a></p><h4 id="方案二：使用一个-Panel"><a href="#方案二：使用一个-Panel" class="headerlink" title="方案二：使用一个 Panel"></a>方案二：使用一个 Panel</h4><p>这是我选择的方案。</p><p>Panel 一般会包含窗口列表、工作区切换器、系统托盘之类的东西。通常来说，有一个 Panel 已经足够让你的桌面环境“可用”了。 下面列出几个可选的 Panel：</p><ul><li><a href="https://wiki.archlinux.org/index.php/Tint2">tint2</a>或许是最大名鼎鼎的独立 Panel，很轻量，也高度可定制化</li><li><a href="https://wiki.lxde.org/en/LXPanel">LXPanel</a>是LXDE桌面环境的默认 Panel，也没什么依赖，可以脱离 LXDE 而单独运行，轻量且定制性也不错，有 GTK2 和 GTK3 版本。在我这里 GTK2 版本可以完美运行，但 GTK3 版本系统托盘中的图标貌似有点 bug,不能实时更新。</li><li><a href="https://github.com/lxqt/lxqt-panel">lxqt-panel</a>和 LXPanel 差不多，是 LXQt 桌面环境的默认 Panel。</li><li><a href="https://docs.xfce.org/xfce/xfce4-panel/start">Xfce Panel</a>是我最终的选择（后面会讲到为什么），它是 xfce 桌面环境的默认 Panel，也没什么依赖可以独立运行。它足够简单，可以定制的部分也不少，并且有很多使用的插件。</li></ul><h4 id="方案三：使用一个-Panel-和一个-Dock-栏"><a href="#方案三：使用一个-Panel-和一个-Dock-栏" class="headerlink" title="方案三：使用一个 Panel 和一个 Dock 栏"></a>方案三：使用一个 Panel 和一个 Dock 栏</h4><p>通常 Panel 也可以作为 Dock 栏使用，但如果你很想再揉进去一个独立的 Dock 也没有问题。</p><h2 id="决定是否将桌面作为一个目录"><a href="#决定是否将桌面作为一个目录" class="headerlink" title="决定是否将桌面作为一个目录"></a>决定是否将桌面作为一个目录</h2><p>要不要在桌面上堆放文件？</p><h3 id="需要在桌面上堆放文件"><a href="#需要在桌面上堆放文件" class="headerlink" title="需要在桌面上堆放文件"></a>需要在桌面上堆放文件</h3><p>如果你喜欢平时把一些文件和目录直接放在桌面上以便操作，就遵照这个部分进行。 下面列出几种选择让你能够在桌面放置文件和目录：</p><ul><li><a href="https://wiki.archlinux.org/index.php/PCManFM">PCManFM</a> 是一个文件管理器，不过它有将桌面作为一个目录进行管理的功能。它有 GTK2、GTK3 和 QT 版。但要注意，PCManFM 与 LXPanel 共同依赖于 libfm 库，而 libfm 分为 GTK2 和 GTK3 版本且相互冲突。也就是说，如果你同时使用 LXPanel 与 PCManFM，那么两者必须是同一 GTK 版本的。PCManFM-GTK3 在我这里有拖动文件时不显示的 bug，而 GTK2 毕竟是 10 年前的老设计，个人感觉不太美观，所以最后弃用了这个方案。</li><li><a href="https://docs.xfce.org/xfce/xfdesktop/start">xfdesktop</a> 是 XFCE 用来管理桌面的程序，简单易用，但它依赖 <a href="https://wiki.archlinux.org/index.php/Thunar">Thunar</a> 文件管理器，如果你本身就准备使用 Thunar 的话倒是没什么，但如果你不喜欢 Thunar，xfdesktop 可能不是个好的选择。</li><li><a href="http://rox.sourceforge.net/desktop">ROX</a> 其实本身就可以认为是一个桌面环境了，不过它也可以用来管理桌面。我没有用过 ROX，所以就不做更多表述了。</li></ul><p>一般来说，用户的“桌面”文件夹在 <code>~/Desktop</code>，但修改起来也不难。<del>我就是直接将我的 home 目录作为桌面目录的。</del></p><h3 id="不需要在桌面上堆放文件"><a href="#不需要在桌面上堆放文件" class="headerlink" title="不需要在桌面上堆放文件"></a>不需要在桌面上堆放文件</h3><p>如果你为了为了整洁的外观或是其它原因不准备在桌面上放置文件，在这一步你最好开始编辑 Openbox 的右键菜单与壁纸。</p><h4 id="编辑-Openbox-的右键菜单"><a href="#编辑-Openbox-的右键菜单" class="headerlink" title="编辑 Openbox 的右键菜单"></a>编辑 Openbox 的右键菜单</h4><p>ArchWiki 中有很详细的介绍，可以直接参照<a href="https://wiki.archlinux.org/index.php/openbox#Menus">这里</a></p><h4 id="设置壁纸"><a href="#设置壁纸" class="headerlink" title="设置壁纸"></a>设置壁纸</h4><p>在桌面模式下运行的 PCManFM、xfdesktop 和 ROX 都支持设置壁纸，但在不用它们的情况下，<a href="https://wiki.archlinux.org/index.php/Nitrogen">Nitrogen</a> 可以用来设置壁纸。</p><h2 id="让程序自启动"><a href="#让程序自启动" class="headerlink" title="让程序自启动"></a>让程序自启动</h2><p>只需要在 <code>~/.config/openbox/autostart</code> 或 <code>~/.xprofile</code> 加入需要自动执行的命令。两个文件的区别在于，<code>~/.xprofile</code> 中的命令是在 X Server 启动时执行的，而 <code>~/.config/openbox/autostart</code> 中的内容是在 Openbox 启动后才执行的，一般来说两者区别不大。</p><p>一个例子：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">xfdesktop <span class="hljs-meta">&amp;</span><br>xfce4<span class="hljs-punctuation">-</span>panel <span class="hljs-meta">&amp;</span><br>nm<span class="hljs-punctuation">-</span>applet <span class="hljs-meta">&amp;</span><br>optimus<span class="hljs-punctuation">-</span>manager<span class="hljs-punctuation">-</span>qt <span class="hljs-meta">&amp;</span><br>pasystray <span class="hljs-meta">&amp;</span><br>blueman<span class="hljs-punctuation">-</span>applet <span class="hljs-meta">&amp;</span><br>xfce4<span class="hljs-punctuation">-</span>power<span class="hljs-punctuation">-</span>manager <span class="hljs-meta">&amp;</span><br>fcitx5 <span class="hljs-meta">&amp;</span><br></code></pre></td></tr></table></figure><h2 id="“设置”程序"><a href="#“设置”程序" class="headerlink" title="“设置”程序"></a>“设置”程序</h2><p>Openbox 有自己的设置程序 <a href="http://openbox.org/wiki/ObConf:About">ObConf</a>，需要单独安装。</p><p><a href="https://wiki.lxde.org/en/LXAppearance">lxappearance</a> 可以用来设置 GTK 主题等一些选项，虽说从名字里看它是 LXDE 的组件，但它完全可以独立运行。推荐安装它的GTK3版本。</p><p>如果你的电脑同时有核显和独显，Arch 系可以用<a href="https://github.com/Askannz/optimus-manager">optimus-manager</a>配合 GUI 前端 <a href="https://github.com/Shatur95/optimus-manager-qt">optimus-manager-qt</a> 切换显卡，体验极佳。</p><h2 id="一些重要的程序"><a href="#一些重要的程序" class="headerlink" title="一些重要的程序"></a>一些重要的程序</h2><p>到这里，你的 Openbox 已经达到“可用”状态了，但还需要一些如文件管理器、终端之类的程序。</p><h3 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h3><p>有很多选择，之前提到的 PCManFM、Thunar 都是很不错的轻量级文件管理器，而且在网上随便查查就能找到不少其它的选择。</p><p>注意，大多数文件管理器会通过 <a href="https://wiki.archlinux.org/index.php/File_manager_functionality">gvfs</a> 实现回收站和自动挂载可移动设备的功能，并且可能需要通过一个 daemon 进程监听。</p><p>我选择的是 Thunar。</p><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><p>之前我们一直临时在用 xterm 作为终端。有很多更好的终端，我自己在用的是 <a href="https://launchpad.net/sakura">Sakura</a>，非常简洁轻量。<a href="https://docs.xfce.org/apps/terminal/start">xfce4-terminal</a>、<a href="https://wiki.archlinux.org/index.php/Termite">Termite</a> 也是不错的选择。</p><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p>同样有很多选择。单纯作为文本编辑器，<a href="https://github.com/codebrainz/mousepad">mousepad</a> 很不错。如果你喜欢 Windows 上 Notepad++ 的体验，<a href="https://notepadqq.com/">notepadqq</a> 几乎一模一样，只是现版本的行首缩进貌似有些 bug。 我用的是 Gvim，这个就不用多解释了。</p><h3 id="用来锁定、退出、关机和重启的面板"><a href="#用来锁定、退出、关机和重启的面板" class="headerlink" title="用来锁定、退出、关机和重启的面板"></a>用来锁定、退出、关机和重启的面板</h3><p>我用的是 <a href="https://wiki.archlinux.org/index.php/Oblogout">Oblogout</a>。</p><h2 id="系统托盘中的东西"><a href="#系统托盘中的东西" class="headerlink" title="系统托盘中的东西"></a>系统托盘中的东西</h2><p>这里列出我使用的组件：</p><ul><li><a href="https://wiki.archlinux.org/index.php/NetworkManager#nm-applet">nm-applet</a> 是 NetworkManager 的托盘程序，我还在用 NetworkManager 的原因就是其它网络管理程序没有什么好的 GUI──Wicd 因为使用 Python2 而被 pass 掉，netctl 也没有可以与 nm-applet 媲美的 GUI 前端。</li><li><a href="https://wiki.archlinux.org/index.php/Blueman">blueman-applet</a> 配合 blueman-manager 可以很方便地管理蓝牙。想要通过 PulseAudio 使用 APTX 或 LDAC 的话可以使用 <a href="https://github.com/EHfive/pulseaudio-modules-bt">pulseaudio-modules-bt</a>，Arch 系可以直接通过 AUR 安装，同时要安装 libldac。</li><li><a href="https://github.com/christophgysin/pasystray">pasystray</a> 是 PulseAudio 的托盘，功能非常强大，配合 <a href="https://freedesktop.org/software/pulseaudio/pavucontrol">pavucontrol</a>，操作音频设备就非常容易了。</li><li><a href="https://docs.xfce.org/xfce/xfce4-power-manager/start">xfce4-power-manager</a> 是 XFCE 管理电源和屏幕亮度的托盘程序，可以脱离 XFCE 独立安装运行。</li><li><a href="https://github.com/Shatur95/optimus-manager-qt">optimus-manager-qt</a> 之前提到过，是 optimus-manager 的 GUI 前端，用来切换显卡。</li></ul><h2 id="定义键盘快捷键"><a href="#定义键盘快捷键" class="headerlink" title="定义键盘快捷键"></a>定义键盘快捷键</h2><p>Openbox的键盘快捷键可以通过编辑 <code>~/.config/openbox/rc.xml</code> 修改，当然也有 GUI 前端可以修改快捷键，但是我觉得没有必要，因为 <code>rc.xml</code> 修改起来非常简单。</p><p>可以参考 <a href="https://wiki.archlinux.org/index.php/openbox#Keybinds">Arch Wiki 中 Openbox 词条的 Keybinds 章节</a>进行配置。</p><p>下面列出我的 <code>rc.xml</code> 中的 <code>&lt;keyboard&gt;</code> 段，其中包含一些有用的小组件，下文会提到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">keyboard</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Oblogout 面板 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-A-Delete&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>oblogout<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 窗口与工作区相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;W-a&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ToggleShowDesktop&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;A-Left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PreviousWindow&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;A-Right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;NextWindow&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-Left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DesktopLeft&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-Right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DesktopRight&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-A-Left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SendToDesktopLeft&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-A-Right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SendToDesktopRight&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 用 pactl 控制音量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioMute&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>pactl set-sink-mute 0 toggle<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioRaiseVolume&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>pactl set-sink-volume @DEFAULT_SINK@ +5%<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioLowerVolume&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>pactl set-sink-volume @DEFAULT_SINK@ -5%<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 用 playerctl 控制上一曲、下一曲、播放与暂停 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioPrev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>playerctl next<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioPlay&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>playerctl play-pause<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioNext&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>playerctl previous<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 用 escrotum 截图 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum -C<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum -Cs<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;S-Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-S-Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum -s<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keyboard</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一些好用的程序与小工具"><a href="#一些好用的程序与小工具" class="headerlink" title="一些好用的程序与小工具"></a>一些好用的程序与小工具</h2><ul><li><a href="https://github.com/Roger/escrotum">escrotum</a> 是一个非常轻量的截图工具。</li><li><a href="https://deadbeef.sourceforge.io/">DeaDBeeF</a> 神似 foobar2000，很轻量好用的音乐播放器，可惜用的不是 MPRIS D-Bus Interface Specification 标准，不过可以在应用内设置快捷键达到一样的效果。</li><li><a href="https://github.com/altdesktop/playerctl">playerctl</a> 可以控制使用了 <a href="https://specifications.freedesktop.org/mpris-spec">MPRIS D-Bus Interface Specification</a> 标准的播放器进行上一曲、下一曲、播放与暂停操作。</li><li><a href="https://wiki.lxde.org/en/GPicView">GPicView</a> 是 LXDE 默认的图片查看器，轻量好用。有 GTK2 和 GTK3 版本，一般用 GTK3 版本就可以了。</li><li><a href="https://github.com/mate-desktop/engrampa">Engrampa</a> 是 MATE 默认的压缩文件管理器，个人认为 Linux 下最好的 GUI 压缩文件管理器。</li><li><a href="http://parcellite.sourceforge.net/">Parcellite</a> 是一个轻量的剪切板管理器，简单够用。</li></ul><h2 id="关于-compositor"><a href="#关于-compositor" class="headerlink" title="关于 compositor"></a>关于 compositor</h2><p>首先你需要问问自己，你是否真的需要 compositor？ 诚然，compositor 可以装饰窗口、实现透明效果，Compiz 这样重量级的 compositor 甚至可以实现很多炫酷的特效。但这值得吗？这些效果无法带来实质上的效率提升。compositor 在后台会占用很多 GPU 资源从而导致帧率的下降，如果你是游戏玩家的话这尤为关键：在我的电脑上，开启 compositor 后 CS:GO 的帧率会下降接近四分之一。 另外，没有正确配置的 compositor 可能会导致令人很不舒服的画面撕裂等问题。</p><p>如果你一定要使用 compositor，我推荐以下两个：</p><ul><li><a href="https://wiki.archlinux.org/index.php/Picom">picom</a> 是已经停止开发的 Compton 的后继开发产物，简单轻量，适合不需要太多装饰与特效的人。</li><li><a href="http://www.compiz.org/">Compiz</a> 是最有名的重量级 compositor，它甚至可以单独作为一个 WM 使用。能实现非常多效果，并且有完备的生态与社区。</li></ul><h2 id="对触控板的调校"><a href="#对触控板的调校" class="headerlink" title="对触控板的调校"></a>对触控板的调校</h2><p>可以参考我的另一篇文章<a href="https://www.eaimty.com/2020/09/optimize-touchpad-on-linux-with-libinput-driver.html">《对 Linux 下触控板按键、加速和手势的优化（libinput）》</a></p><h1 id="写作初衷"><a href="#写作初衷" class="headerlink" title="写作初衷"></a>写作初衷</h1><p>去年我买了一台游戏本作为主力 PC，当时觉得，既然是游戏本，那用 Windows 应该是理所当然的，就把我的整个工作环境迁移到了 Windows 上。用了大概半年，我彻底受够了 Windows：催命般的 Windows Update、相当于没有的包管理…最恶心的还是注册表，这东西简直就是人类科技的倒退。</p><p>今年一月，我切换到了最近大红大紫的 Manjaro，具体版本是 Manjaro XFCE Edition Minimal。 这一用就是半年，我最终还是决定换掉它，原因就是：它注重“傻瓜化”。但我不是傻瓜啊…Manjaro 为了达到“开箱即用”的状态集成了太多没用的组件，就算是 Minimal 版本也是如此。例如，yay 已经够好了，然而 Manjaro 还是要再带一个 pamac，虽然说 pamac 的重点在于它的 GUI,但市面上 pacman 和 AUR Helper 的 GUI 已经很多了，使用体验不错的也有不少。另外，不知为何，Manjaro 经常会在更新时搞坏一些东西，默认的 theme 就在某次大版本更新时坏掉过，导致很多 GTK 程序变得辣眼睛；Optimus Manager 也在某次更新过后出过问题，需要重启 2 次 DE 才能成功切换显卡。每次处理这类问题都十分麻烦耗时，这也是庞大臃肿系统桌面环境的通病。 我对 Manjaro 的最终印象是：适合小白与非常懒的用户（连手动配置一次环境都懒得做的那类人），且由于 Manjaro 基于 Arch，有 AUR 这样一个方便的软件包来源，几乎没有手动编译软件的需要。</p><p>最终我还是换回了 Arch，自己动手拼凑了桌面环境。 感觉在中文互联网上关于自己拼凑 Linux 桌面环境的文章少之又少，于是便有了写这篇文章的想法。在鸽了 N 个星期后，终于写完并发布了这篇文章。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nano 编辑器可以做些什么？</title>
    <link href="/Linux/e527aabb/"/>
    <url>/Linux/e527aabb/</url>
    
    <content type="html"><![CDATA[<p>终端下如果你不喜欢 Vim&#x2F;Emacs 的话，Nano 是一个不错的选择，它是一个真正意义上的跨平台编辑器，基本上在所有 Linux 发行版上都默认自带 Nano，并且有 Windows 版本。</p><p>不少初学 Linux 都很喜欢用 Nano，但是我发现他们很多都是在裸用，既没配置，也一直在用一些比较低效的操作方法。</p><p><strong>Q：下面的帮助占三行，很碍眼，能否隐藏？</strong></p><p>可以在编辑时使用 ALT+x 就可以切换下面的帮助信息，或者在你的 ~&#x2F;.nanorc 里面加一行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> nohelp <br></code></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image-2.webp" alt="img"></p><p>恩，那两行恶心的帮助已经被我们去掉了，需要时还可以用 ALT+x 把它切换回来。</p><p><strong>Q：如何打开语法高亮？</strong></p><p>有的 Linux 发行版自带了 &#x2F;etc&#x2F;nanorc 文件，里面定义了语法高亮，而另外一些系统可能没有这个定义，你需要在 ~&#x2F;.nanorc 中加一行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/usr/share/nano/*.nanorc&quot;</span><br></code></pre></td></tr></table></figure><p>各种语言的语法文件一般位于：&#x2F;usr&#x2F;share&#x2F;nano&#x2F; 下面，设置前先确认一下。</p><p><strong>Q：怎么编辑 ~&#x2F;.nanorc，常用设置有哪些？</strong></p><p>常见的 nano 配置如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> tabsize 4       # 设置制表符宽度<br><span class="hljs-built_in">set</span> autoindent      # 允许自动缩进<br><span class="hljs-built_in">set</span> cut             # 设置 CTRL-K 可以剪贴到行末<br><span class="hljs-built_in">set</span> noconvert       # 不要转换 DOS/UNIX 换行符<br><span class="hljs-built_in">set</span> nowrap          # 不要自动换行<br><span class="hljs-built_in">set</span> nohelp          # 不显示下面两行帮助<br><span class="hljs-built_in">set</span> morespace       # 隐藏标题下的空白行，换取更多编辑空间<br><span class="hljs-built_in">set</span> smooth          # 平滑卷屏<br><span class="hljs-built_in">set</span> suspend         # 允许 ctrl-z 将 nano 置于后台<br><span class="hljs-built_in">set</span> smarthome       # 第一次 Home 跳到行首非空字符，第二次到行首<br><span class="hljs-built_in">set</span> tabstospaces    # 展开制表符为空格（如果需要的话）<br><span class="hljs-built_in">set</span> mouse           # 允许鼠标<br><span class="hljs-built_in">set</span> linenumbers     # 显示行号（可以在编辑时 ALT-# 切换）<br><span class="hljs-built_in">set</span> backupdir path  # 设置备份路径<br><span class="hljs-built_in">set</span> backup          # 允许保存备份<br><span class="hljs-built_in">set</span> casesensitive   # 搜索使用大小写敏感<br><span class="hljs-built_in">set</span> multibuffer     # 使用 CTRL-r 读取文件时，默认读取到新缓存<br><span class="hljs-built_in">set</span> nonewlines      # 不在文件末尾添加新行<br>include &lt;filename&gt;  # 加载额外配置，通常是 /usr/share/nano 下的各种语法文件<br></code></pre></td></tr></table></figure><p>上面配置因人而异，可以选择性添加，不过一般向类似：制表符宽度，隐藏帮助，显示行号，语法高亮，以及平滑卷屏等基本上是必开的选项：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image-3.webp" alt="img"></p><p>经过调教，nano看起来比较顺眼了，你如果嫌弃行号碍眼，可以从 nanorc 里去除，或者需要的时候用 ALT+# 切换。</p><p><strong>Q：如何复制粘贴？</strong></p><p>原来下面的帮助并没有复制粘贴的信息，一般用 ALT+a 开始选择，ALT+^ 复制选择的部分，CTRL+u 粘贴先前复制的东西。版本 2.7.4 以后可以 SHIFT+方向 直接选择，然后 ALT+^ 复制。</p><p><strong>Q：如果 Redo&#x2F;Undo ?</strong></p><p>ALT+u 可以撤销，ALT+e 可以重复。</p><p><strong>Q：可以进行多文档编辑吗？</strong></p><p>见很多人用 Nano 都是命令行：nano &lt;文件名&gt; 编辑完以后 CTRL+O，CTRL+X 保存退出，然后再打开另外一个文件，编辑完又退出。其实 nano 下面可以很高效的同时打开多个文档进行编辑，然后用下面一组快捷键切换文件：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ALT<span class="hljs-punctuation">+</span>&lt;    <span class="hljs-meta"># 切换到上一个文件</span><br>ALT<span class="hljs-punctuation">+</span>&gt;    <span class="hljs-meta"># 切换到下一个文件</span><br></code></pre></td></tr></table></figure><p>其实不用 ALT+SHIFT+, 来输入 ALT+&lt;，有个简易快捷 ALT+, 直接等同于 ALT+&lt;：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image-1.webp" alt="img"></p><p>切换了文件后，最下面会显示现在切换到了哪个文件。</p><p>某个文件编辑完了可以 CTRL+X 关闭，如果所有文件都关闭了，就会退出 nano。打开新文件可以用 CTRL+r ALT+f ，然后输入文件名即可打开，输入文件名时可以用 TAB 进行补全。</p><p>很多人不知道，其实 Nano 中还自带一个“文件浏览器”，按 CTRL+R CTRL+T 后，打开浏览器选择文件界面，可以让你方便的在文本界面中选择希望打开的文件：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image.webp" alt="img"></p><p>该界面下用方向键控制光标，回车键打开文件或者进入目录，CTRL+C 退出文件选择界面。</p><p><strong>Q：哪里寻找更多关于 Nano 的使用帮助？</strong></p><p>其他 Nano 更多关于：复制，粘贴，搜索，替换的内容，见我制作的《<a href="https://github.com/skywind3000/awesome-cheatsheets/blob/master/editors/nano.txt">Nano指令速查表</a>》，除此之外，还有一些有用的网络资源：</p><ul><li>最新下载：<a href="https://www.nano-editor.org/">https://www.nano-editor.org/</a></li><li>官方手册：<a href="https://www.nano-editor.org/dist/v2.9/nano.html">https://www.nano-editor.org/dist/v2.9/nano.html</a></li><li>中文帮助：<a href="http://blog.sina.com.cn/s/blog_5d9f545101010b1y.html">http://blog.sina.com.cn/s/blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程_Scoop:超好用的Windows包管理器</title>
    <link href="/Scoop-Windows/23e0cb97/"/>
    <url>/Scoop-Windows/23e0cb97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/lukesampson/scoop">Scoop</a> 是一个 Win­dows 包管理工具，类似于 De­bian 的 <code>apt</code>、ma­cOS 的 <code>homebrew</code>。它由开源社区驱动，体验可能是是目前所有 Win­dows 包管理工具中最好的。对开发者来说，包管理器能非常方便的部署开发环境，比如 Python 、Node.js 。而对于像博主这样的普通的计算机使用者来说，可以方便的安装一些常用软件，尤其是开源软件，免去了手动去官网下载的繁琐步骤，而且后续对软件进行升级只需要输入一行命令，非常便捷。</p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Windows 7 SP1 + &#x2F; Windows Server 2008+</li><li><a href="https://p3terx.com/go/aHR0cHM6Ly9ha2EubXMvd21mNWRvd25sb2Fk">PowerShell 5</a>（或更高版本，包括 <a href="https://p3terx.com/go/aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcG93ZXJzaGVsbC9zY3JpcHRpbmcvaW5zdGFsbC9pbnN0YWxsaW5nLXBvd2Vyc2hlbGwtY29yZS1vbi13aW5kb3dzP3ZpZXc9cG93ZXJzaGVsbC02">PowerShell Core</a>）和 <a href="https://p3terx.com/go/aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9uZXQvZG93bmxvYWQ">.NET Framework 4.5</a>（或更高版本）Win10(11)默认满足此条件</li><li>Windows 用户名为英文（Windows 用户环境变量中路径值不支持中文字符）</li><li><strong>正常、快速</strong>的访问 GitHub 并下载资源</li></ul><h2 id="安装-Scoop"><a href="#安装-Scoop" class="headerlink" title="安装 Scoop"></a>安装 Scoop</h2><p>Scoop 默认使用普通用户权限，其本体和安装的软件默认会放在 <code>%USERPROFILE%\scoop</code>(即 <code>C:\Users\用户名\scoop</code>)，使用管理员权限进行全局安装 (<code>-g</code>) 的软件在 <code>C:\ProgramData\scoop</code>。如果有自定安装路径的需求，那么要提前设置好环境变量，否则后续再改不是一件容易的事情。</p><ul><li>打开 PowerShell</li><li>设置用户安装路径</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP=<span class="hljs-string">&#x27;C:\Scoop&#x27;</span></span><br>[<span class="hljs-title class_">Environment</span>]<span class="hljs-symbol">:</span><span class="hljs-symbol">:SetEnvironmentVariable</span>(<span class="hljs-string">&#x27;SCOOP&#x27;</span>, <span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP</span>, <span class="hljs-string">&#x27;User&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>设置全局安装路径（需要管理员权限）</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP_GLOBAL=<span class="hljs-string">&#x27;C:\Scoop_Global&#x27;</span></span><br>[<span class="hljs-title class_">Environment</span>]<span class="hljs-symbol">:</span><span class="hljs-symbol">:SetEnvironmentVariable</span>(<span class="hljs-string">&#x27;SCOOP_GLOBAL&#x27;</span>, <span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP_GLOBAL</span>, <span class="hljs-string">&#x27;Machine&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>设置允许 PowerShell 执行本地脚本</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Set</span><span class="hljs-operator">-</span>ExecutionPolicy <span class="hljs-operator">-</span>ExecutionPolicy RemoteSigned <span class="hljs-operator">-</span><span class="hljs-keyword">Scope</span> CurrentUser<br></code></pre></td></tr></table></figure><ul><li>安装 Scoop</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iwr</span> <span class="hljs-literal">-useb</span> get.scoop.sh | <span class="hljs-built_in">iex</span>  <br><span class="hljs-built_in">iex</span> (<span class="hljs-built_in">new-object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>其实,上面两种都不可行</strong><br>先配置Host文件，加上<br>199.232.68.133 raw.githubusercontent.com<br>然后执行另一条可用的网址的命令:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">iex (<span class="hljs-keyword">new</span>-<span class="hljs-built_in">object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1&#x27;</span>)  <br></code></pre></td></tr></table></figure><ul><li>没安装过 Git 则需要安装。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>最基础的使用方法和其它包管理器类似，这里就不做赘述了，直接上命令列表：</p><ul><li><code>scoop search &lt;app&gt;</code> - 搜索软件</li><li><code>scoop install &lt;app&gt;</code> - 安装软件</li><li><code>scoop info &lt;app&gt;</code> - 查看软件详细信息</li><li><code>scoop list</code> - 查看已安装软件</li><li><code>scoop uninstall &lt;app&gt;</code> - 卸载软件，<code>-p</code>删除配置文件。</li><li><code>scoop update</code> - 更新 scoop 本体和软件列表</li><li><code>scoop update &lt;app&gt;</code> - 更新指定软件</li><li><code>scoop update *</code> - 更新所有已安装的软件</li><li><code>scoop checkup</code> - 检查 scoop 的问题并给出解决问题的建议</li><li><code>scoop help</code> - 查看命令列表</li><li><code>scoop help &lt;command&gt;</code> - 查看命令帮助说明</li></ul><h3 id="迁移到新电脑"><a href="#迁移到新电脑" class="headerlink" title="迁移到新电脑"></a>迁移到新电脑</h3><p>将文件夹拷贝到新电脑,将文件夹添加到环境变量然后<code>scoop reset *</code></p><h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><p>因为某些原因，Scoop在国内经常访问不了，可以选择更换源比如<a href="https://gitee.com/squallliu/scoop">这个</a>,但本人并未使用此方法，更建议配置代理。</p><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="添加-bucket"><a href="#添加-bucket" class="headerlink" title="添加 bucket"></a>添加 bucket</h3><p>所有的包管理器都会有相应的软件仓库 ，而 bucket 就是 Scoop 中的软件仓库。细心的你可能会发现 <code>scoop</code> 翻译为中文是 “舀”，而 <code>bucket</code> 是 “水桶”，所以安装软件可以理解为从水桶里舀水，似乎很形象的说。<br>Scoop 默认软件仓库（main bucket）软件数量是有限的，但是可以进行额外的添加。通过 <code>scoop bucket known</code> 命令可以查看官方认可的 bucket：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span>known<br>main<br><span class="hljs-keyword">extras</span><br><span class="hljs-keyword"></span>versions<br>nightlies<br>nirsoft<br>php<br>nerd-fonts<br>nonportable<br><span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>games<br><span class="hljs-keyword">jetbrains</span><br></code></pre></td></tr></table></figure><p>以上官方认可的 bucket 可以通过下面这个命令直接添加：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span>&lt;<span class="hljs-keyword">bucketname&gt;</span><br></code></pre></td></tr></table></figure><p>好像有人添加bucket出现问题？如有，请在评论区提出。</p><p><a href="https://github.com/lukesampson/scoop-extras">extras</a> 涵盖了大部分因为种种原因不能被收录进主仓库的常用软件，这个是强推荐添加的。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span><span class="hljs-keyword">extras</span><br></code></pre></td></tr></table></figure><p>常用的写盘工具 Ru­fus 就在 <code>extras</code> 这个仓库中。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>rufus<br></code></pre></td></tr></table></figure><p><a href="https://github.com/matthewjberger/scoop-nerd-fonts">nerd-fonts</a> 包含了美化终端时会用到的 Pow­er­line 字体</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span>nerd-fonts<br></code></pre></td></tr></table></figure><p>当添加 <code>nerd-fonts</code> 仓库后可以通过以下命令搜索到所有的字体：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">scoop <span class="hljs-keyword">search</span> &quot;-NF&quot;<br></code></pre></td></tr></table></figure><p>安装字体需要使用管理员权限：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo <span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>FiraCode-NF<br></code></pre></td></tr></table></figure><h4 id="第三方-bucket"><a href="#第三方-bucket" class="headerlink" title="第三方 bucket"></a>第三方 bucket</h4><p>添加第三方 bucket</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">scoop bucket <span class="hljs-keyword">add</span> &lt;bucketname&gt; https:<span class="hljs-comment">//github.com/xxx/xxx</span><br></code></pre></td></tr></table></figure><p>从第三方 bucket 中安装软件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>&lt;<span class="hljs-keyword">bucketname&gt;/&lt;app&gt;</span><br></code></pre></td></tr></table></figure><p>这里给出一个第三方软件源<a href="https://github.com/rasa/scoop-directory">Scoop Directory</a>,它记录了 Github 上各种 bucket。</p><h3 id="清理安装包缓存"><a href="#清理安装包缓存" class="headerlink" title="清理安装包缓存"></a>清理安装包缓存</h3><p>Scoop 会保留下载的安装包，对于卸载后又想再安装的情况，不需要重复下载。但长期累积会占用大量的磁盘空间，如果用不到就成了垃圾。这时可以使用 <code>scoop cache</code> 命令来清理。</p><ul><li><code>scoop cache show</code> - 显示安装包缓存</li><li><code>scoop cache rm &lt;app&gt;</code> - 删除指定应用的安装包缓存</li><li><code>scoop cache rm *</code> - 删除所有的安装包缓存</li></ul><p>如果你不希望安装和更新软件时保留安装包缓存，可以加上 <code>-k</code> 或 <code>--no-cache</code> 选项来禁用缓存：</p><ul><li><code>scoop install -k &lt;app&gt;</code></li><li><code>scoop update -k *</code></li></ul><h3 id="删除旧版本软件"><a href="#删除旧版本软件" class="headerlink" title="删除旧版本软件"></a>删除旧版本软件</h3><p>当软件被更新后 Scoop 还会保留软件的旧版本，更新软件后可以通过 <code>scoop cleanup</code> 命令进行删除。</p><ul><li><code>scoop cleanup &lt;app&gt;</code> - 删除指定软件的旧版本</li><li><code>scoop cleanup *</code> - 删除所有软件的旧版本</li></ul><p>与安装软件一样，删除旧版本软件的同时也可以清理安装包缓存，同样是加上 <code>-k</code> 选项。</p><ul><li><code>scoop cleanup -k &lt;app&gt;</code> - 删除指定软件的旧版本并清除安装包缓存</li><li><code>scoop cleanup -k *</code> - 删除所有软件的旧版本并清除安装包缓存</li></ul><h3 id="在同一程序的不同版本之间切换"><a href="#在同一程序的不同版本之间切换" class="headerlink" title="在同一程序的不同版本之间切换"></a>在同一程序的不同版本之间切换</h3><p>使用命令：<code>scoop reset [app]@[version]</code><br>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop reset idea-ultimate-eap@201.6668.13<br><br>scoop reset idea-ultimate-eap@201.6073.9<br><br><span class="hljs-comment"># 切换到最新版本</span><br>scoop reset idea-ultimate-eap<br></code></pre></td></tr></table></figure><p>对应版本的程序需要已经安装于本地系统中；所以在你清除某个软件的旧版本时考虑一下自己是否还会再次使用到此旧版本。<br>另外 idea-ultimate-eap 切换过程可能需要更长时间。</p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>全局安装就是给系统中的所有用户都安装，且环境变量是系统变量，对于需要设置系统变量的一些软件就需要全局安装，比如 Node.js、Python ，否则某些情况会出现无法找到命令的问题。</p><p>使用 <code>scoop install &lt;app&gt;</code> 命令加上 <code>-g</code> 或 <code>--global</code> 选项可对软件进行全局安装，全局安装需要管理员权限，所以需要提前以管理员权限运行的 Pow­er­Shell 。更简单的方式是先安装 <code>sudo</code>，然后用 <code>sudo</code> 命令来提权执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>sudo<br>sudo <span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>-g &lt;app&gt;<br></code></pre></td></tr></table></figure><blockquote><p>达成在 Win­dows 上使用<code>sudo</code>的成就</p></blockquote><p>使用 <code>scoop list</code> 命令查看已装软件时，全局安装的软件末尾会有 <code>*global*</code> 标志。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">➜ <span class="hljs-keyword">scoop </span>list<br><span class="hljs-keyword">Installed </span>apps:<br><br>  <span class="hljs-number">7</span>zip <span class="hljs-number">19</span>.<span class="hljs-number">00</span><br>  adb <span class="hljs-number">30</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>  aria2 <span class="hljs-number">1</span>.<span class="hljs-number">35</span>.<span class="hljs-number">0</span><span class="hljs-number">-1</span><br>  <span class="hljs-keyword">busybox </span><span class="hljs-number">3466</span>-g53c09d0e1<br>  CascadiaCode-NF <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> [nerd-fonts]<br>  colortool <span class="hljs-number">1904</span>.<span class="hljs-number">29002</span><br>  dark <span class="hljs-number">3</span>.<span class="hljs-number">11</span>.<span class="hljs-number">2</span> *global*<br>  ffmpeg <span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br>  figlet <span class="hljs-number">1</span>.<span class="hljs-number">0</span>-go<br>  FiraCode-NF <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> [nerd-fonts]<br>  git <span class="hljs-number">2</span>.<span class="hljs-number">26</span>.<span class="hljs-number">2</span>.windows.<span class="hljs-number">1</span> *global*<br>  innounp <span class="hljs-number">0</span>.<span class="hljs-number">49</span><br>  iperf3 <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span><br>  lessmsi <span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">91</span> *global*<br>  lxrunoffline <span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span> [<span class="hljs-keyword">extras]</span><br><span class="hljs-keyword"></span>  nano <span class="hljs-number">4</span>.<span class="hljs-number">9</span><span class="hljs-number">-4</span><br>  neofetch <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>  nodejs-lts <span class="hljs-number">12</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span> *global*<br>  python <span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span> *global*<br>  rclone <span class="hljs-number">1</span>.<span class="hljs-number">52</span>.<span class="hljs-number">0</span><br>  rufus <span class="hljs-number">3</span>.<span class="hljs-number">10</span> [<span class="hljs-keyword">extras]</span><br><span class="hljs-keyword"></span>  <span class="hljs-keyword">screentogif </span><span class="hljs-number">2</span>.<span class="hljs-number">24</span>.<span class="hljs-number">2</span> [<span class="hljs-keyword">extras]</span><br><span class="hljs-keyword"></span>  sudo <span class="hljs-number">0</span>.<span class="hljs-number">2020</span>.<span class="hljs-number">01</span>.<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p>此外对于全局软件的更新和卸载等其它操作，都需要加上 <code>-g</code> 选项：</p><ul><li><code>sudo scoop update -g *</code> - 更新所有软件（且包含全局软件）</li><li><code>sudo scoop uninstall -g &lt;app&gt;</code> - 卸载全局软件</li><li><code>sudo scoop uninstall -gp &lt;app&gt;</code> - 卸载全局软件（并删除配置文件）</li><li><code>sudo scoop cleanup -g *</code> - 删除所有全局软件的旧版本</li><li><code>sudo scoop cleanup -gk *</code> - 删除所有全局软件的旧版本（并清除安装包包缓存）</li></ul><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><blockquote><p>⚠️️ 注意：请在 Powershell 中运行下面的命令</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 可用操作</span><br>scoop alias add|list|<span class="hljs-built_in">rm</span> [&lt;<span class="hljs-type">args</span>&gt;]<br><br><span class="hljs-comment">## 添加别名，格式：</span><br>scoop alias add &lt;name&gt; &lt;command&gt; &lt;description&gt;<br><br><span class="hljs-comment"># 示例：（注意：必须在 Powershell中运行）</span><br>scoop alias add st <span class="hljs-string">&#x27;scoop status&#x27;</span> <span class="hljs-string">&#x27;检查更新&#x27;</span><br><span class="hljs-comment"># 检查已添加的别名</span><br>scoop alias list <span class="hljs-literal">-v</span><br><br>Name Command      Summary<br><span class="hljs-literal">----</span> <span class="hljs-literal">-------</span>      <span class="hljs-literal">-------</span><br>st   scoop status 检查更新<br><br><span class="hljs-comment"># 测试已添加的别名 st</span><br>scoop st<br><br><br><span class="hljs-comment"># 另一个示例：</span><br>scoop alias add <span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;scoop uninstall $args[0]&#x27;</span> <span class="hljs-string">&#x27;卸载某 app&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><blockquote><p>因为种种原因，有时Scoop会连不上Github，请检查您的代理服务器(比如重启代理软件)。</p></blockquote><p>Scoop 默认使用的是系统代理，如果你想手动指定代理，可以输入下面的命令。需要注意的是只支持 http 协议。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-built_in">config</span> proxy localhost:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><p><strong>警告：有些代理软件器http协议使用端口与https协议使用端口并不相同，比如Vray，配置的时候需要使用正确的端口，有的是用使用系统默认代理设置也是可以的，具体情况具体看待吧。</strong><br><a href="https://fastly.jsdelivr.net/gh/Edge-coordinates/PicBed/imgs_for_blogs/20220712084509.png"><img src="https://fastly.jsdelivr.net/gh/Edge-coordinates/PicBed/imgs_for_blogs/20220712084509.png" alt="img"></a></p><blockquote><p>设置完可以通过<code>scoop config proxy</code>查看。</p></blockquote><p>如果你想取消代理，那么输入下面的命令，这将会恢复使用系统代理。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-built_in">config</span> rm proxy<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>手动配置http代理后aria2多线程下载有概率不可使用，求修复方案。。。谢谢！</li></ul><h3 id="开启多线程下载"><a href="#开启多线程下载" class="headerlink" title="开启多线程下载"></a>开启多线程下载</h3><p>使用 Scoop 安装 Aria2 后，Scoop 会自动调用 Aria2 进行多线程加速下载。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>aria2<br></code></pre></td></tr></table></figure><p>使用 <code>scoop config</code> 命令可以对 Aria2 进行设置，比如 <code>scoop config aria2-enabled false</code> 可以禁止调用 Aria2 下载。以下是与 Aria2 有关的设置选项：</p><ul><li><code>aria2-enabled</code>: 开启 Aria2 下载，默认<code>true</code></li><li><code>aria2-retry-wait</code>: 重试等待秒数，默认<code>2</code></li><li><code>aria2-split</code>: 单任务最大连接数，默认<code>5</code></li><li><code>aria2-max-connection-per-server</code>: 单服务器最大连接数，默认<code>5</code> ，最大<code>16</code></li><li><code>aria2-min-split-size</code>: 最小文件分片大小，默认<code>5M</code></li></ul><p>更详细的见<a href="https://aria2.github.io/manual/en/html/aria2c.html#cmdoption-retry-wait">这里</a>，博主在这里推荐以下优化设置，单任务最大连接数设置为 <code>32</code>，单服务器最大连接数设置为 <code>16</code>，最小文件分片大小设置为 <code>1M</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop config aria2-split 32<br>scoop config aria2-max-connection-per-server 16<br>scoop config aria2-min-split-size 1M<br></code></pre></td></tr></table></figure><h3 id="利用-aria2-进行断点续传"><a href="#利用-aria2-进行断点续传" class="headerlink" title="利用 aria2 进行断点续传"></a>利用 aria2 进行断点续传</h3><p>先看具体示例：</p><p>scoop 更新 vscode 时下载到 80% 的时候 失败了（安装时处理方法也一样）。我们需要在提示中找到如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;D:\Scoop\Applications\apps\aria2\current\aria2c.exe&#x27;</span> --input-file=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\vscode-portable.txt&#x27;</span> <br>--user-agent=<span class="hljs-string">&#x27;Scoop/1.0 (+http://scoop.sh/) PowerShell/5.1 (Windows NT 10.0; Win64; x64; Desktop)&#x27;</span> <br>--allow-overwrite=<span class="hljs-literal">true</span> --auto-file-renaming=<span class="hljs-literal">false</span> --retry-wait=2 <br>--<span class="hljs-built_in">split</span>=5 --max-connection-per-server=5 --min-split-size=5M <br>--console-log-level=warn --enable-color=<span class="hljs-literal">false</span> --no-conf=<span class="hljs-literal">true</span> <br>--follow-metalink=<span class="hljs-literal">true</span> --metalink-preferred-protocol=https <br>--min-tls-version=TLSv1.2 --stop-with-process=15584 --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><p>我们从上面的信息中提取出下面的命令；若要进行断点续传，只需再次执行下面的命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aria2c.exe --input-file=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\vscode-portable.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>当提示下载完成后，我们需要再次运行 scoop 对应的 app 更新命令（或安装命令），即可完成 app 更新（或安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop update vscode-portable<br></code></pre></td></tr></table></figure><h2 id="一些使用实例"><a href="#一些使用实例" class="headerlink" title="一些使用实例"></a>一些使用实例</h2><h3 id="安装和切换JDK、Python的版本"><a href="#安装和切换JDK、Python的版本" class="headerlink" title="安装和切换JDK、Python的版本"></a>安装和切换JDK、Python的版本</h3><blockquote><p>转载自<a href="https://www.thisfaner.com/p/scoop/#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%87%E6%8D%A2jdkpython%E7%9A%84%E7%89%88%E6%9C%AC">Scoop包管理器的相关技巧和知识</a>，相关内容仅作介绍，一般来说版本管理还是交给专门软件比较好，python可以使用虚拟环境或Anaconda.</p></blockquote><p>这里需要使用<code>scoop reset</code>它的作用是：重置一个应用程序来解决冲突。<br>命令格式为：<code>scoop reset &lt;java&gt;[@&lt;version&gt;]</code></p><p>安装和切换不同的 JDK 版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:&gt; scoop bucket add java<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install oraclejdk<br>Installing <span class="hljs-string">&#x27;oraclejdk&#x27;</span> (<span class="hljs-number">12.0</span>.<span class="hljs-number">2</span><span class="hljs-literal">-10</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install zulu6<br>Installing <span class="hljs-string">&#x27;zulu6&#x27;</span> (<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install openjdk10<br>Installing <span class="hljs-string">&#x27;openjdk10&#x27;</span> (<span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>openjdk version <span class="hljs-string">&quot;10.0.1&quot;</span> <span class="hljs-number">2018</span><span class="hljs-literal">-04-17</span><br>OpenJDK Runtime Environment (build <span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">10</span>)<br>OpenJDK <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">10</span>, mixed mode)<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop reset zulu6<br>Resetting zulu6 (<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span>).<br>Linking ~\scoop\apps\zulu6\current =&gt; ~\scoop\apps\zulu6\<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>openjdk version <span class="hljs-string">&quot;1.6.0-99&quot;</span><br>OpenJDK Runtime Environment (Zulu <span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><span class="hljs-literal">-win64</span>) (build <span class="hljs-number">1.6</span>.<span class="hljs-number">0</span><span class="hljs-literal">-99-b99</span>)<br>OpenJDK <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (Zulu <span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><span class="hljs-literal">-win64</span>) (build <span class="hljs-number">23.77</span><span class="hljs-literal">-b99</span>, mixed mode)<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop reset oraclejdk<br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>java version <span class="hljs-string">&quot;12.0.2&quot;</span> <span class="hljs-number">2019</span><span class="hljs-literal">-07-16</span><br>Java(TM) SE Runtime Environment (build <span class="hljs-number">12.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">10</span>)<br>Java HotSpot(TM) <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">12.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">10</span>, mixed mode, sharing)<br></code></pre></td></tr></table></figure><p>安装和切换不同的 Python 版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add versions <span class="hljs-comment"># add the &#x27;versions&#x27; bucket if you haven&#x27;t already</span><br><br>scoop install python27 python<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 3.6.2</span><br><br><span class="hljs-comment"># switch to python 2.7.x</span><br>scoop reset python27<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 2.7.13</span><br><br><span class="hljs-comment"># switch back (to 3.x)</span><br>scoop reset python<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 3.6.2</span><br></code></pre></td></tr></table></figure><h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><p>emm想要记住上文那么多的知识有些困难，这里总结一下 Scoop 在日常使用中常用的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 更新 scoop 及软件包列表</span><br>scoop update<br><br><span class="hljs-comment">## 安装软件 ##</span><br><span class="hljs-comment"># 非全局安装（并禁止安装包缓存）</span><br>scoop install <span class="hljs-literal">-k</span> &lt;app&gt;<br><span class="hljs-comment"># 全局安装（并禁止安装包缓存）</span><br>sudo scoop install <span class="hljs-literal">-gk</span> &lt;app&gt;<br><br><span class="hljs-comment">## 卸载软件 ##</span><br><span class="hljs-comment"># 卸载非全局软件（并删除配置文件）</span><br>scoop uninstall <span class="hljs-literal">-p</span> &lt;app&gt;<br><span class="hljs-comment"># 卸载全局软件（并删除配置文件）</span><br>sudo scoop uninstall <span class="hljs-literal">-gp</span> &lt;app&gt;<br><br><span class="hljs-comment">## 更新软件 ##</span><br><span class="hljs-comment"># 更新所有非全局软件（并禁止安装包缓存）</span><br>scoop update <span class="hljs-literal">-k</span> *<br><span class="hljs-comment"># 更新所有软件（并禁止安装包缓存）</span><br>sudo scoop update <span class="hljs-literal">-gk</span> *<br><br><span class="hljs-comment">## 垃圾清理 ##</span><br><span class="hljs-comment"># 删除所有旧版本非全局软件（并删除软件包缓存）</span><br>scoop cleanup <span class="hljs-literal">-k</span> *<br><span class="hljs-comment"># 删除所有旧版本软件（并删除软件包缓存）</span><br>sudo scoop cleanup <span class="hljs-literal">-gk</span> *<br><span class="hljs-comment"># 清除软件包缓存</span><br>scoop cache <span class="hljs-built_in">rm</span> *<br></code></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>文章仍有许多不足之处，希望大家可以指出，如有疑问，请大家在评论区中提出，也请看到的人积极回答，我将尽力解答并收集问题以完善文章。</p><h2 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h2><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><h4 id="fatal-unable-to-access-‘https-github-com-lukesampson-scoop-extras-‘-OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#fatal-unable-to-access-‘https-github-com-lukesampson-scoop-extras-‘-OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="fatal: unable to access ‘https://github.com/lukesampson/scoop-extras/‘: OpenSSL SSL_read: Connection was reset, errno 10054"></a>fatal: unable to access ‘<a href="https://github.com/lukesampson/scoop-extras/">https://github.com/lukesampson/scoop-extras/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">fatal: unable to access <span class="hljs-string">&#x27;https://github.com/lukesampson/scoop/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno <span class="hljs-number">10054</span><br>Update failed.<br>fatal: unable to access <span class="hljs-string">&#x27;https://github.com/lukesampson/scoop-extras/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno <span class="hljs-number">10054</span><br></code></pre></td></tr></table></figure><p>遇到这种情况请<strong>检查代理</strong>，参考<a href="https://www.cnblogs.com/Edge-coordinates/p/15130184.html#%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">代理设置</a></p><h4 id="手动配置http代理后aria2多线程下载不可使用"><a href="#手动配置http代理后aria2多线程下载不可使用" class="headerlink" title="手动配置http代理后aria2多线程下载不可使用"></a>手动配置http代理后aria2多线程下载不可使用</h4><p>如题，求解决方案，如果有大佬知道可以分享在评论区，谢谢~</p><h3 id="安装软件失败"><a href="#安装软件失败" class="headerlink" title="安装软件失败"></a>安装软件失败</h3><h4 id="网络问题导致app安装失败"><a href="#网络问题导致app安装失败" class="headerlink" title="网络问题导致app安装失败"></a>网络问题导致app安装失败</h4><p>step1:<strong>检查代理</strong>,下载7zip,aria2失败需要开代理，可以直接将代理软件设为全局，也可以自己配置。<br>step2:<strong>手动下载安装文件</strong><br>一个实例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">ERROR</span> <span class="hljs-title class_">Download</span> failed! (<span class="hljs-title class_">Error</span> <span class="hljs-number">1</span>) <span class="hljs-title class_">An</span> unknown error occurred<br><span class="hljs-variable constant_">ERROR</span> <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mediaarea.net/download</span><span class="hljs-regexp">/binary/mediainfo</span><span class="hljs-regexp">/19.09/</span><span class="hljs-title class_">MediaInfo</span>_CLI_19.09_Windows_x64.zip<br>    referer=<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mediaarea.net/download</span><span class="hljs-regexp">/binary/mediainfo</span><span class="hljs-regexp">/19.09/</span><br>    dir=<span class="hljs-symbol">D:</span>\<span class="hljs-title class_">Scoop</span>\<span class="hljs-title class_">Applications</span>\cache<br>    out=mediainfo<span class="hljs-comment">#19.09#https_mediaarea.net_download_binary_mediainfo_19.09_MediaInfo_CLI_19.09_Windows_x64.zip</span><br><br><span class="hljs-variable constant_">ERROR</span> &amp; <span class="hljs-string">&#x27;D:\Scoop\Applications\apps\aria2\current\aria2c.exe&#x27;</span> --input-file=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\mediainfo.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以发现文件的下载路径和下载后的文件名称，这里 <code>out=</code> 后面的压缩包就是下载后 文件的名称，(也可以在 scoop 的 <code>cache</code> 目录下的 <code>mediainfo.txt</code> 文件中找到下载路径与文 件名称)</p><p>然后我们可以尝试在浏览器或其他下载程序中（可以 fq 的程序中）下载该程序，下载完成 后再更改文件名并将其放入 scoop 的 <code>cache</code> 目录，最后再次运行 <code>scoop install mediainfo</code> 即可安装。</p><h4 id="其它问题导致安装失败"><a href="#其它问题导致安装失败" class="headerlink" title="其它问题导致安装失败"></a>其它问题导致安装失败</h4><p><img src="/./../images/%E6%95%99%E7%A8%8B-Scoop-%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/1719502269-scoop%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%A4%B1%E8%B4%A5.png" alt="img"></p><p>下载其他软件失败看看你有没有装某些软件，如sudo(用于全局安装的，导致某些语法无法使用，详见前文说的全局安装),反正我吧sudo删掉就好了~</p><h4 id="Scoop安装软件失败的原因分类"><a href="#Scoop安装软件失败的原因分类" class="headerlink" title="Scoop安装软件失败的原因分类"></a>Scoop安装软件失败的原因分类</h4><ol><li>未及时更新仓库</li><li>连不上Github，因为众所周知的原因，解决方案的话可以参考代理设置中的重启&#x2F;更换代理（参考：<a href="https://www.cnblogs.com/Edge-coordinates/p/15130184.html#%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">代理设置</a>），还不可以的话可以尝试在浏览器中打开Github，然后再尝试。</li></ol><hr><blockquote><p>参考资料<br><a href="https://github.com/lukesampson/scoop/wiki">Scoop Documentation</a><br><a href="https://chawyehsu.com/blog/talk-about-scoop-the-package-manager-for-windows-again">再谈谈 Scoop 这个 Windows 下的软件包管理器</a><br><a href="https://sspai.com/post/52496">「一行代码」搞定软件安装卸载，用 Scoop 管理你的 Windows 软件</a><br><a href="https://p3terx.com/archives/scoop-the-best-windows-package-manager.html">Scoop - 最好用的 Windows 包管理器</a><br><a href="https://www.cnblogs.com/lioa/p/13565622.html">scoop的安装及基本使用</a><br><a href="https://zhuanlan.zhihu.com/p/135278662">你需要掌握的Scoop技巧和知识</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Scoop,Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win</tag>
      
      <tag>Scoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4 种实用方法：如何设置 Windows10/11 自动登录</title>
    <link href="/Windows/21f09687/"/>
    <url>/Windows/21f09687/</url>
    
    <content type="html"><![CDATA[<p>当启动 Windows PC 时，登录界面会列出一个或多个用户账户。你需要选择一个账户并通过身份验证才能进入桌面。Windows 支持多种登录验证方式，如密码和 <a href="https://www.sysgeek.cn/introduction-windows-hello-business/">Windows Hello</a>，这对于多用户设备来说会十分便利。</p><p>虽然现代计算机加载 Windows 的速度已经非常快，但跳过登录验证可以更快地开始工作。如果你是电脑的唯一使用者，还可以选择取消登录验证。接下来，我们就介绍如何在 Windows 11&#x2F;10 设备上设置自动登录。</p><h2 id="什么是-Windows-自动登录"><a href="#什么是-Windows-自动登录" class="headerlink" title="什么是 Windows 自动登录"></a>什么是 Windows 自动登录</h2><p>自动登录是 Windows 的一项便捷功能，允许不输入密码或 PIN 码即可登录电脑。它不仅能缩短开机时间，还能在从睡眠状态唤醒时省去重复验证的步骤，从而提升效率。</p><h3 id="使用场景与潜在风险"><a href="#使用场景与潜在风险" class="headerlink" title="使用场景与潜在风险"></a>使用场景与潜在风险</h3><p>通常情况下，我们不推荐在 Windows 设备上启用自动登录。因为任何能够物理接触到设备的人都能轻松访问你的敏感信息，并获得完整的管理权限。</p><p>在决定启用 Windows 自动登录之前，请考虑以下几点：</p><ul><li>不推荐在笔记本电脑、平板电脑或其他便携设备上启用，因为这些设备通常会带着到处跑。</li><li>不推荐在多人共用的电脑上启用。</li><li>可以在没有重要数据的虚拟机上启用。</li><li>可以在仅个人使用的家用电脑上启用（相对安全）。</li></ul><p>如果你的 Windows 中有多个用户账户，也可以只为某一个账户单独设置自动登录，从而保持其他主要账户的安全。</p><h2 id="在-Windows-中设置自动登录"><a href="#在-Windows-中设置自动登录" class="headerlink" title="在 Windows 中设置自动登录"></a>在 Windows 中设置自动登录</h2><p>Windows 并没有直接开启自动登录的选项，但我们可以通过以下 4 种方法来实现自动登录。</p><h3 id="方法-1：通过「用户账户」设置"><a href="#方法-1：通过「用户账户」设置" class="headerlink" title="方法 1：通过「用户账户」设置"></a>方法 1：通过「用户账户」设置</h3><p>1如果你使用 Microsoft 账户，请用<code>Windows + I</code>快捷键打开「Windows 设置」。</p><p>2选择「账户」-「登录选项」，然后关闭「为了提高安全性，仅允许对此设备上的 Microsoft 账户使用 Windows Hello 登录 」开关。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581002-windows-auto-login-p2-jpg.webp" alt="Windows 10">]</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581002-windows-auto-login-p3-jpg.webp" alt="Windows 11">]</p><p>3.使用<code>Windows + R</code>快捷键调出「运行」对话框，输入<code>netplwiz</code>打开「用户账户」设置窗口。</p><p>4取消勾选「要使用本计算机，用户必需输入用户名和密码」，然后点击「应用」按钮。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581003-windows-auto-login-p4-jpg.webp" alt="通过「用户账户」设置 Windows 自动登录">]</p><p>5此时会弹出「自动登录」对话框，在此输入密码两次，确认无误后点击「确定」即可。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581004-windows-auto-login-p5-jpg.webp" alt="输入账户密码">]</p><p>设置完成后，在登录时会自动帮你验证密码，但密码并未删除。如果你更改了账户密码，需要按以上步骤重新设置。</p><h3 id="方法-2：更改注册表设置"><a href="#方法-2：更改注册表设置" class="headerlink" title="方法 2：更改注册表设置"></a>方法 2：更改注册表设置</h3><p>我们也可以更改注册表配置来实现 Windows 10&#x2F;11 自动登录，操作步骤如下：</p><p>1使用<code>Windows + R</code>快捷键打开「运行」，输入<code>regedit</code>打开注册表编辑器。</p><p>2浏览到以下路径：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<br></code></pre></td></tr></table></figure><p>3在右侧窗口中并双击名为<code>AutoAdminLogon</code>的<strong>字符串值</strong>（如果没有就新建一个），并将其值设置为：</p><ul><li><code>0</code>禁用自动登录</li><li><code>1</code>启用自动登录</li></ul><p>4在右侧窗口中分别并双击名为<code>DefaultUserName</code>和<code>DefaultPassword</code>的<strong>字符串值</strong>（如果没有就新建），并将其值设置为：</p><ul><li><code>DefaultUserName</code>用于自动登录的账户名称</li><li><code>DefaultPassword</code>对应的账户密码</li></ul><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581005-windows-auto-login-p6-jpg.webp" alt="通过注册表设置 Windows 自动登录">]</p><p>注册表更改完成后，重启 Windows 就会生效。</p><p>手动更改注册表时，<code>DefaultPassword</code>使用的是明文。使用 Autologon 时，密码在注册表中会加密为 LSA 密文。</p><h3 id="方法-3：使用-Autologon-工具"><a href="#方法-3：使用-Autologon-工具" class="headerlink" title="方法 3：使用 Autologon 工具"></a>方法 3：使用 Autologon 工具</h3><p>如果想用更简单的方式来设置自动登录，<a href="https://www.sysgeek.cn/what-is-sysinternals-tools/">Sysinternals</a> 提供的 Autologon 工具是个不错的选择。它会自动修改注册表，帮助你启用 Windows 的自动登录功能，而无需去手动编辑。</p><p>1从 Microsoft 官方网站<a href="https://learn.microsoft.com/en-us/sysinternals/downloads/autologon">下载 Autologon 工具</a>。</p><p>2解压下载的文件，并根据你的 Windows 系统架构运行对应的 Autologon 程序。</p><p>3在打开的界面中核对用户名，然后在「Password」栏填入登录密码，并点击「Enable」按钮。一般家用电脑都是工作组环境，因此「Domain」一栏通常无需更改。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581006-windows-auto-login-p7-jpg.webp" alt="使用 Autologon 工具设置 Windows 自动登录">]</p><p>Autologon 不会校验密码是否正确，也不会检查用户账户是否有权限登录。</p><p>4设置成功后，屏幕会有「Autologon successfully configured」提示。点击「OK」完成设置。</p><p>完成以上步骤后，只需重启 Windows PC，就能实现免密码登录。要关闭此功能，可以重新打开 Autologon 并点击「Disable」禁用即可。</p><h3 id="方法-4：使用空密码账户（不推荐）"><a href="#方法-4：使用空密码账户（不推荐）" class="headerlink" title="方法 4：使用空密码账户（不推荐）"></a>方法 4：使用空密码账户（不推荐）</h3><p>我们也可以通过删除账户密码，也就是使用「空密码」来实现 Windows 自动登录。以下是操作步骤：</p><p>1使用<code>Windows + R</code>快捷键打开「运行」，输入<code>lusrmgr.msc</code>打开「本地用户和组」。</p><p>2在打开的窗口中，点击左侧的「用户」选项卡，然后在右侧面板中选择要删除密码的账户，右键点击并选择「设置密码」。</p><p>3当出现警告框时，点击「继续」按钮。</p><p>4在接下来的对话框中，不要输入任何内容，保持「新密码」和「确认密码」栏为空，直接点击「确定」完成设置。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581006-windows-auto-login-p8-jpg.webp" alt="使用空密码账户实现 Windows 自动登录">]</p><p>执行以上步骤后，Windows 将不再要求输入密码来登录账户，也可以实现自动登录。</p><p>因为账户没有了密码保护，所带来的安全风险极大。而且空密码默认无法使用远程桌面协议（RDP）和 NTLM 认证服务。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Ubuntu 上安装和使用 Flatpak</title>
    <link href="/Linux/49383a15/"/>
    <url>/Linux/49383a15/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Ubuntu 可能默认安装了 Snap，但你仍然可以使用 Flatpak 通用软件包。</p></blockquote><p>Linux 世界有三种“通用”打包格式，允许在“任何” Linux 发行版上运行：Snap、Flatpak 和 AppImage。</p><p>Ubuntu 内置了 Snap，但大多数发行版和开发人员都避免使用它，因为它的闭源性质。他们更喜欢 <a href="https://itsfoss.com/what-is-flatpak/">Fedora 的 Flatpak 打包系统</a>。</p><p>作为 Ubuntu 用户，你并不局限于 Snap。你还可以在 Ubuntu 系统上使用 Flatpak。</p><p>在本教程中，我将讨论以下内容：</p><ul><li>在 Ubuntu 上启用 Flatpak 支持</li><li>使用 Flatpak 命令来管理包</li><li>从 Flathub 获取包</li><li>将 Flatpak 软件包添加到软件中心</li></ul><p>听起来很令人兴奋？ 让我们一一看看。</p><h3 id="在-Ubuntu-上安装-Flatpak"><a href="#在-Ubuntu-上安装-Flatpak" class="headerlink" title="在 Ubuntu 上安装 Flatpak"></a>在 Ubuntu 上安装 Flatpak</h3><p>你可以使用以下命令轻松安装 Flatpak：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install flatpak<br></code></pre></td></tr></table></figure><p>对于 <strong>Ubuntu 18.04 或更早版本</strong>，请使用 PPA：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:flatpak/stablesudo apt updatesudo apt install flatpak<br></code></pre></td></tr></table></figure><h4 id="添加-Flathub-仓库"><a href="#添加-Flathub-仓库" class="headerlink" title="添加 Flathub 仓库"></a>添加 Flathub 仓库</h4><p>你已在 Ubuntu 系统中安装了 Flatpak 支持。但是，如果你尝试安装 Flatpak 软件包，你将收到 <a href="https://itsfoss.com/no-remote-ref-found-flatpak/">“No remote refs found”</a> 错误。这是因为没有添加 Flatpak 仓库，因此 Flatpak 甚至不知道应该从哪里获取应用。</p><p>Flatpak 有一个名为 “Flathub” 的集中仓库，可以从此处找到并下载许多 Flatpak 应用。</p><p>你应该添加 Flathub 仓库来访问这些应用。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">flatpak remote-add --<span class="hljs-keyword">if</span>-<span class="hljs-keyword">not</span>-exists flathub https:<span class="hljs-comment">//flathub.org/repo/flathub.flatpakrepo</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230051f1l2wqiwlcxpyivw.svg" alt="Install Flatpak in latest versions of Ubuntu and then add Flathub repo"></p><p><em>Install Flatpak in latest versions of Ubuntu and then add Flathub repo</em></p><p>安装并配置 Flatpak 后，<strong>重启你的系统</strong>。否则，已安装的 Flatpak 应用将不会在你的系统菜单上可见。</p><p>不过，你始终可以通过运行以下命令来运行 Flatpak 应用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">flatpak <span class="hljs-built_in">run</span> &lt;package-name&gt;<br></code></pre></td></tr></table></figure><h3 id="常用-Flatpak-命令"><a href="#常用-Flatpak-命令" class="headerlink" title="常用 Flatpak 命令"></a>常用 Flatpak 命令</h3><p>现在你已经安装了 Flatpak 打包支持，是时候学习包管理所需的一些最常见的 Flatpak 命令了。</p><h4 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h4><p>如果你知道应用名称，请使用 Flathub 网站或使用以下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">flatpak <span class="hljs-keyword">search</span> &lt;package-<span class="hljs-type">name</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230051kcig3cgzrmio87zr.svg" alt="Search for a package using Flatpak Search command"></p><p><em>Search for a package using Flatpak Search command</em></p><blockquote><p>🚧 除了搜索 Flatpak 包之外，在其他情况下， 指的是正确的 Flatpak 包名称，例如 <code>com.raggesilver.BlackBox</code>（上面截图中的应用 ID）。你还可以使用应用 ID 的最后一个词 <code>Blackbox</code>。</p></blockquote><h4 id="安装-Flatpak-包"><a href="#安装-Flatpak-包" class="headerlink" title="安装 Flatpak 包"></a>安装 Flatpak 包</h4><p>以下是安装 Flatpak 包的语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">flatpak install <span class="hljs-tag">&lt;<span class="hljs-name">remote-repo</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package-name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于几乎所有时候你都会从 Flathub 获取应用，因此远程仓库将是 <code>flathub</code>：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">flatpak install flathub &lt;<span class="hljs-keyword">package</span>-name&gt;<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230051fhqi8sggp4tgsing.svg" alt="Install a package after searching for its name"></p><p><em>Install a package after searching for its name</em></p><p>在极少数情况下，你可以直接从开发人员的仓库安装 Flatpak 包，而不是 Flathub。在这种情况下，你可以使用如下语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">flatpak install --<span class="hljs-keyword">from</span> https:<span class="hljs-comment">//flathub.org/repo/appstream/com.spotify.Client.flatpakref</span><br></code></pre></td></tr></table></figure><h4 id="从-flatpakref-安装包"><a href="#从-flatpakref-安装包" class="headerlink" title="从 flatpakref 安装包"></a>从 flatpakref 安装包</h4><p>这是可选的，也很少见。但有时，你会获得应用的 <code>.flatpakref</code> 文件。这<strong>不是离线安装</strong>。.flatpakref 包含有关从何处获取包的必要详细信息。</p><p>要从此类文件安装，请打开终端并运行：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">flatpak install &lt;path-<span class="hljs-keyword">to</span>-flatpakref <span class="hljs-built_in">file</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052um1hkeotfzcxx10x.svg" alt="Install a Flatpak package from Flatpakref file"></p><p><em>Install a Flatpak package from Flatpakref file</em></p><h4 id="从终端运行-Flatpak-应用"><a href="#从终端运行-Flatpak-应用" class="headerlink" title="从终端运行 Flatpak 应用"></a>从终端运行 Flatpak 应用</h4><p>再说一遍，这是你不会经常做的事情。大多数情况下，你将在系统菜单中搜索安装应用并从那里运行该应用。</p><p>但是，你也可以使用以下命令从终端运行它们：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">flatpak <span class="hljs-built_in">run</span> &lt;package-name&gt;<br></code></pre></td></tr></table></figure><h4 id="列出已安装的-Flatpak-软件包"><a href="#列出已安装的-Flatpak-软件包" class="headerlink" title="列出已安装的 Flatpak 软件包"></a>列出已安装的 Flatpak 软件包</h4><p>想要查看你的系统上安装了哪些 Flatpak 应用？ 像这样列出它们：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flatpak list</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052lfssbnuia7dxxmxj.svg" alt="List all the installed Flatpak packages on your system"></p><p><em>List all the installed Flatpak packages on your system</em></p><h4 id="卸载-Flatpak-包"><a href="#卸载-Flatpak-包" class="headerlink" title="卸载 Flatpak 包"></a>卸载 Flatpak 包</h4><p>你可以通过以下方式删除已安装的 Flatpak 包：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">flatpak uninstall &lt;<span class="hljs-keyword">package</span>-name&gt;<br></code></pre></td></tr></table></figure><p>如果你想<strong>清除不再需要的剩余包和运行时</strong>，请使用：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">flatpak uninstall <span class="hljs-comment">--unused</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052obp5gbxy33pzhph7.svg" alt="Remove a Flatpak package and later, if there is any unused runtimes or packages, remove them"></p><p><em>Remove a Flatpak package and later, if there is any unused runtimes or packages, remove them</em></p><p>它可能会帮助你 <a href="https://itsfoss.com/free-up-space-ubuntu-linux/">在 Ubuntu 上节省一些磁盘空间</a>。</p><h3 id="Flatpak-命令总结"><a href="#Flatpak-命令总结" class="headerlink" title="Flatpak 命令总结"></a>Flatpak 命令总结</h3><p>以下是你在上面学到的命令的快速摘要：</p><table><thead><tr><th>用途</th><th>命令</th></tr></thead><tbody><tr><td>搜索包</td><td><code>flatpak search</code></td></tr><tr><td>安装包</td><td><code>flatpak install</code></td></tr><tr><td>列出已安装的包</td><td><code>flatpak list</code></td></tr><tr><td>从 flatpakref 安装</td><td><code>flatpak install &lt;package-name.flatpakref&gt;</code></td></tr><tr><td>卸载软件包</td><td><code>flatpak uninstall</code></td></tr><tr><td>卸载未使用的运行时和包</td><td><code>flatpak uninstall --unused</code></td></tr></tbody></table><h3 id="使用-Flathub-探索-Flatpak-包"><a href="#使用-Flathub-探索-Flatpak-包" class="headerlink" title="使用 Flathub 探索 Flatpak 包"></a>使用 Flathub 探索 Flatpak 包</h3><p>我知道通过命令行搜索 Flatpak 包并不是最好的体验，这就是 <a href="https://flathub.org/en-GB">Flathub 网站</a> 的用武之地。</p><p>你可以在 Flathub 上浏览 Flatpak 应用，它提供了更多详细信息，例如经过验证的发布商、下载总数等。</p><p>你还将在应用页面底部获得安装应用所需的命令。</p><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052e8mfr77mfpkonmqn.png" alt="img"></p><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230053yqkbxk1zf0v8bv87.png" alt="img"></p><h3 id="额外信息：使用支持-Flatpak-软件包的软件中心"><a href="#额外信息：使用支持-Flatpak-软件包的软件中心" class="headerlink" title="额外信息：使用支持 Flatpak 软件包的软件中心"></a>额外信息：使用支持 Flatpak 软件包的软件中心</h3><p>你可以将 Flatpak 包添加到 GNOME 软件中心，并使用它以图形方式安装软件包。</p><p>有一个专用插件可以将 Flatpak 添加到 GNOME 软件中心。</p><blockquote><p>🚧 从 Ubuntu 20.04 开始，Ubuntu 默认的软件中心是 Snap Store，并且不支持 Flatpak 集成。因此，安装以下软件包将产生两个软件中心：一个 Snap 和另一个 DEB。</p></blockquote><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230053bm51mdp57m2x6wup.png" alt="When you install GNOME Software Flatpak plugin in Ubuntu, a DEB version of GNOME Software is installed. So you will have two software center application"></p><p><em>When you install GNOME Software Flatpak plugin in Ubuntu, a DEB version of GNOME Software is installed. So you will have two software center application</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install gnome-software-plugin-flatpak<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230054zfkgooqclhyfptrp.svg" alt="Installing GNOME Software Plugin in Ubuntu"></p><p><em>Installing GNOME Software Plugin in Ubuntu</em></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你在这里学到了很多东西。你学习了在 Ubuntu 中启用 Flatpak 支持并通过命令行管理 Flatpak 软件包。你还了解了与软件中心的集成。</p><p>我希望你现在对 Flatpaks 感觉更舒服一些。既然你发现了三个通用软件包之一，那么再 <a href="https://itsfoss.com/use-appimage-linux/">了解一下 Appimages</a> 怎么样？</p><p>如果你有疑问或遇到任何问题，请告诉我。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome：用uBlacklist屏蔽CSDN搜索结果</title>
    <link href="/Web/eb9d0ae5/"/>
    <url>/Web/eb9d0ae5/</url>
    
    <content type="html"><![CDATA[<p>CSDN现在广告满天飞，且很多博客需要先关注才能复制，非常令人无语。如果每次用Google搜索的时候都要加上”-csdn”选项，就非常麻烦。有没有更方便的办法呢？我们可以利用Chrome的uBlacklist插件。</p><p>首先，在Google应用商店中搜索并安装uBlacklist：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216030416_ublacklist%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97.png" alt="img"></p><p>安装后，进入”扩展程序选项”界面，将csdn的网址加入屏幕黑名单，然后点击保存：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216031007_%E9%BB%91%E5%90%8D%E5%8D%95.png" alt="img"></p><p>如果你要在其他搜索引擎中屏蔽，还可以在下面的选项中打钩：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216031218_%E5%85%B6%E5%AE%83%E5%BC%95%E6%93%8E.png" alt="img"></p><p>然后我们搜索一个很常见的报错，可以看到ublacklist已经帮我们屏蔽掉了一个结果：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216031750_pingbi.png" alt="img"></p><p>我们点击“显示”，发现该结果正是来自CSDN:</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216032012_csdn.png" alt="img"></p><p>如果我们想要彻底屏蔽掉，也就是连“uBlacklist已经屏蔽了1个网站”这个信息都不显示，可以回到“扩展程序选项界面”，将下列选项打钩：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_0c40283c.png" alt="img"></p><p>这样，任何提示信息都不会显示了：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216032948_final.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1Panel面板修改PHP构建扩展，GD扩展增加avif支持</title>
    <link href="/Web/662c4eb9/"/>
    <url>/Web/662c4eb9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过微调 1Panel面板PHP构建文件，可以为扩展编译增加更多的支持。<br>省去自己构建麻烦</p></blockquote><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>1Panel的PHP构建目录在 <code>/opt/1panel/runtime/php/</code> 目录下。</p><p>以我的 1Panel社区版：v1.10.5-lts PHP：8.2.15 举例。</p><p>进入以下目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/1panel/runtime/php/PHP82_15/php/extensions<br></code></pre></td></tr></table></figure><p>修改目录下的的 <code>install.sh</code> 文件。</p><p>搜索 <code>Install gd</code> ，找到判断GD扩展那一行。</p><p>我的在228行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;EXTENSIONS##*,gd,*&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---------- Install gd ----------&quot;</span><br>    isPhpVersionGreaterOrEqual 8 0<br><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;$?&quot;</span> = <span class="hljs-string">&quot;1&quot;</span> ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># &quot;--with-xxx-dir&quot; was removed from php 7.4,</span><br>        <span class="hljs-comment"># issue: https://github.com/docker-library/php/issues/912</span><br>        options=<span class="hljs-string">&quot;--with-freetype --with-jpeg --with-webp&quot;</span><br>    <span class="hljs-keyword">else</span><br>        options=<span class="hljs-string">&quot;--with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-webp-dir=/usr/include/&quot;</span><br>    <span class="hljs-keyword">fi</span><br><br>    apk add --no-cache \<br>        freetype \<br>        freetype-dev \<br>        libpng \<br>        libpng-dev \<br>        libjpeg-turbo \<br>        libjpeg-turbo-dev \<br>libwebp-dev \<br>    &amp;&amp; docker-php-ext-configure gd <span class="hljs-variable">$&#123;options&#125;</span> \<br>    &amp;&amp; docker-php-ext-install <span class="hljs-variable">$&#123;MC&#125;</span> gd \<br>    &amp;&amp; apk del \<br>        freetype-dev \<br>        libpng-dev \<br>        libjpeg-turbo-dev<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>修改最上面的 options。</p><p>增加 <code>--with-avif</code> ，使用AVIF支持进行编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">// old<br>options=<span class="hljs-string">&quot;--with-freetype --with-jpeg --with-webp&quot;</span><br><br>// new<br>options=<span class="hljs-string">&quot;--with-freetype --with-jpeg --with-webp --with-avif&quot;</span><br></code></pre></td></tr></table></figure><p>修改 apk add –no-cache 内部一行</p><p>在 freetype 和 libwebp-dev 中间添加 <code>libavif-dev</code>。</p><p>GD 扩展依赖于 libavif 软件包，以提供底层 AVIF 解码。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">   apk add --no-cache \<br>       freetype \<br>       freetype-dev \<br>       libpng \<br>       libpng-dev \<br>       libavif-dev \<br>       libjpeg-turbo \<br>       libjpeg-turbo-dev \<br>libwebp-dev \<br>   &amp;&amp; docker-php-ext-configure gd <span class="hljs-variable">$&#123;options&#125;</span> \<br>   &amp;&amp; docker-php-ext-install <span class="hljs-variable">$&#123;MC&#125;</span> gd \<br>   &amp;&amp; apk del \<br>       freetype-dev \<br>       libpng-dev \<br>       libjpeg-turbo-dev<br></code></pre></td></tr></table></figure><p>在 1Panel面板 运行环境 重建PHP应用</p><h3 id="备选方案"><a href="#备选方案" class="headerlink" title="备选方案"></a>备选方案</h3><p>理论上修改了构建命令，docker的缓存会失效，如果依然秒编译完成可以尝试手动清理全部缓存</p><p><a href="https://docs.docker.com/reference/cli/docker/builder/prune/">https://docs.docker.com/reference/cli/docker/builder/prune/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker builder prune -a<br>y<br></code></pre></td></tr></table></figure><p>如果依然不行可能新版构建目录换了地方</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>完成后可以在 phpinfo(); 查看GD扩展多出了 AVIF 支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">AVIF Supportenabled<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好世界！</title>
    <link href="/uncategorized/4a17b156/"/>
    <url>/uncategorized/4a17b156/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
