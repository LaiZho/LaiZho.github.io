<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows快速启动背后的功臣：休眠</title>
    <link href="/Wim/fd70b6c4/"/>
    <url>/Wim/fd70b6c4/</url>
    
    <content type="html"><![CDATA[<p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-d59c65f5cb48042eace57dfa869eca70_1440w.jpeg" alt="Windows快速启动背后的功臣：休眠"></p><p>在PC的世界里，微软还是这里的君主，这个总部坐落在美国北方西雅图的北境统治者感受到越来越强的寒意。Winter is coming，Linux的不死士兵们不断是从各个角落钻出来，撬动着微软王座的基石：Windows操作系统。微软不得不加紧修修补补，改善Windows的用户体验。毕竟他的臣民们如果都叛逃了，他的皇位也会不保。</p><p>普通用户感受最大的除了界面的变化之外，一个直观的感受是启动速度快了很多，这和微软在windows 8提出的快速启动（Fast Startup，注意和Android的Fast Boot区别）是分不开的。微软当时统计，启动速度提高了30%到70%:</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-d01581b77005f162ecfe13312d4f8b15.webp" alt="img"></p><p><em>(图片来源 MSDN)</em></p><p>正因为这样的突出表现，Windows8虽然被广泛诟病，快速启动却被保留了下来并在Windows10中继续发挥重要作用。</p><p>快速启动能够如此强大，和它背后的功臣：休眠功能（hibernate）是分不开的。</p><h2 id="休眠hibernate"><a href="#休眠hibernate" class="headerlink" title="休眠hibernate"></a><strong>休眠hibernate</strong></h2><p>Hibernation一般指冬眠，冬眠的动物里最有名的就是熊，而微软在美国科技界的外号就是北极熊，无怪乎休眠被起名Hibernation。</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-328f6eec4ce707ada528f5bc6bd1ac60.webp" alt="img"></p><p>我们专栏在前面一期介绍过睡眠（Sleep, <a href="https://zhuanlan.zhihu.com/p/26830344">一起学习电脑如何睡眠S3</a>）。我们来回忆一下:</p><p>ACPI提供了一种机制使系统在Working状态（G0）和Sleeping状态（G1）以及soft-off （G2）状态之间转换。</p><p>G1 Sleeping状态下系统耗电较少，没有程序在执行，如果有任何唤醒事件传入系统会使系统快速恢复至G0工作状态。Sleeping状态分为四种：</p><p><strong>S0</strong>：正常工作状态，所有设备正常运转。</p><p><strong>S1</strong>：Sleeping with Processor Context Maintained， CPU停止工作，不执行任何指令，但是CPU，芯片组以及DRAM内容没有遗失。此状态可以快速恢复到工作状态。</p><p><strong>S2</strong>：比S1的睡眠状态更深更省电，CPU停止工作，但是CPU和cache的内容已丢失。DRAM仍处于带电状态。</p><p><strong>S3</strong>：又叫Suspend to RAM，功耗更低，内存信息得以保持，CPU, Cache, Chipset的内容均丢失。DRAM仍处于带电状态。</p><p><strong>S4</strong>：又叫Suspend to Disk，hibernate。功耗最低，唤醒需要的时间最长，所有设备都不再工作。Memory的资料被保存在Disk中。当系统收到唤醒信号后，首先从Disk中恢复memory。</p><p>这里的休眠就是指S4 (hibernate)。作为一个UEFI专栏，这里要指出UEFI固件对于S4不需要做任何特殊处理，memory被保存到disk，S4回来后从Disk恢复的动作全部由操作系统完成，UEFI可以将其作为一般启动即可。这和S3有很大不同。</p><h2 id="快速启动Fast-Startup"><a href="#快速启动Fast-Startup" class="headerlink" title="快速启动Fast Startup"></a><strong>快速启动Fast Startup</strong></h2><p>休眠在windows操作系统中存在已经有很长时间了，微软只是在win8开始为它找到了新的使用场景。微软的工程师一直致力提高启动速度，因为他们发现57%的PC用户和45%的笔记本用户还是每天关闭电脑（2011年数据，见参考文献[1]）：</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-d5d07af318fd122b82a43b1fb1db3e77.webp" alt="img"></p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-0172ccb2d05b83e2edf902c4db61e534.webp" alt="img"></p><p><em>(图片来源：MSDN)</em></p><p>而Hibernate却使用率不高。微软的工程师发现: Windows启动到登陆界面要进行的步骤每次完全一样，只有在登陆后运行程序不同。他们产生了一个大胆的想法，为什么不把登陆完成之前的内容借助Hibernate存储下来，而每次启动都从这个点再继续呢？想法不错，经过实验，他们找到了合适的存储点，结果启动速度大为提高。我们通过下图可以形象的看出两者的差别：</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-2005708505e7776d143d8eb59c1edaa8.webp" alt="img"></p><p><em>（图片来源：MSDN）</em></p><p>Cold boot是指原本的冷启动，下面是快速启动。</p><p>干得好，程序员们！</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h2><p>原理说完了，下面说一下它的相关问题：</p><p><strong>1. 怎么开启Fast Startup</strong></p><p>在大多数情况下，快速启动都是缺省开启的。如果你的没有开启，打开快速启动也很简单，照着下面图片做就好了：</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-d1f23648fb19e5c81d6596157e14e494.webp" alt="img"></p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-189aba46bbe0c0c81b2e5ed78bef35b6.webp" alt="img"></p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-065cea2dc43dd021be3300df649c8234.webp" alt="img"></p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-40c299553f555e5355687d23657154f6.webp" alt="img"></p><p>如果你在电源管理界面里面没有看到开启快速启动的选项框，如下：</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-833aac0ab98c71d4e0219bf957915dae.webp" alt="img"></p><p>那可能是你的休眠模式没有打开。用管理员模式开启命令行窗口，输入powercfg &#x2F;hibernate on</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-6ee37661514a2b713dedccdb0551fc4c.webp" alt="img"></p><p><strong>2. 怎么启动个干净的系统</strong></p><p>有些用户担忧，每次都是休眠启动，如果系统出问题，我想要个一干二净的登陆环境怎么办？ 办法由两个：</p><p>A． 关机不要直接用关机选项，而是开启命令行窗口，输入 shutdown &#x2F;s &#x2F;full &#x2F; t 0。</p><p>B． 不要关机，而是选择重启。重启不会用快速启动。</p><p><strong>3. 如何缩小休眠文件 hiberfil.sys</strong></p><p>休眠文件hiberfil.sys随着你的内存大小而设定，通常是你安装内存的75%大小。土豪用户引以为傲的大内存带来了大休眠文件，对寸土寸金的SSD来说就肉痛了。如果你仅仅想用快速启动而对休眠不感兴趣的话，用下面这个命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">powercfg /h /type reduced<br></code></pre></td></tr></table></figure><p>可以节省大约一半的空间。</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-40ef606dc035ffc0b9af859ec8a245eb.webp" alt="img"></p><p>请确保在管理员权限下。</p><p><strong>4. 快速启动的缺点</strong></p><p>对双启动或者多启动来说，Windows会锁住启动分区，你有可能不能顺利进入其他操作系统，尤其Linux系统。如果你通过手动进入的话，对Windows分区进行操作可能会导致再次返回该Windows时发生蓝屏。建议Dual OS的用户慎用快速启动。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><p>这里乱入一个知识点。微软不但把休眠用到了开机上，还创造出了一个叫做混合睡眠的概念。这是因为微软发现关闭电脑，尤其是笔记本的人越来越少。经过平板浪潮的洗礼，大部分人开始习惯把笔记本一合就完事了。而合上笔记本的动作在很多情况下（可以在Windows里面设置）都是进入睡眠S3。而S3有个问题是它还在消耗着电力，尽管比较少。这就带来一个严重的问题，如果在S3情况下电力消耗殆尽，那么未存储的东西不就丢失了吗？过去这种情况都由UEFI固件偷偷处理，它会在电力下降到一个阈值后偷偷开机，帮你把S3转换到S4。</p><p>出问题的是很多小品牌的笔记本厂商，他们固件基础薄弱，这个功能问题很多。而随着不关机人群的扩展，出问题的机会越来越大。于是微软发明了个混合睡眠模式，即：</p><ol><li>合上盖子的时候进入混合睡眠模式，即虽然要进入S3，但也把S4需要的内容存储下来了。</li><li>如果在电源消耗完之前从S3回来，例如开启盖子等。就按照S3启动路径。</li><li>如果电源消耗结束后再回来，就按照S4的路径启动。</li></ol><p>这样相当于为S3加上了S4的双保险，保证文件不会丢失。</p><p>你可以通过powercfg看一下你开启混合启动了吗：</p><p><img src="/./../images/Windows%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9F%E8%87%A3%EF%BC%9A%E4%BC%91%E7%9C%A0/v2-f9d8e3a7c30d1f7c1dfad250e9686b96.webp" alt="img"></p><p><strong>参考文献：</strong></p><p>[1]. <a href="https://blogs.msdn.microsoft.com/b8/2011/09/08/delivering-fast-boot-times-in-windows-8/">https://blogs.msdn.microsoft.com/b8/2011/09/08/delivering-fast-boot-times-in-windows-8/</a></p>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你需要掌握的Scoop技巧和知识</title>
    <link href="/Wim/b4afe920/"/>
    <url>/Wim/b4afe920/</url>
    
    <content type="html"><![CDATA[<p>本文列举了Scoop各种使用技巧和相关知识。包含：</p><ul><li>Scoop 的设计与实现理念；</li><li>自定义Scoop安装路径；</li><li>Scoop潜在错误排查；</li><li>如何在Scoop中进行断点续传；</li><li>更新或禁用软件更新；</li><li>Scoop中的别名；</li><li>如何在同一程序的不同版本之间切换，比如切换不同版本的JDK；</li><li>等等各种实用技巧</li></ul><h2 id="Scoop-包管理工具介绍"><a href="#Scoop-包管理工具介绍" class="headerlink" title="Scoop 包管理工具介绍"></a>Scoop 包管理工具介绍</h2><p>Windows 下常用的包管理工具有：</p><ul><li>Scoop</li><li>Chocolatey</li></ul><p>相比于Chocolatey，Scoop则更专注于开源的命令行工具，使用 Scoop 安装的应用程序通常称为”便携式”应用程序，需要的权限更少，对系统产生的副作用也更少，所以我这里选择了使用 Scoop。</p><p>⚠️️ 注意：对于像 VirtualBox、Docker for Windows ，输入法等这些需要高权限的软件还是通过在官网下载安装包进行安装。</p><h2 id="Scoop-安装与配置"><a href="#Scoop-安装与配置" class="headerlink" title="Scoop 安装与配置"></a>Scoop 安装与配置</h2><p><strong>要求：</strong></p><ul><li>PowerShell &gt;&#x3D; 5.0 (如果是 Window10 则默认满足此条件)</li><li>请确保已允许PowerShell执行本地脚本，可以使用下面的命令开启：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-executionpolicy</span> remotesigned <span class="hljs-literal">-scope</span> currentuser<br><br><span class="hljs-comment"># 或者 （但是它没有上面的命令安全）</span><br><span class="hljs-built_in">set-executionpolicy</span> Unrestricted <span class="hljs-literal">-scope</span> currentuser<br></code></pre></td></tr></table></figure><p>安装路径：</p><ul><li>用户级别安装的程序 和 Scoop 本身默认安装于 <code>C:\Users\&lt;user&gt;\scoop</code></li><li>全局安装的程序（所有用户可用，使用<code>--global</code>或 <code>-g</code> 选项）位<br>于<code>C\ProgramData\scoop</code>路径中。</li></ul><p>可以通过更改对应的环境变量更改这些路径 。</p><p><strong>将 Scoop 安装到自定义目录</strong> :</p><p>打开 PowerShell 先配置环境变量 <code>SCOOP</code>，再运行 <code>iex</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:SCOOP</span>=<span class="hljs-string">&#x27;D:\Scoop&#x27;</span><br><span class="hljs-comment"># 先添加用户级别的环境变量 SCOOP</span><br>[<span class="hljs-type">environment</span>]::setEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP&#x27;</span>,<span class="hljs-variable">$env:SCOOP</span>,<span class="hljs-string">&#x27;User&#x27;</span>)<br><br><span class="hljs-comment">## 下载安装</span><br><br><span class="hljs-comment"># 然后下载安装 Scoop （如果使用默认安装路径则直接运行下面的命令）</span><br><span class="hljs-built_in">iex</span> (<span class="hljs-built_in">new-object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br><br><span class="hljs-comment"># 或者使用下面的命令安装：</span><br><span class="hljs-built_in">iwr</span> <span class="hljs-literal">-useb</span> get.scoop.sh | <span class="hljs-built_in">iex</span><br></code></pre></td></tr></table></figure><p><strong>配置全局安装路径</strong> （可选，建议不改）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:SCOOP_GLOBAL</span>=<span class="hljs-string">&#x27;D:\GlobalScoopApps&#x27;</span><br><br>[<span class="hljs-type">environment</span>]::setEnvironmentVariable(<span class="hljs-string">&#x27;SCOOP_GLOBAL&#x27;</span>,<span class="hljs-variable">$env:SCOOP_GLOBAL</span>,<span class="hljs-string">&#x27;Machine&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>相当于在系统变量中设置： <code>SCOOP_GLOBAL=D:\GlobalScoopApps</code>；默认是在<br><code>C:\ProgramData\scoop</code>。</p></blockquote><p><strong>为什么需要全局安装？</strong></p><p>对于那些需要管理员权限的程序需要进行全局安装。我当前遇到的是当使用 Scoop 安装字体时需要使用全局安装，因为字体需要给所有用户使用。</p><p>初次安装 Scoop 后，建议安装的程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 但 scoop 进行全局安装时需要使用到 sudo 命令</span><br>scoop install sudo<br><br><span class="hljs-comment"># scoop下载程序时支持使用 aria2 来加速下载</span><br>scoop install aria2<br></code></pre></td></tr></table></figure><p>我们可以发现，下载的过程中自动下载了依赖 7-zip。 在安装方面，它利用了 7zip 去解<br>压安装包&#x2F;压缩包，因此它对绿色软件有天生的友好属性 。不仅如此，下载之后的内容会自<br>动将加入到（Path）环境变量中，十分方便。</p><p><strong>补充：</strong> 初次安装之后我们可以通过运行 <code>scoop checkup</code> 来检测当前潜在问题，然后根据提示进行修正。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 检测本人当前环境存在的问题</span><br><span class="hljs-variable">$</span> scoop checkup<br><br>WARN  Windows Defender may slow down or disrupt installs with realtime scanning.<br>  Consider running:<br>    sudo <span class="hljs-built_in">Add-MpPreference</span> <span class="hljs-literal">-ExclusionPath</span> <span class="hljs-string">&#x27;D:\Scoop\Applications&#x27;</span><br>  (Requires <span class="hljs-string">&#x27;sudo&#x27;</span> command. Run <span class="hljs-string">&#x27;scoop install sudo&#x27;</span> <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t have it.)</span><br><span class="hljs-string">WARN  Windows Defender may slow down or disrupt installs with realtime scanning.</span><br><span class="hljs-string">  Consider running:</span><br><span class="hljs-string">    sudo Add-MpPreference -ExclusionPath &#x27;</span>C:\ProgramData\scoop<span class="hljs-string">&#x27;</span><br><span class="hljs-string">  (Requires &#x27;</span>sudo<span class="hljs-string">&#x27; command. Run &#x27;</span>scoop install sudo<span class="hljs-string">&#x27; if you don&#x27;</span>t have it.)<br>WARN  LongPaths support is not enabled.<br>You can enable it with running:<br>    <span class="hljs-built_in">Set-ItemProperty</span> <span class="hljs-string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem&#x27;</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&#x27;LongPathsEnabled&#x27;</span> <span class="hljs-literal">-Value</span> <span class="hljs-number">1</span><br>ERROR <span class="hljs-string">&#x27;dark&#x27;</span> is not installed! It<span class="hljs-string">&#x27;s required for unpacking installers created with the WiX Toolset. Please run &#x27;</span>scoop install dark<span class="hljs-string">&#x27; or &#x27;</span>scoop install wixtoolset<span class="hljs-string">&#x27;.</span><br><span class="hljs-string">WARN  Found 4 potential problems.</span><br></code></pre></td></tr></table></figure><p>可以看到存在三个警告（WARN），一个错误（ERROR），并给出了解决对应问题的命令：</p><ul><li>前两个警告（WARN）提示：杀毒软件 Windows Defender 有可能会使得下载变慢或阻止安装</li><li>第三个警告（WARN）提示：Windows中的 NTFS 中默认不允许大于 260 个字符（byte）的文件全路径存在的限制还未解除。（可能需要添加<code>sudo</code>才能运行给出的命令）</li><li>最后一个错误提示（ERROR）：需要安装 <code>dark</code> 才能解压使用 WiX Toolset 创建的安装包。</li></ul><p><strong>Scoop 的设计与实现理念</strong> ：</p><ul><li>分离用户数据：默认将程序的 <strong>用户数据</strong> 存储到 <code>persist</code> 目录中，这样当用户日<br>后升级该程序后之前的用户配置依然可用。（但是对于部分程序支持的不是很完善）</li><li><code>shim</code>软链接： scoop 会自动在 scoop 应用安装路径下的 <code>shims</code> 文件夹下为新安装<br>的程序添加对应的 <code>.exe</code> 文件，而 <code>shims</code> 文件夹提前就已被添加到 <code>PATH</code> 环境变<br>量中，所以程序一旦安装就可以直接在命令行中运行。</li><li><strong>对于 GUI 程序</strong> ，scoop 还会自动为其在开始菜单中添加快捷方式 ，路径：<br><code>C:\Users\&lt;user&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Scoop Apps</code></li></ul><h2 id="Scoop-常用命令"><a href="#Scoop-常用命令" class="headerlink" title="Scoop 常用命令"></a>Scoop 常用命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop help <span class="hljs-comment">#查看帮助</span><br>scoop help &lt;某个命令&gt; <span class="hljs-comment"># 具体查看某个命令的帮助</span><br><br>scoop install &lt;app&gt;   <span class="hljs-comment"># 安装 APP</span><br>scoop uinstall &lt;app&gt;  <span class="hljs-comment"># 卸载 APP</span><br><br>scoop list  <span class="hljs-comment"># 列出已安装的 APP</span><br>scoop search <span class="hljs-comment"># 搜索 APP</span><br>scoop status <span class="hljs-comment"># 检查哪些软件有更新</span><br><br>scoop update <span class="hljs-comment"># 更新 Scoop 自身</span><br>scoop update appName1 appName2 <span class="hljs-comment"># 更新某些app</span><br>scoop update *  <span class="hljs-comment"># 更新所有 app （前提是需要在apps目录下操作）</span><br><br>scoop bucket known <span class="hljs-comment">#通过此命令列出已知所有 bucket（软件源）</span><br>scoop bucket add bucketName <span class="hljs-comment">#添加某个 bucket</span><br><br>scoop cache <span class="hljs-built_in">rm</span> &lt;app&gt; <span class="hljs-comment"># 移除某个app的缓存</span><br></code></pre></td></tr></table></figure><h2 id="安装卸载软件"><a href="#安装卸载软件" class="headerlink" title="安装卸载软件"></a>安装卸载软件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装之前，通过 search 搜索 APP, 确定软件名称</span><br>scoop search  xxx<br><br><span class="hljs-comment"># 安装 APP</span><br>scoop install AppName<br><br><span class="hljs-comment"># 安装特定版本的 APP；语法 AppName@[version]，示例</span><br>scoop install git@<span class="hljs-number">2.23</span>.<span class="hljs-number">0</span>.windows.<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 卸载 APP </span><br>scoop uninstall <span class="hljs-comment">#卸载 APP</span><br></code></pre></td></tr></table></figure><h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><p>包含：如何禁用更新</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop update <span class="hljs-comment"># 更新 Scoop 自身</span><br><br>scoop update appName1 appName2 <span class="hljs-comment"># 更新某些app</span><br><br><span class="hljs-comment"># 更新所有 app （可能需要在apps目录下操作）</span><br>scoop update *<br><br><span class="hljs-comment"># 禁止某程序更新</span><br>scoop hold &lt;app&gt;<br><span class="hljs-comment"># 允许某程序更新</span><br>scoop unhold &lt;app&gt;<br></code></pre></td></tr></table></figure><h2 id="清除缓存与旧版本"><a href="#清除缓存与旧版本" class="headerlink" title="清除缓存与旧版本"></a>清除缓存与旧版本</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看所有以下载的缓存信息</span><br>scoop cache show<br><br><span class="hljs-comment"># 清除指定程序的下载缓存</span><br>scoop cache <span class="hljs-built_in">rm</span> &lt;app&gt;<br><br><span class="hljs-comment"># 清除所有缓存</span><br>scoop cache <span class="hljs-built_in">rm</span> *<br><br><span class="hljs-comment"># 删除某软件的旧版本</span><br>scoop cleanup &lt;app&gt;<br><br><span class="hljs-comment"># 删除全局安装的某软件的旧版本</span><br>scoop cleanup &lt;app&gt; <span class="hljs-literal">-g</span><br><br><span class="hljs-comment"># 删除过期的下载缓存</span><br>scoop cleanup &lt;app&gt; <span class="hljs-literal">-k</span><br></code></pre></td></tr></table></figure><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>⚠️️ 注意：请在 Powershell 中运行下面的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 可用操作</span><br>scoop alias add|list|<span class="hljs-built_in">rm</span> [&lt;<span class="hljs-type">args</span>&gt;]<br><br><span class="hljs-comment">## 添加别名，格式：</span><br>scoop alias add &lt;name&gt; &lt;command&gt; &lt;description&gt;<br><br><span class="hljs-comment"># 示例：（注意：必须在 Powershell中运行）</span><br>scoop alias add st <span class="hljs-string">&#x27;scoop status&#x27;</span> <span class="hljs-string">&#x27;检查更新&#x27;</span><br><span class="hljs-comment"># 检查已添加的别名</span><br>scoop alias list <span class="hljs-literal">-v</span><br><br>Name Command      Summary<br><span class="hljs-literal">----</span> <span class="hljs-literal">-------</span>      <span class="hljs-literal">-------</span><br>st   scoop status 检查更新<br><br><span class="hljs-comment"># 测试已添加的别名 st</span><br>scoop st<br><br><br><span class="hljs-comment"># 另一个示例：</span><br>scoop alias add <span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;scoop uninstall $args[0]&#x27;</span> <span class="hljs-string">&#x27;卸载某 app&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="在同一程序的不同版本之间切换"><a href="#在同一程序的不同版本之间切换" class="headerlink" title="在同一程序的不同版本之间切换"></a>在同一程序的不同版本之间切换</h2><p>使用命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop reset [<span class="hljs-type">app</span>]<span class="hljs-selector-tag">@</span>[<span class="hljs-type">version</span>]<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop reset idea<span class="hljs-literal">-ultimate-eap</span>@<span class="hljs-number">201.6668</span>.<span class="hljs-number">13</span><br><br>scoop reset idea<span class="hljs-literal">-ultimate-eap</span>@<span class="hljs-number">201.6073</span>.<span class="hljs-number">9</span><br><br><span class="hljs-comment"># 切换到最新版本</span><br>scoop reset idea<span class="hljs-literal">-ultimate-eap</span><br></code></pre></td></tr></table></figure><p>对应版本的程序需要已经安装于本地系统中；所以在你清除某个软件的旧版本时考虑一下自己是否还会再次使用到此旧版本。</p><p>另外 idea-ultimate-eap 切换过程可能需要更长时间。</p><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 显示某个app的信息</span><br>scoop info &lt;app&gt;<br><br><span class="hljs-comment"># 在浏览器中打开某app的主页</span><br>scoop home &lt;app&gt;<br><br><span class="hljs-comment"># 比如</span><br>scoop home git<br></code></pre></td></tr></table></figure><h2 id="添加软件源-Bucket"><a href="#添加软件源-Bucket" class="headerlink" title="添加软件源 Bucket"></a>添加软件源 Bucket</h2><p>Scoop 可安装的软件信息存储在 Bucket（翻译为：桶）中，也可以称其为软件源。Scoop 默认的 Bucket 为 <code>main</code> ；官方维护的另一个 Bucket 为 <code>extras</code>，我们需要手动添加。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># bucket的用法</span><br>scoop bucket add|list|known|<span class="hljs-built_in">rm</span> [&lt;<span class="hljs-type">args</span>&gt;]<br></code></pre></td></tr></table></figure><p>添加 extras :</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add extras<br></code></pre></td></tr></table></figure><p>我们也可以添加第三方 bucket ，示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add dorado https://github.com/h404bi/dorado<br></code></pre></td></tr></table></figure><p>并且明确指定安装此 bucket （软件源）中的的程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop install dorado/&lt;app_name&gt;<br><span class="hljs-comment"># 下面是dorado中特有的软件，测试其是否添加成功</span><br>scoop search trash<br></code></pre></td></tr></table></figure><p>推荐的 Bucket（软件源）：</p><ul><li><p><code>extras</code>：Scoop 官方维护的一个仓库，涵盖了大部分因为种种原因不能被收录进主仓库的常用软件（在我看来是必须要添加的）。地址：<a href="https://github.com/lukesampson/scoop-extras/tree/master/bucket">lukesampson&#x2F;scoop-extras</a></p></li><li><p><code>nirsoft</code>：是一个 NirSoft 开发的小工具的安装合集。NirSoft 制作了大量的小工具，包括系统工具、网络工具、密码恢复等等，孜孜不倦、持续更新。</p><ul><li>Bucket 地址：<a href="https://github.com/kodybrown/scoop-nirsoft">kodybrown&#x2F;scoop-nirsoft</a></li><li>NirSoft 官网地址：<a href="http://www.nirsoft.net/">NirSoft</a></li></ul></li><li><p>dorado（添加了一些国内的app，比如 qqplayer ️）<a href="https://github.com/h404bi/dorado">h404bi&#x2F;dorado</a></p></li><li><p>ash258：<a href="https://github.com/Ash258/scoop-Ash258">Ash258&#x2F;scoop-Ash258</a></p></li><li><p>java：添加后可以通过它安装各种 jdk 、 jre</p></li><li><p>nerd-fonts ：包含各种字体</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 先添加bucket</span><br>scoop bucket add extras<br>scoop bucket add nirsoft<br>scoop bucket add dorado https://github.com/h404bi/dorado<br>scoop bucket add Ash258 <span class="hljs-string">&#x27;https://github.com/Ash258/Scoop-Ash258.git&#x27;</span><br>scoop bucket add nerd<span class="hljs-literal">-fonts</span><br><span class="hljs-comment"># 对于开发人员，可添加下面的两个</span><br>scoop bucket add java<br>scoop bucket add versions<br></code></pre></td></tr></table></figure><h2 id="bucket-更新时遇到问题"><a href="#bucket-更新时遇到问题" class="headerlink" title="bucket 更新时遇到问题"></a>bucket 更新时遇到问题</h2><p>情况是这样：当我运行 <code>scoop update</code> 进行更新时提示： <code>extras</code> bucket 更新失败。于是我将其删除后再添加，提示成功，但是它却把 main<br>bucket (默认的 bucket) 给删除了。通过”scoop status”检查状态时出现 “These app<br>manifests have been removed”并且下面列出了已被移除的软件名单。 <strong>那么如何解决此问题？</strong></p><p>我们需要重新添加 main bucket ：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add main <span class="hljs-comment">#添加 main bucket</span><br></code></pre></td></tr></table></figure><h2 id="网络问题导致app安装失败"><a href="#网络问题导致app安装失败" class="headerlink" title="网络问题导致app安装失败"></a>网络问题导致app安装失败</h2><p>一个示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop install mediainfo<br></code></pre></td></tr></table></figure><p>当安装 mediainfo 时由于网络问题，安装包无法下载，从命令行输出信息中可以看到如下<br>内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ERROR Download failed! (Error <span class="hljs-number">1</span>) An unknown error occurred<br>ERROR https://mediaarea.net/download/binary/mediainfo/<span class="hljs-number">19.09</span>/MediaInfo_CLI_19.<span class="hljs-number">09</span>_Windows_x64.zip<br>    referer=https://mediaarea.net/download/binary/mediainfo/<span class="hljs-number">19.09</span>/<br>    <span class="hljs-built_in">dir</span>=D:\Scoop\Applications\cache<br>    out=mediainfo<span class="hljs-comment">#19.09#https_mediaarea.net_download_binary_mediainfo_19.09_MediaInfo_CLI_19.09_Windows_x64.zip</span><br><br>ERROR &amp; <span class="hljs-string">&#x27;D:\Scoop\Applications\apps\aria2\current\aria2c.exe&#x27;</span> <span class="hljs-literal">--input-file</span>=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\mediainfo.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以发现文件的下载路径和下载后的文件名称，这里 <code>out=</code> 后面的压缩包就是下载后<br>文件的名称，(也可以在 scoop 的 <code>cache</code> 目录下的 <code>mediainfo.txt</code> 文件中找到下载路径与文<br>件名称)</p><p>然后我们可以尝试在浏览器或其他下载程序中（可以 fq 的程序中）下载该程序，下载完成<br>后再更改文件名并将其放入 scoop 的 <code>cache</code> 目录，最后再次运行<br><code>scoop install mediainfo</code> 即可安装。</p><h2 id="如何利用-aria2-进行断点续传？"><a href="#如何利用-aria2-进行断点续传？" class="headerlink" title="如何利用 aria2 进行断点续传？"></a>如何利用 aria2 进行断点续传？</h2><p>先看具体示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 更新 vscode</span><br>scoop update vscode<span class="hljs-literal">-portable</span><br></code></pre></td></tr></table></figure><p>scoop 更新 vscode 时下载到 80%的时候 失败了（安装时处理方法也一样）。我们需要在提示中找到如下内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-string">&#x27;D:\Scoop\Applications\apps\aria2\current\aria2c.exe&#x27;</span> <span class="hljs-literal">--input-file</span>=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\vscode-portable.txt&#x27;</span> <br><span class="hljs-literal">--user-agent</span>=<span class="hljs-string">&#x27;Scoop/1.0 (+http://scoop.sh/) PowerShell/5.1 (Windows NT 10.0; Win64; x64; Desktop)&#x27;</span> <br><span class="hljs-literal">--allow-overwrite</span>=true <span class="hljs-literal">--auto-file-renaming</span>=false <br><span class="hljs-literal">--retry-wait</span>=<span class="hljs-number">2</span> <span class="hljs-literal">--split</span>=<span class="hljs-number">5</span> <span class="hljs-literal">--max-connection-per-server</span>=<span class="hljs-number">5</span> <br><span class="hljs-literal">--min-split-size</span>=<span class="hljs-number">5</span>M <span class="hljs-literal">--console-log-level</span>=warn <span class="hljs-literal">--enable-color</span>=false <br><span class="hljs-literal">--no-conf</span>=true <span class="hljs-literal">--follow-metalink</span>=true <span class="hljs-literal">--metalink-preferred-protocol</span>=https <br><span class="hljs-literal">--min-tls-version</span>=TLSv1.<span class="hljs-number">2</span> <span class="hljs-literal">--stop-with-process</span>=<span class="hljs-number">15584</span> <span class="hljs-literal">--continue</span><br></code></pre></td></tr></table></figure><p>我们从上面的信息中提取出下面的命令；若要进行断点续传，只需再次执行下面的命令即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">aria2c.exe <span class="hljs-literal">--input-file</span>=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\vscode-portable.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>当提示下载完成后，我们需要再次运行 scoop 对应的 app 更新命令（或安装命令），即可完成 app 更新（或安装）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop update vscode<span class="hljs-literal">-portable</span><br></code></pre></td></tr></table></figure><h2 id="安装和切换JDK、Python的版本"><a href="#安装和切换JDK、Python的版本" class="headerlink" title="安装和切换JDK、Python的版本"></a>安装和切换JDK、Python的版本</h2><p>这里需要使用 <code>scoop reset</code> 它的作用是：重置一个应用程序来解决冲突。</p><p>命令格式为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop reset &lt;java&gt;[<span class="hljs-selector-tag">@</span>&lt;<span class="hljs-type">version</span>&gt;]<br></code></pre></td></tr></table></figure><p><strong>安装和切换不同的 JDK 版本：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:&gt; scoop bucket add java<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install oraclejdk<br>Installing <span class="hljs-string">&#x27;oraclejdk&#x27;</span> (<span class="hljs-number">12.0</span>.<span class="hljs-number">2</span><span class="hljs-literal">-10</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install zulu6<br>Installing <span class="hljs-string">&#x27;zulu6&#x27;</span> (<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install openjdk10<br>Installing <span class="hljs-string">&#x27;openjdk10&#x27;</span> (<span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>openjdk version <span class="hljs-string">&quot;10.0.1&quot;</span> <span class="hljs-number">2018</span><span class="hljs-literal">-04-17</span><br>OpenJDK Runtime Environment (build <span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">10</span>)<br>OpenJDK <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">10</span>, mixed mode)<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop reset zulu6<br>Resetting zulu6 (<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span>).<br>Linking ~\scoop\apps\zulu6\current =&gt; ~\scoop\apps\zulu6\<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>openjdk version <span class="hljs-string">&quot;1.6.0-99&quot;</span><br>OpenJDK Runtime Environment (Zulu <span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><span class="hljs-literal">-win64</span>) (build <span class="hljs-number">1.6</span>.<span class="hljs-number">0</span><span class="hljs-literal">-99-b99</span>)<br>OpenJDK <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (Zulu <span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><span class="hljs-literal">-win64</span>) (build <span class="hljs-number">23.77</span><span class="hljs-literal">-b99</span>, mixed mode)<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop reset oraclejdk<br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>java version <span class="hljs-string">&quot;12.0.2&quot;</span> <span class="hljs-number">2019</span><span class="hljs-literal">-07-16</span><br>Java(TM) SE Runtime Environment (build <span class="hljs-number">12.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">10</span>)<br>Java HotSpot(TM) <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">12.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">10</span>, mixed mode, sharing)<br></code></pre></td></tr></table></figure><p>安装和切换不同的 Python 版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> scoop bucket add versions <span class="hljs-comment"># add the &#x27;versions&#x27; bucket if you haven&#x27;t already</span><br><br><span class="hljs-variable">$</span> scoop install python27 python<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 3.6.2</span><br><br><span class="hljs-comment"># switch to python 2.7.x</span><br><span class="hljs-variable">$</span> scoop reset python27<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 2.7.13</span><br><br><span class="hljs-comment"># switch back (to 3.x)</span><br><span class="hljs-variable">$</span> scoop reset python<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 3.6.2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wim</tag>
      
      <tag>Scoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MBR &amp; GPT 硬盘分区类型&amp;属性详解（Win 下更改/设置 OEM/恢复分区方法）</title>
    <link href="/Wim/4a6f0b8d/"/>
    <url>/Wim/4a6f0b8d/</url>
    
    <content type="html"><![CDATA[<p>打开Windows系统的磁盘管理，你可能会在硬盘上发现一个或若干个特殊分区，他们一般都带有特殊的标记，并且通常都具有隐藏属性，比如，OEM分区、恢复分区皆如此。那么这些分区是靠什么表现出特殊属性的呢？而我们又能不能改变这些属性呢？本文就来详细解释这个问题。</p><blockquote><p>为方便理解本文内容，建议先阅读《<a href="https://blogs.iapplee.com/what-is-gpt-and-what-is-uefi/">UEFI+GPT引导基础篇（一）：什么是GPT，什么是UEFI？</a>》一文，这篇文章简单介绍了MBR和GPT硬盘分区原理，告诉我们硬盘上各分区的相关信息都存储在各自的分区表中：MBR硬盘分区信息存储在MBR分区表中；而GPT硬盘分区信息则存储在GPT分区表中，除此之外，GPT硬盘还包含一个PMBR分区表。<strong>本文下面要讲到的东西可以看作是对这些内容的一点扩展，它捎带回答了这两个问题：</strong></p><p><strong>1、</strong>GPT硬盘中存在PMBR分区表和GPT分区表，那么系统凭借什么将其识别为GPT硬盘？<br><strong>2、</strong>我们还知道，MBR硬盘也可以实现UEFI引导，那么其用于实现引导的分区（FAT32分区）是不是也有像GPT硬盘中的“EFI系统分区”这样鲜明的标志？</p></blockquote><p><strong>MBR硬盘和GPT硬盘使用不同的分区规则，我们先来看MBR硬盘。</strong></p><p>MBR硬盘的MBR分区表中包含了硬盘上各主分区的分区信息，每个分区信息中都有一段内容（1字节，即8位）用来表示分区类型。可以<a href="http://www.win.tue.nl/~aeb/partitions/partition_types-1.html">在这里查看分区类型列表</a>（十六进制表示）。<strong>Windows下可识别的分区类型主要有：</strong></p><p>0x42 表示LDM数据分区<br>0x27 表示恢复分区（WinRE分区、Acer等系统备份分区）。<br>0x07 表示普通分区（Windows分区、数据分区。默认分区类型。）<br>0x12 表示OEM分区（康柏、IBM Thinkpad）。<br>0x84 表示OEM分区（Intel Rapid Start technology）。<br>0xDE 表示OEM分区（戴尔）。<br>0xFE 表示OEM分区<br>0xA0 表示OEM分区（Laptop hibernation partition）<br>0xEE 表示该分区表是PMBR，紧随其后的应该是GPT分区表头和GPT分区表，因此这是一块GPT硬盘。<br>0xEF 表示EFI系统分区</p><p>Windows正是根据分区表中设定的分区类型决定分区的用途（OEM或其他）和属性（是否隐藏等）。其他大多数分区类型Windows无法识别。</p><h3 id="Windows下更改分区类型的方法"><a href="#Windows下更改分区类型的方法" class="headerlink" title="Windows下更改分区类型的方法"></a>Windows下更改分区类型的方法</h3><p>自Vista开始，系统自带的diskpart分区管理工具已具备更改分区类型的功能。更改分区类型，只需在具有管理员身份的CMD中依次执行以下几个命令即可（括号内为注释内容）：</p><p>Diskpart（打开diskpart工具）<br>List disk（可选。帮助查看连接到电脑的所有存储器及其编号）<br>Select disk N（选择地N个硬盘，N为硬盘编号）<br>List part（可选。帮助查看选定硬盘上的所有分区及其编号）<br>Select part N（选定第N个分区，N代表分区编号）<br>Set id &#x3D; xx（设定分区类型，xx代表十六进制分区类型ID，省略0x）</p><p><strong>举两个我们可能需要用到的例子：</strong></p><p>① 改变隐藏的OEM分区类型，从而能够查看OEM分区中的内容。</p><p><strong>注意：</strong>如果还想更改回去，请在select part之后运行detail part记下分区默认的分区类型，方便事后还原。</p><p>[<img src="/./../images/MBR-GPT%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E7%B1%BB%E5%9E%8B-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%88Win%E4%B8%8B%E6%9B%B4%E6%94%B9-%E8%AE%BE%E7%BD%AEOEM-%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95%EF%BC%89/partition-type-setup-mbr-1.gif" alt="partition type setup-mbr-1">]</p><p>完成图中的操作后，如果没有自动分配盘符，可以尝试重启<strong>或</strong>在磁盘管理中手动添加“驱动器号”<strong>或</strong>紧接着图中最后一步执行以下命令添加盘符（e为盘符）。</p><p>assign letter&#x3D;e</p><p>同理，如果要将某一个分区设置为OEM分区，只需将其分区类型设置为出厂默认的OEM分区类型ID或12或DE即可。</p><p>② 作为博客<a href="https://blogs.iapplee.com/win8-or-win8-1-system-backup/">Win8&#x2F;8.1备份教程</a>的补充。我们将系统备份映像存放到单独的隐藏分区中，以保护备份映像不受到损坏。</p><p>首先，准备一个可容纳备份映像文件的空分区（主分区、逻辑分区都可以），将备份映像按下图所示的路径存放（\sources\install.wim）</p><p>[<img src="/./../images/MBR-GPT%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E7%B1%BB%E5%9E%8B-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%88Win%E4%B8%8B%E6%9B%B4%E6%94%B9-%E8%AE%BE%E7%BD%AEOEM-%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95%EF%BC%89/partition-type-setup-mbr-2.gif" alt="partition type setup-mbr-2">]</p><p>然后，配置恢复映像，将分区类型设置为“<strong>恢复分区</strong>”。如下图所示。</p><p>[<img src="/./../images/MBR-GPT%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E7%B1%BB%E5%9E%8B-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%88Win%E4%B8%8B%E6%9B%B4%E6%94%B9-%E8%AE%BE%E7%BD%AEOEM-%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95%EF%BC%89/partition-type-setup-mbr-3.gif" alt="partition type setup-mbr-3">]</p><p>完成图中的步骤，用于恢复系统的系统备份分区就被隐藏掉了。如果计算机中还能够看到该分区（有盘符），紧接着图中最后一步运行下面的命令删除盘符：</p><p>remove</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p><strong>那么，GPT硬盘上又是怎么样的情况呢？</strong></p><p>在GPT分区表中的分区信息中同样有一段用于表示分区类型的内容（16字节，即128位）。可以<a href="http://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8#.E5.88.86.E5.8C.BA.E7.B1.BB.E5.9E.8BGUID">在这里查看分区类型列表</a>（十六进制的GUID表示）。<strong>Windows下常见的GUID分区类型主要有：</strong></p><p>C12A7328-F81F-11D2-BA4B-00A0C93EC93B       EFI系统分区<br>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC     WinRE恢复环境分区、系统备份分区<br>E3C9E316-0B5C-4DB8-817D-F92DF00215AE       微软保留（MSR）分区<br>EBD0A0A2-B9E5-4433-87C0-68B6B72699C7      基本数据分区<br>5808C8AA-7E8F-42E0-85D2-E1E90434CFB3       逻辑软盘管理工具元数据分区<br>AF9B60A0-1431-4F62-BC68-3311714A69AD      逻辑软盘管理工具数据分区<br>37AFFC90-EF7D-4e96-91C3-2D7AE055B174     IBM通用并行文件系统(GPFS)分区<br>E75CAF8F-F680-4CEE-AFA3-B001E56EFC2D     存储空间（Storage Spaces）分区</p><p>BFBFAFE7-A34F-448A-9A5B-6213EB736C22      Lenovo OEM分区（一键还原启动分区）<br>F4019732-066E-4E12-8273-346C5641494F        Sony OEM分区（一键还原启动分区）</p><p>GPT分区类型用于区别分区的用途，GPT分区表中的分区信息中除了分区类型外，还用了另一段区域（8字节，即64位）来表示分区属性，<strong>各位作用如下</strong>：</p><p>0x0000000000000001（0位） 将分区表示为必需分区，不允许用户更改数据（Windows下将标记为OEM分区）<br>0x8000000000000000（63位）  当硬盘被挂载到另一台电脑时默认不分配盘符。<br>0x4000000000000000（62位） 表示该分区不可被检测到。<br>0x2000000000000000（61位） 表述该分区为另一个分区的卷影拷贝。<br>0x1000000000000000（60位） 为分区设置只读属性。</p><p>关于分区属性，更详细的介绍参考《<a href="http://msdn.microsoft.com/en-us/library/aa381635(VS.85).aspx">CREATE_PARTITION_PARAMETERS structure</a>》</p><h3 id="Windows下通常采用以下分区类型和分区属性组合："><a href="#Windows下通常采用以下分区类型和分区属性组合：" class="headerlink" title="Windows下通常采用以下分区类型和分区属性组合："></a>Windows下通常采用以下分区类型和分区属性组合：</h3><p>普通数据分区——EBD0A0A2-B9E5-4433-87C0-68B6B72699C7——0x0000000000000000<br>OEM分区——无特定GUID值，OEM决定——0x8000000000000001<br>WinRE分区——DE94BBA4-06D1-4D40-A16A-BFD50179D6AC——0x8000000000000001<br>EFI系统分区——C12A7328-F81F-11D2-BA4B-00A0C93EC93B——0x8000000000000001<br>MSR保留分区——E3C9E316-0B5C-4DB8-817D-F92DF00215AE——0x8000000000000000<br>恢复&#x2F;备份分区——DE94BBA4-06D1-4D40-A16A-BFD50179D6AC——0x8000000000000001</p><h3 id="更改GPT分区类型和分区属性的方法："><a href="#更改GPT分区类型和分区属性的方法：" class="headerlink" title="更改GPT分区类型和分区属性的方法："></a>更改GPT分区类型和分区属性的方法：</h3><p>在管理员身份的CMD中（Vista以上版本系统）依次执行以下命令即可（括号内为注释内容）：</p><p>Diskpart  （打开diskpart工具）<br>List disk  （可选。帮助查看连接到电脑的所有存储器及其编号）<br>Select disk N  （选择地N个硬盘，N为硬盘编号）<br>List part  （可选。帮助查看选定硬盘上的所有分区及其编号）<br>Select part N  （选定第N个分区，N代表分区编号）<br>Set id &#x3D; xx  （设定分区类型，xx代表十六进制GUID分区类型ID）<br>gpt attributes &#x3D; 0xXXXXXXXXXXXXXXXX  （设置分区属性，XXXXXXXXXXXXXXXX代表分区属性）</p><p><strong>同样采用上文MBR硬盘中的两个例子，其在GPT硬盘中的操作方法如下：</strong></p><p>① 改变隐藏的OEM分区类型，从而能够查看OEM分区中的内容。</p><p><strong>注意：</strong>如果还想更改回去，请在select part之后运行detail part记下分区默认的分区类型和属性，方便事后还原。</p><p>[<img src="/./../images/MBR-GPT%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E7%B1%BB%E5%9E%8B-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%88Win%E4%B8%8B%E6%9B%B4%E6%94%B9-%E8%AE%BE%E7%BD%AEOEM-%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95%EF%BC%89/partition-type-setup-gpt-1.gif" alt="partition type setup-gpt-1">]</p><p>完成图中的操作后，如果没有自动分配盘符，可以尝试重启<strong>或</strong>在磁盘管理中手动添加“驱动器号”<strong>或</strong>紧接着图中最后一步执行以下命令添加盘符（e为盘符）。</p><p>assign letter&#x3D;e</p><p>同理，如果要将某一个分区设置为OEM分区，只需将其分区类型设置为出厂默认或{EBD0A0A2-B9E5-4433-87C0-68B6B72699C7}或其他非特殊（即上文列表中之外）的GUID，再将其属性设置为0x8000000000000001（隐藏）或0x0000000000000001即可。</p><p>② 作为博客<a href="https://blogs.iapplee.com/win8-or-win8-1-system-backup/">Win8&#x2F;8.1备份教程</a>的补充。我们将系统备份映像存放到单独的隐藏分区中，以保护备份映像不受到损坏。</p><p>首先，准备一个可容纳备份映像文件的空分区，将备份映像按下图所示的路径存放（\sources\install.wim）</p><p>[<img src="/./../images/MBR-GPT%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E7%B1%BB%E5%9E%8B-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%88Win%E4%B8%8B%E6%9B%B4%E6%94%B9-%E8%AE%BE%E7%BD%AEOEM-%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95%EF%BC%89/partition-type-setup-gpt-2.gif" alt="partition type setup-gpt-2">]</p><p>然后，配置恢复映像，将分区类型设置为“<strong>恢复分区</strong>”。如下图所示。</p><p>[<img src="/./../images/MBR-GPT%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E7%B1%BB%E5%9E%8B-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%88Win%E4%B8%8B%E6%9B%B4%E6%94%B9-%E8%AE%BE%E7%BD%AEOEM-%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95%EF%BC%89/partition-type-setup-gpt-3.gif" alt="partition type setup-gpt-3">]</p><p>完成图中的步骤，用于恢复系统的系统备份分区就被隐藏掉了。如果计算机中还能够看到该分区（有盘符），紧接着图中最后一步运行下面的命令删除盘符即可：</p><p>remove</p>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2 设置静态 IP</title>
    <link href="/Wim/903f6de9/"/>
    <url>/Wim/903f6de9/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本人Windows 11 家庭中文版系统从Microsoft Store中安装Ubuntu系统（版本号：2204.2.33.0），用于一些Linux系统的操作，但是在使用中<strong>面临了一个较大的问题</strong>：每次启动电脑或者重启Ubuntu系统都会导致Ubuntu的IP地址变化，对于docker使用、window连接Ubuntu系统Python环境等均会带来繁琐的问题，<strong>因此本文主要介绍如何设置WSL2为静态IP</strong>。</p><h1 id="WSL2动态IP问题"><a href="#WSL2动态IP问题" class="headerlink" title="WSL2动态IP问题"></a>WSL2动态IP问题</h1><p>由于子系统是通过虚拟网卡并设置到与<a href="https://cloud.tencent.com/product/cdh?from=20065&from_column=20065">宿主机</a>同一网段中，所以可以互相访问，但是对于宿主机来说，并不能够完全的隔离。如果在子系统中开启了网站服务，那么在宿主机居然使用 <code>localhost</code> 来访问，这太让人迷惑了。并且另一个致命的问题是 每次重启 <code>wsl2</code> 都会自动分配一个 <code>ip</code> 地址，连同宿主机的虚拟网段中的 <code>ip</code>也会改变，所以每次都需要获取并更改服务的地址，如 ： 通过 <code>docker</code> 开启了一个服务并监听了一个端口，但是每次宿主机重启后也是一样的发现服务地址变了，可能会导致服务运行失败，最小的副作用是更改 <code>ip</code> 地址。</p><h1 id="设置WSL2为静态IP"><a href="#设置WSL2为静态IP" class="headerlink" title="设置WSL2为静态IP"></a>设置WSL2为静态IP</h1><h2 id="1-选择设定的静态IP"><a href="#1-选择设定的静态IP" class="headerlink" title="1. 选择设定的静态IP"></a>1. 选择设定的静态IP</h2><p><strong>主要有两个地方需要设置静态ip</strong>：</p><ol><li>WSL内部的eth0网卡；假定ip为<code>172.18.224.2</code>；</li><li>Windows的vEthernet (WSL)网卡；假定ip为<code>172.18.224.1</code>；</li></ol><p>补充：</p><ol><li>对于静态ip的设定（为什么选择172.18.224.2之类的问题），我这边是根据当前windows中的 vEthernet(WSL)初始的ip作为后续的静态ip，然后WSL的eth0网卡就选定同网段下的一个ip就可以了</li><li>如果电脑没有通过terminal中输入命令 <code>ipconfig</code> 没有显示vEthernet(WSL)的ip，说明你没有启动WSL系统，点击Ubuntu图标启动或者命令<code>net start LxssManager</code> 启动一下就可以了</li></ol><h2 id="2-设置Windows的vEthernet-WSL-网卡ip"><a href="#2-设置Windows的vEthernet-WSL-网卡ip" class="headerlink" title="2. 设置Windows的vEthernet (WSL)网卡ip"></a>2. 设置Windows的vEthernet (WSL)网卡ip</h2><p>cmd命令以<strong>管理员权限</strong>执行一下命令就可以了(或者在powershell中执行下面命令双引号里的内容),执行完可以通过<code>ipconfig</code> 查看 vEthernet (WSL)网卡ip是否是选定的IP，本文是：<code>172.18.224.1</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;Get-NetAdapter &#x27;vEthernet (WSL)&#x27; | Get-NetIPAddress | Remove-NetIPAddress -Confirm:<span class="hljs-variable">$False</span>; New-NetIPAddress -IPAddress 172.18.224.1 -PrefixLength 24 -InterfaceAlias &#x27;vEthernet (WSL)&#x27;; Get-NetNat | ? Name -Eq WSLNat | Remove-NetNat -Confirm:<span class="hljs-variable">$False</span>; New-NetNat -Name WSLNat -InternalIPInterfaceAddressPrefix 172.18.224.0/24;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>补充</strong>：如果想更换为你设定的IP，只需将对应的<code>172.18.224.1</code>修改即可</p><h2 id="3-设置WSL2的eth0w网卡的IP"><a href="#3-设置WSL2的eth0w网卡的IP" class="headerlink" title="3. 设置WSL2的eth0w网卡的IP"></a>3. 设置WSL2的eth0w网卡的IP</h2><p>在WSL2系统中启动脚本 ~&#x2F;.bashrc 里添加如下命令（我本人在root账户、个人账户都添加了!手动捂脸）,此处设置的IP为 <code>172.18.224.2</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># static ip</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(ip addr show eth0 | grep &#x27;inet\b&#x27; | awk &#x27;&#123;print <span class="hljs-variable">$2</span>&#125;&#x27; | head -n 1)&quot;</span> != <span class="hljs-string">&quot;172.18.224.2/24&quot;</span> ];<br>then<br>sudo ip addr <span class="hljs-built_in">del</span> <span class="hljs-variable">$</span>(ip addr show eth0 | grep <span class="hljs-string">&#x27;inet\b&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | head <span class="hljs-literal">-n</span> <span class="hljs-number">1</span>) dev eth0<br>sudo ip addr add <span class="hljs-number">172.18</span>.<span class="hljs-number">224.2</span>/<span class="hljs-number">24</span> broadcast <span class="hljs-number">172.18</span>.<span class="hljs-number">224.255</span> dev eth0<br>sudo ip route add <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span> via <span class="hljs-number">172.18</span>.<span class="hljs-number">224.1</span> dev eth0<br>fi<br></code></pre></td></tr></table></figure><h2 id="4-配置DNS"><a href="#4-配置DNS" class="headerlink" title="4. 配置DNS"></a>4. 配置DNS</h2><p>设置好静态IP后，如果不配置DNS(一般在root账户)，则WSL2无法访问外网(可以通过命令 <code>ping www.baidu.com</code> 测试)，因此需要设置DNS，此部分需要两个步骤：</p><p><strong>4.1 修改 &#x2F;etc&#x2F;wsl.conf 文件</strong><br>使用命令 <code>vim /etc/wsl.conf</code> 文件中写入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># static ip</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(ip addr show eth0 | grep &#x27;inet\b&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | head -n 1)</span>&quot;</span> != <span class="hljs-string">&quot;172.18.224.2/24&quot;</span> ];<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">sudo</span> ip addr del $(ip addr show eth0 | grep <span class="hljs-string">&#x27;inet\b&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-built_in">head</span> -n 1) dev eth0<br><span class="hljs-built_in">sudo</span> ip addr add 172.18.224.2/24 broadcast 172.18.224.255 dev eth0<br><span class="hljs-built_in">sudo</span> ip route add 0.0.0.0/0 via 172.18.224.1 dev eth0<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p><strong>4.2 修改 &#x2F;etc&#x2F;resolv.conf 文件</strong><br>对于本人使用的WSL2版本中系统存在一条软连接(指向&#x2F;mnt&#x2F;msl&#x2F;resolv.conf)，需要先删除软连接，使用命令 <code>vim /etc/resolv.conf</code> 文件中写入如下命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nameserver 8.8.4.4 <span class="hljs-comment"># 写入你本地最好用的dns就行</span><br></code></pre></td></tr></table></figure><p>配置完成后，使用命令 <code>ping www.baidu.com</code> 测试一下，即可访问外网。</p><h2 id="5-重要问题"><a href="#5-重要问题" class="headerlink" title="5. 重要问题"></a>5. 重要问题</h2><p>对于完成以上设置后，上述的设置还存在两个大问题：</p><ol><li>WSL2中设置好的 &#x2F;etc&#x2F;resolv.conf 重启丢失问题</li><li>重启电脑或WSL2服务后vEthernet (WSL)网卡IP仍然变动问题，WSL2的IP对于重启电脑或者WSL2服务均不会发生变化</li></ol><p>因此该部分主要针对这两个问题进行解决，解决完这两个问题才能保证设置完全完成，少年，不要浮躁哇。</p><p><strong>对于第一个问题</strong>，可以直接在WSL2每次启动时将相关内容写入对应文件即可，可以借助 <code>~/.bashrc</code> 文件进行配置（登入Ubuntu时对应的账户，不要忘了在&#x2F;etc&#x2F;sudoers中配置当前账户的sudo权限:<code>youuser ALL=(ALL) NOPASSWD: ALL</code>）， 运行命令 <code>vim ~/.bashrc</code>，然后天下下面内容即可保证每次启动WSL2都会完成4.2的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&#x27;echo &quot;nameserver 114.114.114.114 </span><br><span class="hljs-string">nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>对于第二个问题</strong>，最笨的方式是每次开机或者重启WSL2服务时，重复操作一下 2 操作对应的命令，如果想省事的话就将对应的命令写成一个脚本设置开机自启或者放到某个地方手动启动也可以，</p><h1 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h1><ul><li>重启wsl 服务命令</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 用管理员权限打开 powershell<br>#停止LxssManager服务<br><span class="hljs-built_in">net</span> stop LxssManager<br>#启动LxssManager服务<br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> LxssManagerxxxxxxxxxx # 用管理员权限打开 powershell#停止LxssManager服务<span class="hljs-built_in">net</span> stop LxssManager#启动LxssManager服务<span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> LxssManager# 用管理员权限打开 powershell#停止LxssManager服务<span class="hljs-built_in">net</span> stop LxssManager#启动LxssManager服务<span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> LxssManager<br></code></pre></td></tr></table></figure><ul><li>windows 系统查看当前运行的WSL子系统</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wsl --list --running<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wim</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 DISM 将 Windows 映像更改为更高版本</title>
    <link href="/Wim/5c561dcf/"/>
    <url>/Wim/5c561dcf/</url>
    
    <content type="html"><![CDATA[<p>你可以使用 Windows <a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/dism-windows-edition-servicing-command-line-options?view=windows-11">版本维护命令</a>列出映像的潜在版本或将映像的版本更改为更高版本。 每个潜在目标版本的包都暂存在 Windows 映像中。 维护映像时，系统会向映像中的每个版本应用更新。</p><ul><li>脱机更改 Windows 版本不需要产品密钥。 通过脱机维护将映像更改为更高版本后，可以使用以下方法之一添加产品密钥：<ul><li>在开箱即用体验 (OOBE) 期间输入产品密钥。</li><li>在 specialize 配置阶段，使用无人参与应答文件输入产品密钥。</li><li>脱机设置版本后，将部署映像维护和管理 (DISM) 与 <code>/Set-ProductKey</code> 选项结合使用。</li></ul></li><li>联机更改 Windows 版本需要产品密钥。</li></ul><p>有关产品密钥的详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/work-with-product-keys-and-activation-auth-phases?view=windows-11">使用产品密钥和激活</a>。</p><h2 id="查找和更改当前的-Windows-版本"><a href="#查找和更改当前的-Windows-版本" class="headerlink" title="查找和更改当前的 Windows 版本"></a>查找和更改当前的 Windows 版本</h2><p>通过装载映像并在装载的映像上运行 DISM 命令，可以找到映像当前设置为的 Windows 版本。</p><h3 id="查找当前版本"><a href="#查找当前版本" class="headerlink" title="查找当前版本"></a>查找当前版本</h3><ol><li><p>以管理员身份打开命令提示符。</p></li><li><p>使用 <code>Get-ImageInfo</code> 选项运行 DISM，以检索要修改的映像的名称或索引号。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Get-ImageInfo /ImageFile:C:\test\images\install.wim<br></code></pre></td></tr></table></figure></li><li><p>装载 Windows 映像。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Mount-Image /ImageFile:C:\test\images /Index:<span class="hljs-number">1</span> /MountDir:C:\test\offline<br></code></pre></td></tr></table></figure><p>大多数用于指定映像文件的操作都需要索引或名称值。</p></li><li><p>键入以下命令，查找映像当前设置为的 Windows 版本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Image:C:\test\offline /Get-CurrentEdition<br></code></pre></td></tr></table></figure><p>记下映像当前设置为的 Windows 版本。 如果映像已更改为更高版本，则不应再次更改。 使用最低版本作为起点。</p></li><li><p>卸载映像或继续执行下一个过程。 若要卸载映像，请键入以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dism">Dism /Unmount-Image /MountDir:C:\test\offline /Commit<br></code></pre></td></tr></table></figure></li></ol><h3 id="更改为更高版本"><a href="#更改为更高版本" class="headerlink" title="更改为更高版本"></a>更改为更高版本</h3><ol><li><p>如果尚未装载，请装载映像：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Mount-Image /ImageFile:C:\test\images\install.wim /index:<span class="hljs-number">1</span> /MountDir:C:\test\offline<br></code></pre></td></tr></table></figure></li><li><p>使用 DISM 的 <code>Get-TargetEditions</code> 选项查找可以将映像更改为的 Windows 版本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Image:C:\test\offline /Get-TargetEditions<br></code></pre></td></tr></table></figure><p>记下要更改为的版本的 edition-ID。</p><p> 重要</p><p>不能将 Windows 映像设置为更低的版本。 运行 <code>/Get-TargetEditions</code> 选项时不会显示最低版本。 请勿对已更改为更高版本的映像执行此过程。</p></li><li><p>键入以下命令并指定 edition-ID，以将 Windows 映像更改为更高版本。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Image:C:\test\offline /<span class="hljs-built_in">Set</span>-Edition:Professional<br></code></pre></td></tr></table></figure></li><li><p>卸载映像并提交更改。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Unmount-Image /MountDir:C:\test\offline /Commit<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dism</tag>
      
      <tag>Wim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sysprep 命令行选项</title>
    <link href="/Wim/8ef5f3d7/"/>
    <url>/Wim/8ef5f3d7/</url>
    
    <content type="html"><![CDATA[<p>运行 Sysprep，以准备要被捕获的 Windows 安装。 本主题介绍系统准备 (Sysprep) 工具的命令行语法。</p><p>如果要为部署到其他计算机创建安装的映像，则必须结合 &#x2F;generalize 选项来运行 Sysprep 命令，即使另一台计算机具有相同的硬件配置也是如此。 sysprep &#x2F;generalize 命令 Windows 安装中删除独一无二的信息，以便你可以在其他计算机上安全地重用该映像。 在下次启动该 Windows 映像时，<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/specialize?view=windows-11">specialize</a> 配置传送会运行。</p><p> 重要</p><p>如果不运行 <code>Sysprep /generalize</code> 命令，则无法将 Windows 映像移动或复制到其他计算机。 无论使用映像、硬盘复制或其他方法，都必须使用 <code>Sysprep /generalize</code> 命令来通用化完整的 Windows 安装，然后才能将该安装用于部署到新计算机。</p><h2 id="Sysprep-语法"><a href="#Sysprep-语法" class="headerlink" title="Sysprep 语法"></a>Sysprep 语法</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Sysprep.exe [/oobe | /audit] [/generalize] [/<span class="hljs-built_in">mode</span>:vm] [/reboot | /shutdown | /quit] [/quiet] [/unattend:&lt;answerfile&gt;]<br></code></pre></td></tr></table></figure><p>下列命令行选项可用于 Sysprep：</p><h2 id="audit"><a href="#audit" class="headerlink" title="&#x2F;audit"></a>&#x2F;audit</h2><p>重新启动计算机进入审核模式。 审核模式使您可以将其他驱动程序或应用程序添加到 Windows。 在将 Windows 的安装发送到最终用户之前，还可以测试该安装。</p><p>例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Sysprep /audit<br></code></pre></td></tr></table></figure><p>如果指定应答文件，Windows 安装程序的审核模式会运行 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/auditsystem?view=windows-11">auditSystem</a> 和 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/audituser?view=windows-11">auditUser</a> 配置传送。</p><h2 id="generalize"><a href="#generalize" class="headerlink" title="&#x2F;generalize"></a>&#x2F;generalize</h2><p>准备要作为映像的 Windows 安装。 Sysprep 会从 Windows 安装删除所有独一无二的系统信息。 Sysprep 会重置安全 ID (SID)，清除任何系统还原点，并删除事件日志。 例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Sysprep /generalize /shutdown<br></code></pre></td></tr></table></figure><p>在下一次计算机启动时，<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/specialize?view=windows-11">specialize</a> 配置传送会运行。 该配置传送会创建新的安全 ID (SID)。</p><h2 id="oobe"><a href="#oobe" class="headerlink" title="&#x2F;oobe"></a>&#x2F;oobe</h2><p>将该计算机重启进入 OOBE 模式。 例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Sysprep /generalize /shutdown /oobe<br></code></pre></td></tr></table></figure><p>利用 OOBE，最终用户可以自定义他们的 Windows 操作系统，创建用户帐户，命名计算机，以及执行其他任务。 在 OOBE 启动前，Sysprep 会处理应答文件中 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/oobesystem?view=windows-11">oobeSystem</a> 配置传送中的所有设置。</p><h2 id="mode-vm"><a href="#mode-vm" class="headerlink" title="&#x2F;mode:vm"></a>&#x2F;mode:vm</h2><p>将虚拟硬盘 (VHD) 通用化，以便可以将该 VHD 部署为同一虚拟机 (VM) 或虚拟机监控程序上的 VHD。 在 VM 重启后，该 VM 可以启动到 OOBE。 例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Sysprep /generalize /oobe /<span class="hljs-built_in">mode</span>:vm<br></code></pre></td></tr></table></figure><p>适用于 VM 模式的其他开关只有 <code>/reboot</code>、<code>/shutdown</code>,和 <code>/quit</code>。 必须使用同一硬件配置文件在虚拟机 (VM) 或虚拟机监控程序上部署 VHD。 例如，如果在 Microsoft Hyper-V 中创建了 VHD，则只能将 VHD 部署到具有匹配的硬件配置文件的 Microsoft Hyper-V VM。 如果将该 VHD 部署到具有不同硬件配置文件的不同 VM，则可能会导致意外问题。</p><p> 重要</p><p>只能从 VM 内部运行 VM 模式。</p><h2 id="reboot"><a href="#reboot" class="headerlink" title="&#x2F;reboot"></a>&#x2F;reboot</h2><p>重启该计算机。 使用此选项审核计算机并验证首次运行体验是否正确工作。</p><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="&#x2F;shutdown"></a>&#x2F;shutdown</h2><p>在 <strong>Sysprep</strong> 命令完成运行后关闭计算机。</p><h2 id="quiet"><a href="#quiet" class="headerlink" title="&#x2F;quiet"></a>&#x2F;quiet</h2><p>运行 Sysprep 工具而不显示屏幕确认消息。 如果自动运行 Sysprep 工具，可以使用此选项。</p><h2 id="quit"><a href="#quit" class="headerlink" title="&#x2F;quit"></a>&#x2F;quit</h2><p>在 Sysprep 运行指定的命令后，关闭 Sysprep 工具，而不重启或关闭计算机。</p><h2 id="unattend"><a href="#unattend" class="headerlink" title="&#x2F;unattend:"></a>&#x2F;unattend:<answerfile></h2><p>在无人参与的安装过程中将应答文件中的设置应用到 Windows，其中 <code>&lt;answerfile&gt;</code> 指定要使用的应答文件的路径和文件名。 例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Sysprep /audit /reboot /unattend:F:\Unattend.xml<br></code></pre></td></tr></table></figure><p>其中 <code>F</code> 是应答文件 (Unattend.xml) 所在的便携式存储设备的驱动器号。</p>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dism</tag>
      
      <tag>Wim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DISM 驱动程序维护 (.inf) 命令行选项</title>
    <link href="/Wim/9fabbc04/"/>
    <url>/Wim/9fabbc04/</url>
    
    <content type="html"><![CDATA[<p>将 DISM 与 INF 样式驱动程序配合使用，以便对联机或脱机 Windows 映像 (.wim) 执行添加、删除或列出驱动程序的操作。 不支持 Microsoft Windows 安装程序或其他驱动程序包类型（例如 .exe 文件）。</p><p>可以指定驱动程序 INF 文件所在的目录，也可以通过指定 INF 文件的名称指向某个驱动程序。</p><p>使用 DISM 来维护 Windows 映像的基本语法为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe &#123;/Image:&lt;path_to_ image_directory&gt; | /Online&#125; [dism_global_options] &#123;servicing_option&#125; [&lt;servicing_argument&gt;]<br></code></pre></td></tr></table></figure><p>可对脱机映像使用以下驱动程序维护选项。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /image:&lt;path_to_image_directory&gt; [/Get-Drivers | /Get-DriverInfo | /Add-Driver | /Remove-Driver | /Export-Driver]<br></code></pre></td></tr></table></figure><p>可对正在运行的操作系统使用以下驱动程序维护选项。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /Online [/Get-Drivers | /Get-DriverInfo | /Export-Driver]<br></code></pre></td></tr></table></figure><h2 id="Get-Help"><a href="#Get-Help" class="headerlink" title="&#x2F;Get-Help &#x2F;?"></a>&#x2F;Get-Help &#x2F;?</h2><p>在驱动程序维护命令行选项之后立即使用时，将显示有关选项和参数的信息。 指定映像后，其他主题可能会变得可用。</p><p><strong>示例：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Add-Driver /?<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&lt;p&gt;&lt;strong&gt;Dism /online /Get-Drivers /?<br></code></pre></td></tr></table></figure><h2 id="Get-Drivers"><a href="#Get-Drivers" class="headerlink" title="&#x2F;Get-Drivers"></a>&#x2F;Get-Drivers</h2><p>显示有关联机或脱机映像中的驱动程序包的基本信息。</p><p>默认情况下，将仅列出第三方驱动程序。 使用 <code>/all</code> 参数显示有关默认驱动程序和第三方驱动程序的信息。 使用<code>/Format:Table</code> 或 <code>/Format:List</code> 或参数将输出显示为表格或列表。</p><p>如果指向映像，可以确定映像中的具体驱动程序，以及驱动程序（已安装的或暂存的）的状态。</p><p><strong>示例：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Get-Drivers<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /online /Get-Drivers<br></code></pre></td></tr></table></figure><h2 id="Get-DriverInfo"><a href="#Get-DriverInfo" class="headerlink" title="&#x2F;Get-DriverInfo"></a>&#x2F;Get-DriverInfo</h2><p>显示有关特定驱动程序包的详细信息。</p><p>语法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/Get-DriverInfo /Driver:&#123;&lt;installed_INF_FileName&gt;|&lt;path_to_driver.inf&gt;&#125;<br></code></pre></td></tr></table></figure><p>可以指向映像中安装的 INF 文件或尚未安装的 INF 文件。 可以在设备驱动程序存储中指定卸载的驱动程序或第三方驱动程序的名称。 驱动程序存储中已安装的第三方驱动程序将命名为 <code>Oem0.inf</code>、<code>Oem1.inf</code> 等。 这称为已发布的名称。</p><p>可以通过多次使用 <code>/driver</code> 选项在命令行中指定多个驱动程序。</p><p>示例：使用 <code>/Get-Drivers</code> 选项，以便可以标识驱动程序 INF 文件。 然后运行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Get-DriverInfo /driver:C:\Drivers\usb.inf<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /online /Get-DriverInfo /driver:C:\test\drivers\usb\usb.inf<br></code></pre></td></tr></table></figure><h2 id="Add-Driver"><a href="#Add-Driver" class="headerlink" title="&#x2F;Add-Driver"></a>&#x2F;Add-Driver</h2><p>将第三方驱动程序包添加到脱机 Windows 映像。</p><p>语法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/Add-Driver &#123;/Driver:&lt;folder_containing_INF&gt; | /Driver:&lt;path_to_driver.inf&gt;&#125; [/recurse] [/ForceUnsigned]<br></code></pre></td></tr></table></figure><ul><li><p><code>/Driver</code> 可以指向文件夹或单个 .inf 文件。</p><ul><li>使用 <code>/Driver</code> 选项指向文件夹时，将忽略属于无效驱动程序包的 INF 文件。 运行此命令时，这些文件在控制台上报告，日志文件中包含警告。 你不会收到错误消息。</li><li>如果指向某个路径并使用 <code>/Recurse</code> 选项，将查询所有子文件夹，以获取要添加的驱动程序。</li></ul></li><li><p>若要进行测试，可以使用 <code>/ForceUnsigned</code> 来添加未签名的驱动程序并重写安装在基于 X64 的计算机上的驱动程序必须具有数字签名的要求。 有关驱动程序签名要求的详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/device-drivers-and-deployment-overview?view=windows-11">设备驱动程序和部署概述</a>。</p></li></ul><p>示例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Add-Driver /driver:C:\test\drivers&lt;/strong&gt;<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Add-Driver /driver:C:\test\drivers /recurse<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Add-Driver /driver:C:\test\drivers\mydriver.inf<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Add-Driver /driver:C:\test\drivers\mydriver.inf /ForceUnsigned<br></code></pre></td></tr></table></figure><h2 id="Remove-Driver"><a href="#Remove-Driver" class="headerlink" title="&#x2F;Remove-Driver"></a>&#x2F;Remove-Driver</h2><p>从脱机映像中删除第三方驱动程序。</p><p>可以通过多次使用 <code>/Driver</code> 选项在命令行中指定多个驱动程序。</p><p>语法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/Remove-Driver /Driver:&lt;driver_file&gt;<br></code></pre></td></tr></table></figure><p>将第三方驱动程序添加到映像时，它们会被重命名为已发布的名称，如 <code>Oem0.inf</code>、<code>Oem1.inf</code> 等。 必须指定已发布的名称以删除驱动程序。 无法删除默认驱动程序。</p><p> 警告</p><p>删除启动关键型驱动程序包可能会使脱机 Windows 映像无法启动。</p><p><strong>示例：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image:C:\test\offline /Remove-Driver /driver:oem1.inf<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /image: C:\test\offline /Remove-Driver /driver:oem1.inf /driver:oem2.inf<br></code></pre></td></tr></table></figure><h2 id="Export-Driver"><a href="#Export-Driver" class="headerlink" title="&#x2F;Export-Driver"></a>&#x2F;Export-Driver</h2><p>将所有第三方驱动程序包从 Windows 映像导出到目标路径。 然后，可以通过运行 <code>DISM Add-Driver</code> 命令将导出的驱动程序注入到脱机映像。</p><p>语法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Export-Driver /Destination:&lt;destination_path&gt;<br></code></pre></td></tr></table></figure><ul><li><code>Destination</code> 是将要保存导出的驱动程序的位置。</li></ul><p><strong>示例：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM /Online /Export-Driver /Destination:C:\destpath<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM /Image:C\test\offline /Export-Driver /Destination:C:\destpath<br></code></pre></td></tr></table></figure><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li><p>驱动程序维护命令仅支持 .inf 文件。 不支持 Windows 安装程序或其他驱动程序包类型（例如 .exe 文件）。</p></li><li><p>驱动程序按照它们在命令行中的列出顺序进行安装。 在以下示例中，将依次安装 1.inf、2.inf 和 3.inf，这也是它们在命令行中的列出顺序。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Dism /Image:C:\test\offline /Add-Driver /Driver:C:\test\drivers\<span class="hljs-number">1</span>.inf /Driver:C:\test\drivers\<span class="hljs-number">2</span>.inf /Driver:C:\test\drivers\<span class="hljs-number">3</span>.inf<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dism</tag>
      
      <tag>Wim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DISM 预配包 (.ppkg) 命令行选项</title>
    <link href="/Wim/cd1d84dc/"/>
    <url>/Wim/cd1d84dc/</url>
    
    <content type="html"><![CDATA[<p>使用 DISM 处理预配包 (.ppkg) 文件。 例如，可以将设置和 Windows 桌面应用程序添加到 Windows，或减小 Windows 安装的大小。</p><h2 id="Add-ProvisioningPackage"><a href="#Add-ProvisioningPackage" class="headerlink" title="&#x2F;Add-ProvisioningPackage"></a>&#x2F;Add-ProvisioningPackage</h2><p>将预配包的适用有效负载添加到指定映像。</p><p><strong>语法</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /Add-ProvisioningPackage /PackagePath:&lt;package_path&gt; [/CatalogPath:&lt;<span class="hljs-built_in">path</span>&gt;]<br></code></pre></td></tr></table></figure><p>示例：</p><p>将预配包添加到<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/mount-and-modify-a-windows-image-using-dism?view=windows-11">已装载或已应用的映像</a>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /Image=D:\mount /Add-ProvisioningPackage /PackagePath:C:\oem.ppkg<br></code></pre></td></tr></table></figure><p>在正在运行的 Windows 安装中添加预配包：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /online /Add-ProvisioningPackage /PackagePath:C:\oem.ppkg<br></code></pre></td></tr></table></figure><h2 id="Get-ProvisioningPackageInfo"><a href="#Get-ProvisioningPackageInfo" class="headerlink" title="&#x2F;Get-ProvisioningPackageInfo"></a>&#x2F;Get-ProvisioningPackageInfo</h2><p>获取预配包的信息。</p><p><strong>语法</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /Get-ProvisioningPackageInfo /PackagePath:&lt;package_path&gt;<br></code></pre></td></tr></table></figure><p>示例：</p><p>从<a href="https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/mount-and-modify-a-windows-image-using-dism?view=windows-11">已装载或已应用的映像</a>中获取预配包信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /Image=C:\ /Get-ProvisioningPackageInfo /PackagePath:C:\oem.ppkg<br></code></pre></td></tr></table></figure><p>从正在运行的 Windows 安装中获取预配包信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /online /Get-ProvisioningPackageInfo /PackagePath:C:\oem.ppkg<br></code></pre></td></tr></table></figure><h2 id="Apply-CustomDataImage"><a href="#Apply-CustomDataImage" class="headerlink" title="&#x2F;Apply-CustomDataImage"></a>&#x2F;Apply-CustomDataImage</h2><p>冻结自定义数据映像中包含的文件以节省空间。 对于客户端版本，一键恢复工具使用此包。</p><p><strong>语法</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/Apply-CustomDataImage /CustomDataImage:&lt;path_to_image_file&gt; /ImagePath:&lt;target_drive&gt; /SingleInstance<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&#x2F;CustomDataImage</td><td align="left">指定预配包的存储位置。</td></tr><tr><td align="left">&#x2F;ImagePath</td><td align="left">指定包含 Windows 映像的驱动器。 DISM 扫描此驱动器以查找驱动器上的任何非系统文件，并将它们引入预配包中。</td></tr><tr><td align="left">&#x2F;SingleInstance</td><td align="left">DISM 将非系统文件捕获到压缩预配包后，会将驱动器上的指针添加到新的压缩预配包，并删除原始文件。 因此，文件仍对系统可见，但占用的驱动器空间较少。</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DISM.exe /Apply-CustomDataImage /CustomDataImage:C:\oem.ppkg /ImagePath:C:\ /SingleInstance<br></code></pre></td></tr></table></figure><p>仅适用于桌面版（家庭版、专业版、企业版和教育版）。</p>]]></content>
    
    
    <categories>
      
      <category>Wim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dism</tag>
      
      <tag>Wim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何优雅的给Docker配置网络代理</title>
    <link href="/Linux-Web/2acdf751/"/>
    <url>/Linux-Web/2acdf751/</url>
    
    <content type="html"><![CDATA[<p>有时因为网络原因，比如公司 NAT，或其它啥的，需要使用代理。<code>Docker</code> 的代理配置，略显复杂，因为有三种场景。但基本原理都是一致的，都是利用 <code>Linux</code> 的 <code>http_proxy</code> 等环境变量。</p><h3 id="Dockerd-代理"><a href="#Dockerd-代理" class="headerlink" title="Dockerd 代理"></a><strong>Dockerd 代理</strong></h3><p>在执行 <code>docker pull</code> 时，是由守护进程 <code>dockerd</code> 来执行。因此，代理需要配在 <code>dockerd</code> 的环境中。而这个环境，则是受 <code>systemd</code> 所管控，因此实际是 <code>systemd</code> 的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> /etc/systemd/system/docker.service.d/proxy.conf<br></code></pre></td></tr></table></figure><p>在这个 <code>proxy.conf</code> 文件（可以是任意<code>*.conf</code>的形式）中，添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>proxy.example.com:8080</code> 要换成可用的免密代理。通常使用 <code>cntlm</code> 在本机自建免密代理，去对接公司的代理。可参考《Linux下安装配置Cntlm 代理》。</p><h3 id="Container-代理"><a href="#Container-代理" class="headerlink" title="Container 代理"></a><strong>Container 代理</strong></h3><p>在容器运行阶段，如果需要代理上网，则需要配置 <code>~/.docker/config.json</code> 。以下配置，只在Docker 17.07及以上版本生效。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span><br> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;httpProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://proxy.example.com:8080&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;httpsProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://proxy.example.com:8080&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;noProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost,127.0.0.1,.example.com&quot;</span><br>   <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个是用户级的配置，除了 <code>proxies</code>，<code>docker login</code> 等相关信息也会在其中。而且还可以配置信息展示的格式、插件参数等。</p><p>此外，容器的网络代理，也可以直接在其运行时通过 <code>-e</code> 注入 <code>http_proxy</code> 等环境变量。这两种方法分别适合不同场景。<code>config.json</code> 非常方便，默认在所有配置修改后启动的容器生效，适合个人开发环境。在CI&#x2F;CD的自动构建环境、或者实际上线运行的环境中，这种方法就不太合适，用 <code>-e</code> 注入这种显式配置会更好，减轻对构建、部署环境的依赖。当然，在这些环境中，最好用良好的设计避免配置代理上网。</p><h3 id="Docker-Build-代理"><a href="#Docker-Build-代理" class="headerlink" title="Docker Build 代理"></a><strong>Docker Build 代理</strong></h3><p>虽然 <code>docker build</code> 的本质，也是启动一个容器，但是环境会略有不同，用户级配置无效。在构建时，需要注入 <code>http_proxy</code> 等参数。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker build . <span class="hljs-string">\</span><br>    --build-arg <span class="hljs-string">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span> <span class="hljs-string">\</span><br>    --build-arg <span class="hljs-string">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span> <span class="hljs-string">\</span><br>    --build-arg <span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span> <span class="hljs-string">\</span><br>    -t your/image:tag<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：无论是 <code>docker run</code> 还是 <code>docker build</code>，默认是网络隔绝的。如果代理使用的是 <code>localhost:3128</code> 这类，则会无效。这类仅限本地的代理，必须加上 <code>--network host</code> 才能正常使用。而一般则需要配置代理的外部IP，而且代理本身要开启 Gateway 模式。</p><h3 id="重启生效"><a href="#重启生效" class="headerlink" title="重启生效"></a><strong>重启生效</strong></h3><p>代理配置完成后，<code>reboot</code> 重启当然可以生效，但不重启也行。</p><p><code>docker build</code> 代理是在执行前设置的，所以修改后，下次执行立即生效。Container 代理的修改也是立即生效的，但是只针对以后启动的 Container，对已经启动的 Container 无效。</p><p><code>dockerd</code> 代理的修改比较特殊，它实际上是改 <code>systemd</code> 的配置，因此需要重载 <code>systemd</code> 并重启 <code>dockerd</code> 才能生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h3><ul><li>Control Docker with systemd | Docker Documentation</li><li>Configure Docker to use a proxy server | Docker Documentation</li><li>Use the Docker command line | Docker Documentation</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux,Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Server【开机启动和任务计划程序】实现服务器重启后项目自启动</title>
    <link href="/Win/433fe59d/"/>
    <url>/Win/433fe59d/</url>
    
    <content type="html"><![CDATA[<h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h3><p>有些时候我们希望计算机开机后就启动一些服务或应用程序。</p><h3 id="2-开机启动"><a href="#2-开机启动" class="headerlink" title="2.开机启动"></a>2.开机启动</h3><p>使用 <code>Win+R</code> 调出运行，输入：</p><p>1️⃣ shell:startup 用户开机自启动（程序开机自启动只针对当前登录的用户）<br>打开的目录为 <code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p><p>2️⃣ shell:common startup 系统开机自启动（程序开机自启动针对所有用户）<br>打开的目录为<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></p><p>将要启动的应用程序快捷方式放到打开的文件夹下即可。</p><h3 id="3-任务计划程序"><a href="#3-任务计划程序" class="headerlink" title="3.任务计划程序"></a>3.任务计划程序</h3><p>使用 <code>Win+R</code> 输入 <code>taskschd.msc</code> 启动任务计划程序。以下示例是不登录就可以执行任务，这里要特别注意选择<code>不管用户是否登录都要运行</code>：</p><p><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/5c06d55592604b97b57642f893c1c65a.png" alt="在这里插入图片描述"><br>添加<a href="https://so.csdn.net/so/search?q=%E8%A7%A6%E5%8F%91%E5%99%A8&spm=1001.2101.3001.7020">触发器</a>，这里根据需要进行选择：</p><p><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/23b1cce122624bac955ae1ed50d5540b.png" alt="在这里插入图片描述"><br>操作要特别注意<code>起始于</code>要输入脚本所在的文件夹，否则任务计划不能执行：</p><p><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/5380d41c12404077bfa90816991102b8.png" alt="在这里插入图片描述"><br>条件和设置根据需要进行配置：</p><p><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/462d46a8f1c54ae99087e93f46fde52c.png" alt="在这里插入图片描述"><br><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/6098ee8bd25a45f48e09bf25cb4b4f10.png" alt="在这里插入图片描述"><br>最终确认时，由于第一步选择了<code>不管用户是否登录都要运行</code>这里需要输入密码：</p><p><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/daac33abb8ea404c9b46f00e12816998.png" alt="在这里插入图片描述"></p><p>添加成功：</p><p><img src="/./../images/Windows-Server%E3%80%90%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E3%80%91%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%E5%90%8E%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%90%AF%E5%8A%A8/01cdd32463024057afb4c460bce98307.png" alt="在这里插入图片描述"><br>重启计算机即可实现任务计划程序的执行。</p>]]></content>
    
    
    <categories>
      
      <category>Win</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[家用显卡虚拟化] Hyper-V 配置 GPU 分区</title>
    <link href="/Win/54d146a5/"/>
    <url>/Win/54d146a5/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一段时间在搞 <a href="https://evepc.163.com/">EVE Online</a> 的脚本，而由于一个脚本程序在单台电脑上只支持开到最多15个端，故决定使用虚拟机。由于如果没有图形设备的话游戏根本跑不起来，vmware的3D加速功能性能实在堪忧，服务器只装了一张GT710，虚拟化之后完全带不动游戏，直通的方案也是同样的问题：只有一张显卡，没法分给多个虚拟机使用，于是最后决定使用Hyper-V的GPU分区（GPU-PV）功能</p><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><p>硬件方面用的是之前捡来的DL360p Gen8，两颗E5-2670 V2，8G x4内存加上一张GT710，<del>算是废物利用了</del>没什么好说的，唯一需要注意的一点是HP的服务器如果PCI-E插槽插了什么非HPE设备的话会导致风扇转速提升（其他品牌的服务器我不清楚，但大概率也会有相同的问题），服务器放在机柜里的话基本不用在意这些，当然了，如果你很在意这个问题并且你和我一样使用的是HP Gen8服务器，可以参考<a href="https://www.reddit.com/r/homelab/comments/hix44v/silence_of_the_fans_pt_2_hp_ilo_4_273_now_with/">iLO Fan Hack</a></p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>我的虚拟机和宿主机使用的都是Windows 10 21H1版本，理论上20H2和Windows11应该都是可以的，但我没试过，至于判断的标准很简单，win+r运行dxdiag，显示-驱动程序-驱动程序模型：WDDM版本≥2.7即可</p><p>ps. Windows server 2019 就是1809版本，故不支持GPU-P功能</p><p>但是实际运行来看最好是要保证宿主机和虚拟机的系统版本一致，不然也会报错</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>根据正常操作流程安装Hyper-V，创建好交换机和虚拟机，关闭虚拟机的检查点功能之后用管理员权限打开PowerShell，运行下面的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs powershell">**<span class="hljs-variable">$vm</span>** = <span class="hljs-string">&quot;你的虚拟机名称&quot;</span><br><br><span class="hljs-built_in">Remove-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>**<br><br><span class="hljs-built_in">Add-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>**<br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MinPartitionVRAM</span> <span class="hljs-number">1</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MaxPartitionVRAM</span> <span class="hljs-number">11</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-OptimalPartitionVRAM</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MinPartitionEncode</span> <span class="hljs-number">1</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MaxPartitionEncode</span> <span class="hljs-number">11</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-OptimalPartitionEncode</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MinPartitionDecode</span> <span class="hljs-number">1</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MaxPartitionDecode</span> <span class="hljs-number">11</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-OptimalPartitionDecode</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MinPartitionCompute</span> <span class="hljs-number">1</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-MaxPartitionCompute</span> <span class="hljs-number">11</span><br><br><span class="hljs-built_in">Set-VMGpuPartitionAdapter</span> <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>** <span class="hljs-literal">-OptimalPartitionCompute</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">Set-VM</span> <span class="hljs-literal">-GuestControlledCacheTypes</span> **<span class="hljs-variable">$true</span>** <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>**<br><br><span class="hljs-built_in">Set-VM</span> <span class="hljs-literal">-LowMemoryMappedIoSpace</span> <span class="hljs-number">1</span>Gb <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>**<br><br><span class="hljs-built_in">Set-VM</span> <span class="hljs-literal">-HighMemoryMappedIoSpace</span> <span class="hljs-number">32</span>GB <span class="hljs-literal">-VMName</span> **<span class="hljs-variable">$vm</span>**<br><br><span class="hljs-built_in">Start-VM</span> <span class="hljs-literal">-Name</span> **<span class="hljs-variable">$vm</span>**<br></code></pre></td></tr></table></figure><p>运行完成之后等待虚拟机开机，连接上之后进入设备管理器查看显卡是否已经能被识别，由于Nvidia屏蔽了家用显卡（AMD应该也屏蔽了，但我手上没有AMD的卡故没有测试）的虚拟化功能，所以此时虽然已经可以在设备管理器看到显卡已被正确识别，但仍然无法安装驱动，必须要手动复制宿主机的以下驱动文件到虚拟机上：</p><p>先将</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>\<span class="hljs-title">nvapi64.dll</span></span><br></code></pre></td></tr></table></figure><p>复制到System32文件夹中，再创建</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>\<span class="hljs-title">HostDriverStore</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>\<span class="hljs-title">HostDriverStore</span>\<span class="hljs-title">FileRepository</span></span><br></code></pre></td></tr></table></figure><p>两个文件夹，在宿主机里打开设备管理器找到显卡-驱动-驱动程序详细信息，拉到最下面</p><p><img src="/./../images/%E5%AE%B6%E7%94%A8%E6%98%BE%E5%8D%A1%E8%99%9A%E6%8B%9F%E5%8C%96-Hyper-V%E9%85%8D%E7%BD%AEGPU%E5%88%86%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2021-07-14-170946.png" alt="img"></p><p>找到一个nv开头的文件夹，在</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>\<span class="hljs-title">DriverStore</span>\<span class="hljs-title">FileRepository</span></span><br></code></pre></td></tr></table></figure><p>文件夹中找到这个文件夹，复制到虚拟机上面刚创建的\FileRepository 文件夹内，重启虚拟机，打开设备管理器可以看到显卡已经可以正确识别并工作了</p><p><img src="/./../images/%E5%AE%B6%E7%94%A8%E6%98%BE%E5%8D%A1%E8%99%9A%E6%8B%9F%E5%8C%96-Hyper-V%E9%85%8D%E7%BD%AEGPU%E5%88%86%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2021-07-14-171251.png" alt="img"></p><p>运行dxdiag，在呈现一栏可以再检查一下设备是否正常运转</p><p><img src="/./../images/%E5%AE%B6%E7%94%A8%E6%98%BE%E5%8D%A1%E8%99%9A%E6%8B%9F%E5%8C%96-Hyper-V%E9%85%8D%E7%BD%AEGPU%E5%88%86%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2021-07-14-171419.png" alt="img"></p><p>ps. 不要使用Hyper-V的增强会话进行连接，增强会话模式会禁用Direct3D 加速，宿主机驱动更新之后要同步把文件再拷贝到虚拟机一次，不然会报错</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>刚弄好还没试过，感官上感觉基本没什么性能损耗</p><p><img src="/./../images/%E5%AE%B6%E7%94%A8%E6%98%BE%E5%8D%A1%E8%99%9A%E6%8B%9F%E5%8C%96-Hyper-V%E9%85%8D%E7%BD%AEGPU%E5%88%86%E5%8C%BA/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2021-07-14-171743.png" alt="img"></p><p>EVE特效全低再64fps左右，宿主机显卡占用到54%，基本是710的性能了</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>为什么不用RemoteFX</p><p>RemoteFX由于存在安全漏洞已被Microsoft移除：<a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-1036">CVE-2020-1036</a> <a href="https://support.microsoft.com/en-us/topic/kb4570006-update-to-disable-and-remove-the-remotefx-vgpu-component-in-windows-bbdf1531-7188-2bf4-0de6-641de79f09d2">KB4570006</a></p><p>并且RemoteFX存在显存分配上的bug，最高256MiB的显存只能拿来跑分</p>]]></content>
    
    
    <categories>
      
      <category>Win</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win</tag>
      
      <tag>Hyper-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux——shell脚本的传参方式</title>
    <link href="/Linux/924629c4/"/>
    <url>/Linux/924629c4/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>对于逻辑较为复杂的shell脚本来说，脚本的执行逻辑需要结合我们传入的参数来解析运行。本文将对shell脚本中传参方式进行介绍，内容不多，希望对各位读者有所帮助。</p></blockquote><h4 id="方式一：直接在脚本后面输入参数值，多个参数间用空格隔开"><a href="#方式一：直接在脚本后面输入参数值，多个参数间用空格隔开" class="headerlink" title="方式一：直接在脚本后面输入参数值，多个参数间用空格隔开"></a>方式一：直接在脚本后面输入参数值，多个参数间用空格隔开</h4><p>这种方式需要和<code>$@</code>、<code>$n</code>这些特殊变量相结合来使用，具体做法可以参考我的这篇文章：<a href="https://www.jianshu.com/p/d19a41f7197c">linux——shell脚本中关于$和特殊变量的使用细节</a></p><p>下面我们用一个小案例来进行演示，我们希望脚本能将我们传入的所有变量都进行打印输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;------------&#x27;</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this param value is <span class="hljs-variable">$var</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>执行脚本，脚本中传入了三个参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sh test<span class="hljs-selector-class">.sh</span> aa bb cc<br></code></pre></td></tr></table></figure><p>结果如下，可以看到我们的入参都被完整打印出来了：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">------------<br><span class="hljs-keyword">this</span> param <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> aa<br><span class="hljs-keyword">this</span> param <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> bb<br><span class="hljs-keyword">this</span> param <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> cc<br>------------`<br></code></pre></td></tr></table></figure><h4 id="方式二：使用getopts命令来获取参数"><a href="#方式二：使用getopts命令来获取参数" class="headerlink" title="方式二：使用getopts命令来获取参数"></a>方式二：使用<code>getopts</code>命令来获取参数</h4><p>getopts是一个解析脚本选项参数的工具，也是shell 内置的命令，一般用在循环中。每当执行循环是，getopts都会检查下一个命令选项，如果这些选项出现在option中，则表示是合法选项，否则不是合法选项。并将这些合法选项保存在VARIABLE这个变量中。</p><blockquote><p><strong>语法：getopts optstring argName</strong> 【optstring ： [option[:]] [DESCPRITION]】<br>（1）optstring：表示为某个脚本可以使用的选项，比如”abc”，说明一共支持<code>a</code>，<code>b</code>，<code>c</code>三个选项<br>（2）若optstring前面存在单个冒号<code>:</code>，则表示是<strong>静默模式，忽略一般错误信息</strong><br>（3）<code>:</code>：如果某个选项(option)后面出现了单个冒号(“:”)，则表示这个选项后面必须要加上参数。选项和参数之间可以不用空格分隔，当然了建议脚本输入的时候还是有空格分隔会好一点。<br>（4）argName：表示将某个选项保存在变量argName中</p></blockquote><h6 id="getopts的内置变量"><a href="#getopts的内置变量" class="headerlink" title="getopts的内置变量"></a><code>getopts</code>的内置变量</h6><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>OPTARG</td><td>就是将选项后面的参数(或者描述信息DESCPRITION)保存在这个变量当中。</td></tr><tr><td>OPTIND</td><td>这个表示命令行的下一个选项或参数的索引(文件名不算选项或参数)</td></tr></tbody></table><h5 id="小案例一：getops初使用和静默模式的应用"><a href="#小案例一：getops初使用和静默模式的应用" class="headerlink" title="小案例一：getops初使用和静默模式的应用"></a>小案例一：getops初使用和静默模式的应用</h5><p>语法说的有点多，我们不妨先用一个例子来演示一下，以下脚本的主要逻辑是，通过<code>getops</code>语法来获取用户传入的所有参数，且我们预定的参数需要在<code>a</code>、<code>b</code>、<code>c</code>三者之间存在，对于匹配到的选项，我们会对其参数进行打印，顺便打印一下下一个参数的位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;------------&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;ab:c:&quot;</span> optname<br>     <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$optname</span>&quot;</span> <span class="hljs-keyword">in</span><br>            <span class="hljs-string">&quot;a&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;opt a is catched&quot;</span><br>            ;;<br>            <span class="hljs-string">&quot;b&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;opt b is catched.param is <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>            <span class="hljs-string">&quot;c&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;opt c is catched.param is <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>            <span class="hljs-string">&quot;*&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;unknow opt name&quot;</span><br>            ;;<br>        <span class="hljs-keyword">esac</span><br>    <span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;------------&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="执行脚本sh-test-sh-asdf，结果如下："><a href="#执行脚本sh-test-sh-asdf，结果如下：" class="headerlink" title="执行脚本sh test.sh -asdf，结果如下："></a>执行脚本<code>sh test.sh -asdf</code>，结果如下：</h6><p>可以看到，第一个参数<code>a</code>可以成功被识别出来，后续的<code>sdf</code>虽然连在一起，但还是被识别成<code>s</code>，<code>d</code>，<code>f</code>这几个不同的选项，又因为这几个选项不再我们定义的脚本范围内，所以直接报了错误出来。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">------------<br>current opt idx is <span class="hljs-number">1</span><br>opt <span class="hljs-selector-tag">a</span> is catched<br>test<span class="hljs-selector-class">.sh</span>: illegal option -- s<br>test.sh: illegal option -- d<br>test.sh: illegal option -- f<br>------------<br></code></pre></td></tr></table></figure><p>我们把原来的<code>ab:c:</code>改为<code>:ab:c:</code>，再执行一次脚本<code>sh test.sh -asdf</code>，结果如下。我们可以发现由于我们在<code>optstring</code>前面加上了冒号，所以因参数不合法的错误就不会再展示出来了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">------------<br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>opt a <span class="hljs-keyword">is</span> catched<br>------------<br></code></pre></td></tr></table></figure><h5 id="案例二：选项和参数的正确传入"><a href="#案例二：选项和参数的正确传入" class="headerlink" title="案例二：选项和参数的正确传入"></a>案例二：选项和参数的正确传入</h5><p>我们这里还是用上个案例的脚本内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;------------&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;ab:c:&quot;</span> optname<br>     <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$optname</span>&quot;</span> <span class="hljs-keyword">in</span><br>            <span class="hljs-string">&quot;a&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;opt a is catched&quot;</span><br>            ;;<br>            <span class="hljs-string">&quot;b&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;opt b is catched.param is <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>            <span class="hljs-string">&quot;c&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;opt c is catched.param is <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>            <span class="hljs-string">&quot;*&quot;</span>)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;current opt idx is <span class="hljs-variable">$OPTIND</span>&quot;</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;unknow opt name&quot;</span><br>            ;;<br>        <span class="hljs-keyword">esac</span><br>    <span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;------------&#x27;</span><br></code></pre></td></tr></table></figure><p>执行脚本<code>sh test.sh a -b 1 -c 2</code>，执行结果如下。可以看到，<strong>若首个选项前面没有加<code>-</code>，后面的选项无法被正常解析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">------------<br>------------<br></code></pre></td></tr></table></figure><p>执行脚本<code>sh test.sh -a -b 1 -c 2</code>，执行结果如下。可以看到，现在参数可以被正常打印出来了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">------------</span><br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">2</span><br>opt a <span class="hljs-keyword">is</span> catched<br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">4</span><br>opt b <span class="hljs-keyword">is</span> catched.param <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">6</span><br>opt c <span class="hljs-keyword">is</span> catched.param <span class="hljs-keyword">is</span> <span class="hljs-number">2</span><br><span class="hljs-operator">------------</span><br></code></pre></td></tr></table></figure><p>执行脚本<code>sh test.sh -a1 -b2 -c3</code>，结果如下。可以看到，选项和参数之前没有空格，也是可以正常被解析出来的。若选项为无需参数的选项，则会自动把后面跟着的参数识别为选项进行校验。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">------------</span><br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>opt a <span class="hljs-keyword">is</span> catched<br>test.sh: illegal option <span class="hljs-operator">--</span> <span class="hljs-number">1</span><br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">3</span><br>opt b <span class="hljs-keyword">is</span> catched.param <span class="hljs-keyword">is</span> <span class="hljs-number">2</span><br>current opt idx <span class="hljs-keyword">is</span> <span class="hljs-number">4</span><br>opt c <span class="hljs-keyword">is</span> catched.param <span class="hljs-keyword">is</span> <span class="hljs-number">3</span><br><span class="hljs-operator">------------</span><br></code></pre></td></tr></table></figure><h4 id="方式三：使用getopt进行传参"><a href="#方式三：使用getopt进行传参" class="headerlink" title="方式三：使用getopt进行传参"></a>方式三：使用<code>getopt</code>进行传参</h4><p><code>getopt</code>和方式二提到的<code>getopts</code>关键字咋一看挺像的，但两个关键字还是有区别的。</p><ul><li>区别1：<code>getopts</code>是bash内置的命令，而<code>getopt</code>是一个外部的命令，不同的linux版本的通常会自带</li><li>区分2：<code>getopts</code>不支持长命令（例如：–list这种语法），而<code>getopt</code>支持，且后者支持更加复杂的语法。</li></ul><table><thead><tr><th>简写</th><th>全写</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>–alternative</td><td>允许长选项以 - 开始</td></tr><tr><td>-h</td><td>–help</td><td>帮助，用法指南</td></tr><tr><td>-l</td><td>–longoptions &lt;长选项&gt;</td><td>要识别的长选项</td></tr><tr><td>-n</td><td>–name &lt;程序名&gt;</td><td>将错误报告给的程序名</td></tr><tr><td>-o</td><td>–options &lt;选项字符串&gt;</td><td>要识别的短选项</td></tr><tr><td>-q</td><td>–quiet</td><td>禁止 getopt(3) 的错误报告</td></tr><tr><td>-Q</td><td>–quiet-output</td><td>无正常输出</td></tr><tr><td>-s</td><td>–shell <shell></td><td>设置 shell 引用规则</td></tr></tbody></table><h5 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h5><p><code>getopt</code>的用法稍微要比<code>getopts</code>复杂一些，我们做一个小案例，脚本中定义六个选项，其中<code>a b c</code>为短选项，<code>test1 test2 test3</code>为长选项，且<code>a，test1</code>不需要参数，<code>b,test2</code>需要参数，<code>c,test3</code>有一个可选参数。<br>我们在脚本中把输入的参数进行打印输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;origin param is <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-comment"># -o或者-option 后面跟着的是短选项; --long后面跟着的是长选项，选项名之间使用逗号隔开</span><br><span class="hljs-comment"># 选项后面不加&quot;:&quot;表示不需要参数,选项后面有一个&quot;:&quot;表示必须有参数,选项后面有2个&quot;:&quot;表示后面跟着一个可选选项</span><br><span class="hljs-comment"># -n 选项后面跟着解析错误时提示的脚本名称</span><br>preExecute=`getopt -o ab:c:: --long test1,test2:,test3:: -n <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span> -- <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>`<br><span class="hljs-keyword">if</span> [ $? != 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;脚本解析失败...&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;preExecute=<span class="hljs-variable">$preExecute</span>&quot;</span><br><br><span class="hljs-comment"># set命令将规范化后的命令参数分配到位置参数 $1 $2上面</span><br><span class="hljs-built_in">eval</span> <span class="hljs-built_in">set</span> -- <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;preExecute&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;formatetd parameters=[<span class="hljs-variable">$@</span>]&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>        -a | --test1)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;option is a or test1&quot;</span><br>        <span class="hljs-built_in">shift</span><br>        ;;<br>        -b | --test2)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;option is b or test2,and param is <span class="hljs-variable">$2</span>&quot;</span><br>        <span class="hljs-built_in">shift</span> 2<br>        ;;<br>        -c | --test3)<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span> <span class="hljs-keyword">in</span><br>            <span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;option c or test3, and not param&quot;</span><br>                <span class="hljs-built_in">shift</span> 1<br>                ;;<br>            *)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;option c or test3, param is <span class="hljs-variable">$2</span>&quot;</span><br>                <span class="hljs-built_in">shift</span> 2<br>                ;;<br>            <span class="hljs-keyword">esac</span><br>            ;;<br>        --)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shift&quot;</span><br>            <span class="hljs-built_in">shift</span><br>            <span class="hljs-built_in">break</span>;<br>            ;;<br>        *)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Internal error!!!&quot;</span><br>            <span class="hljs-built_in">exit</span> 1<br>            ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=====================&quot;</span><br></code></pre></td></tr></table></figure><p>这里再解释一下脚本的一些比较特别的语法。</p><ul><li><strong>set 作用</strong><br>要在脚本中使用getopt。首先，要用getopt命令生成格式化后的版本来替换已有的命令行选项和参数。需要用到set命令。set命令能够处理shell中的各种变量。set命令的双破折线（–）选项，效果是将命令行参数替换成set命令的参数值。$@符号是代表输入参数字符串。</li><li><strong>shift作用</strong><br>shift的特性是将参数向前挪移一步，比如<code>$1:a $2:b $3:c</code>，此时shift 1，则<code>$1:b $2:c</code>。</li></ul><p>脚本执行结果如下，可以看到脚本的参数都可以正常的打印出来</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@10-60-159-92 testssh</span>]<span class="hljs-meta"># sh test.sh -a -b &#x27;hello&#x27; -cword --test1 --test2=hello --test3=word</span><br>=====================<br>origin param <span class="hljs-keyword">is</span> -a -b hello -cword --test1 --test2=hello --test3=word<br>preExecute= -a -b <span class="hljs-string">&#x27;hello&#x27;</span> -c <span class="hljs-string">&#x27;word&#x27;</span> --test1 --test2 <span class="hljs-string">&#x27;hello&#x27;</span> --test3 <span class="hljs-string">&#x27;word&#x27;</span> --<br>formatetd parameters=[-a -b hello -c word --test1 --test2 hello --test3 word --]<br>option <span class="hljs-keyword">is</span> a <span class="hljs-keyword">or</span> test1<br>option <span class="hljs-keyword">is</span> b <span class="hljs-keyword">or</span> test2,<span class="hljs-keyword">and</span> param <span class="hljs-keyword">is</span> hello<br>option c <span class="hljs-keyword">or</span> test3, param <span class="hljs-keyword">is</span> word<br>option <span class="hljs-keyword">is</span> a <span class="hljs-keyword">or</span> test1<br>option <span class="hljs-keyword">is</span> b <span class="hljs-keyword">or</span> test2,<span class="hljs-keyword">and</span> param <span class="hljs-keyword">is</span> hello<br>option c <span class="hljs-keyword">or</span> test3, param <span class="hljs-keyword">is</span> word<br>shift<br>=====================<br></code></pre></td></tr></table></figure><p>个人感觉，如果脚本不需要比较复杂的逻辑的话，建议使用<code>getopt</code>命令就行了~</p><h4 id="总结——三种方式的优缺点"><a href="#总结——三种方式的优缺点" class="headerlink" title="总结——三种方式的优缺点"></a>总结——三种方式的优缺点</h4><p>个人觉得三种传参的方式各有优点<br>（1）<strong>方式一简单易用，但灵活性不足</strong>，但个人觉得使用方式一的前提是脚本的执行人员本身很熟悉脚本的内容，不然很容易出现传参错误、遗漏的问题。同时对于参数传递的顺序不可以轻易的变化，否则也容易有问题。<br>（2）<strong>方式二执行时需要手动指定参数</strong>。虽然繁琐了一点但入参清晰，脚本的维护性会更好，而且语法也比较好学，个人比较推荐使用这种方式来传参<br>（3）<strong>方式三功能最强大，但语法相对麻烦一点</strong>，如果是复杂的脚本逻辑，推荐使用方式三来解决，如果不复杂，方式二可能会是更好的选择。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><strong>Shell系统学习之向Shell脚本传递参数：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/MashiMaroJ/article/details/125583142">https://blog.csdn.net/MashiMaroJ/article/details/125583142</a><br>执行shell脚本传递参数的方式：<a href="https://www.jianshu.com/p/cee95826fab1">https://www.jianshu.com/p/cee95826fab1</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mihomo 内核适配 Clash for Windows / Clash Verge</title>
    <link href="/Linux/a5210e09/"/>
    <url>/Linux/a5210e09/</url>
    
    <content type="html"><![CDATA[<p><img src="/./../images/Mihomo%E5%86%85%E6%A0%B8%E9%80%82%E9%85%8DClashforWindows-ClashVerge/e002892f366d8cb0228483dc74cb7c3c.webp" alt="Mihomo 内核适配 Clash for Windows / Clash Verge"></p><p>原版 Clash 内核的 Http 混淆默认 UA 为 Go-http-client&#x2F;1.1 ，如果开启了 Http 混淆（shadowsocks + v2ray-plugin）会被精准打击，切换修改 UA 的内核（Mihomo）可以解决这个问题。</p><p>原版 Clash 内核已经不维护了，建议切换到新分支 <a href="https://github.com/MetaCubeX/mihomo">Mihomo</a> 内核。</p><p>目前 Windows平台 <a href="https://github.com/2dust/clashN">clashN</a> 和 Mac平台 <a href="https://github.com/MetaCubeX/ClashX.Meta">ClashX.Meta</a> 是原生支持 Mihomo 内核的 Clash GUI，可以直接使用。</p><p>Mihomo 内核原版编译的二进制执行文件无法直接替换 Clash for Windows &#x2F; Clash Verge 的 Clash 内核。查看源码后，发现 Mihomo 内核加载配置目录与原版 Clash 内核不同，修改一下即可替换。</p><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p>在 <strong>main.go</strong> 中修改 <strong>init()</strong> 函数：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">// 获取用户主目录</span><br>    userHomeDir, err := os.UserHomeDir()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Error getting user home directory:&quot;</span>, err)<br>        os.Exit(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 设置默认的配置目录值</span><br>    defaultConfigDir := filepath.Join(userHomeDir, <span class="hljs-string">&quot;.config&quot;</span>, <span class="hljs-string">&quot;clash&quot;</span>)<br><br>    flag.StringVar(&amp;homeDir, <span class="hljs-string">&quot;d&quot;</span>, defaultConfigDir, <span class="hljs-string">&quot;set configuration directory&quot;</span>)<br>    flag.StringVar(&amp;configFile, <span class="hljs-string">&quot;f&quot;</span>, os.Getenv(<span class="hljs-string">&quot;CLASH_CONFIG_FILE&quot;</span>), <span class="hljs-string">&quot;specify configuration file&quot;</span>)<br>    flag.StringVar(&amp;externalUI, <span class="hljs-string">&quot;ext-ui&quot;</span>, os.Getenv(<span class="hljs-string">&quot;CLASH_OVERRIDE_EXTERNAL_UI_DIR&quot;</span>), <span class="hljs-string">&quot;override external ui directory&quot;</span>)<br>    flag.StringVar(&amp;externalController, <span class="hljs-string">&quot;ext-ctl&quot;</span>, os.Getenv(<span class="hljs-string">&quot;CLASH_OVERRIDE_EXTERNAL_CONTROLLER&quot;</span>), <span class="hljs-string">&quot;override external controller address&quot;</span>)<br>    flag.StringVar(&amp;secret, <span class="hljs-string">&quot;secret&quot;</span>, os.Getenv(<span class="hljs-string">&quot;CLASH_OVERRIDE_SECRET&quot;</span>), <span class="hljs-string">&quot;override secret for RESTful API&quot;</span>)<br>    flag.BoolVar(&amp;geodataMode, <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;set geodata mode&quot;</span>)<br>    flag.BoolVar(&amp;version, <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;show current version of mihomo&quot;</span>)<br>    flag.BoolVar(&amp;testConfig, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;test configuration and exit&quot;</span>)<br>    flag.Parse()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><ul><li>需要安装 golang make</li></ul><p>执行编译命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><h2 id="替换内核"><a href="#替换内核" class="headerlink" title="替换内核"></a>替换内核</h2><h3 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h3><ol><li>将编译的内核重命名为 <strong>clash-win64.exe</strong></li><li>关闭 Clash for Windows，解压下载文件后替换原内核</li></ol><p>内核目录（两个目录其中一个，取决于安装时是否选择为全部用户安装，第二个记得把用户名替换为自己的）：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">Clash</span> <span class="hljs-title">for</span> <span class="hljs-title">Windows</span>\<span class="hljs-title">resources</span>\<span class="hljs-title">static</span>\<span class="hljs-title">files</span>\<span class="hljs-title">win</span>\<span class="hljs-title">x64</span></span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Users</span>\用户名\<span class="hljs-title">AppData</span>\<span class="hljs-title">Local</span>\<span class="hljs-title">Programs</span>\<span class="hljs-title">Clash</span> <span class="hljs-title">for</span> <span class="hljs-title">Windows</span>\<span class="hljs-title">resources</span>\<span class="hljs-title">static</span>\<span class="hljs-title">files</span>\<span class="hljs-title">win</span>\<span class="hljs-title">x64</span></span><br></code></pre></td></tr></table></figure><p>可以提前复制一下原版内核副本做备份，替换 <strong>clash-win64.exe</strong> (.exe可能是隐藏的) 。</p><p><img src="/./../images/Mihomo%E5%86%85%E6%A0%B8%E9%80%82%E9%85%8DClashforWindows-ClashVerge/0ee510d81ea0da09dc52e1cd27466381.png" alt="img"></p><ol><li>重新打开 Clash for Windows 使用，注意如果需要使用 TUN Mode，需要右键以管理员身份运行</li></ol><p><img src="/./../images/Mihomo%E5%86%85%E6%A0%B8%E9%80%82%E9%85%8DClashforWindows-ClashVerge/1f9254a7401414a1644a686021df0438.png" alt="img"></p><h4 id="Clash-Verge"><a href="#Clash-Verge" class="headerlink" title="Clash Verge"></a>Clash Verge</h4><p>Clash Verge 也可以一样操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\用户名\<span class="hljs-title">AppData</span>\<span class="hljs-title">Local</span>\<span class="hljs-title">Clash</span> <span class="hljs-title">Verge</span></span><br></code></pre></td></tr></table></figure><p>将下载好的文件解压后，重命名为 <strong>clash.exe</strong> （.exe可能是隐藏的），替换即可</p><p><img src="/./../images/Mihomo%E5%86%85%E6%A0%B8%E9%80%82%E9%85%8DClashforWindows-ClashVerge/73386395c0b0ef902cdb4012bd67a2e1.png" alt="img"></p><h3 id="Mac-平台"><a href="#Mac-平台" class="headerlink" title="Mac 平台"></a>Mac 平台</h3><p><em>PS:如果首次安装 Clash for Windows 提示已损坏，可以在终端运行 sudo xattr -r -d com.apple.quarantine &#x2F;Applications&#x2F;Clash\ for\ Windows.app</em></p><ol><li>将编译的内核重命名为 <strong>clash-darwin</strong></li><li>关闭 Clash for Windows，解压下载文件后替换原内核，在终端执行</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 备份原版内核<br>mv /Applications/Clash\ <span class="hljs-keyword">for</span>\ Windows.app/Contents/Resources/static/files/darwin/arm64/clash-darwin /Applications/Clash\ <span class="hljs-keyword">for</span>\ Windows.app/Contents/Resources/static/files/darwin/arm64/clash-darwin.bak<br># 替换内核<br>mv clash-darwin /Applications/Clash\ <span class="hljs-keyword">for</span>\ Windows.app/Contents/Resources/static/files/darwin/arm64/clash-darwin<br># 授予新内核权限<br>sudo chown root:admin /Applications/Clash\ <span class="hljs-keyword">for</span>\ Windows.app/Contents/Resources/static/files/darwin/arm64/clash-darwin<br>sudo chmod +sx /Applications/Clash\ <span class="hljs-keyword">for</span>\ Windows.app/Contents/Resources/static/files/darwin/arm64/clash-darwin<br></code></pre></td></tr></table></figure><ol start="3"><li>重新打开 Clash for Windows 使用即可</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 安装 Clash 内核并开启透明代理</title>
    <link href="/Linux/ddb123bf/"/>
    <url>/Linux/ddb123bf/</url>
    
    <content type="html"><![CDATA[<h2 id="下载-Clash"><a href="#下载-Clash" class="headerlink" title="下载 Clash"></a>下载 Clash</h2><h3 id="Clash-内核"><a href="#Clash-内核" class="headerlink" title="Clash 内核"></a>Clash 内核</h3><ol><li>Clash 内核分为<a href="https://github.com/Dreamacro/clash/releases">开源版(已删库)</a> &#x2F; <a href="https://github.com/Dreamacro/clash/releases/tag/premium">Premium 版(已删库)</a> &#x2F; <a href="https://github.com/MetaCubeX/mihomo/releases">Meta 版(mihomo)</a> ，可以根据需求自行选择版本</li><li>在 release 中下载对应系统的内核解压后，重命名为 <code>clash</code> 上传至 <code>/opt/clash</code></li><li>执行 <code>chmod +x /opt/clash/clash</code> 添加运行权限</li></ol><h3 id="Country-mmdb"><a href="#Country-mmdb" class="headerlink" title="Country.mmdb"></a>Country.mmdb</h3><p>在 <a href="https://github.com/Dreamacro/maxmind-geoip/releases">maxmind-geoip</a> 中下载全球 IP 库 Country.mmdb 文件上传至 <code>/opt/clash</code></p><h3 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a>控制面板</h3><p>在 <a href="https://github.com/MetaCubeX/metacubexd/releases">metacubexd</a> 中下载面板文件上传至 <code>/opt/clash/ui</code></p><h3 id="config-yaml"><a href="#config-yaml" class="headerlink" title="config.yaml"></a>config.yaml</h3><ul><li>将配置文件命名为 <code>config.yaml</code> 上传至 <code>/opt/clash</code></li><li>订阅地址可以通过 <code>curl -L -o /opt/clash/config.yaml https://domain.com</code> 进行下载</li><li>在配置文件中，除了常规的节点规则配置以外，确保包含<strong>外部控制</strong>配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">external-controller:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:9090</span><br><span class="hljs-attr">external-ui:</span> <span class="hljs-string">/opt/clash/ui</span><br><span class="hljs-attr">secret:</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="创建-systemd-配置文件"><a href="#创建-systemd-配置文件" class="headerlink" title="创建 systemd 配置文件"></a>创建 systemd 配置文件</h2><ol><li>创建 systemd 配置文件 <code>/etc/systemd/system/clash.service</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=Clash 守护进程, Go 语言实现的基于规则的代理.<br>After=network.target NetworkManager.service systemd-networkd.service iwd.service<br><br>[Service]<br>Type=simple<br>LimitNPROC=500<br>LimitNOFILE=1000000<br>CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_TIME<br>AmbientCapabilities=CAP_NET_ADMIN CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_TIME<br>Restart=always<br>ExecStartPre=/usr/bin/sleep 1s<br>ExecStart=/opt/clash/clash -d /opt/clash<br>ExecReload=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ol><li>重新加载 systemd</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br></code></pre></td></tr></table></figure><ol><li>接下来就可以通过 systemctl 控制 Clash 启动与停止</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status clash <span class="hljs-comment"># 运行状态</span><br>systemctl start clash <span class="hljs-comment"># 启动</span><br>systemctl stop clash <span class="hljs-comment"># 停止</span><br>systemctl <span class="hljs-built_in">enable</span> clash <span class="hljs-comment"># 开机自启</span><br>systemctl <span class="hljs-built_in">disable</span> clash <span class="hljs-comment"># 取消开机自启</span><br></code></pre></td></tr></table></figure><ol><li>查看日志可以通过 <code>journalctl</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl -u clash<br></code></pre></td></tr></table></figure><h2 id="系统代理"><a href="#系统代理" class="headerlink" title="系统代理"></a>系统代理</h2><ol><li>创建并编辑 <code>.bashrc</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .bashrc<br></code></pre></td></tr></table></figure><ol><li>将以下代码写入其中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;socks5://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">export</span> no_proxy=<span class="hljs-string">&quot;localhost,127.*,10.*,172.16.*,172.17.*,172.18.*,172.19.*,172.20.*,172.21.*,172.22.*,172.23.*,172.24.*,172.25.*,172.26.*,172.27.*,172.28.*,172.29.*,172.30.*,172.31.*,192.168.*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="TUN-模式"><a href="#TUN-模式" class="headerlink" title="TUN 模式"></a>TUN 模式</h2><h3 id="开启流量转发"><a href="#开启流量转发" class="headerlink" title="开启流量转发"></a>开启流量转发</h3><ol><li>编辑 <code>/etc/sysctl.conf</code> 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf<br></code></pre></td></tr></table></figure><ol><li>将以下代码取消注释</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.ipv4.ip_forward=1<br>net.ipv6.conf.all.forwarding=1<br></code></pre></td></tr></table></figure><ol><li>加载内核参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p<br></code></pre></td></tr></table></figure><h3 id="开启-dns"><a href="#开启-dns" class="headerlink" title="开启 dns"></a>开启 dns</h3><ol><li>53 端口可能被占用，关闭默认的系统 dns 端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> systemd-resolved<br></code></pre></td></tr></table></figure><ol><li>在 Clash 配置文件中添加 dns</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dns:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">ipv6:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">listen:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:53</span><br>  <span class="hljs-attr">enhanced-mode:</span> <span class="hljs-string">fake-ip</span><br>  <span class="hljs-attr">fake-ip-range:</span> <span class="hljs-number">198.18</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">/16</span><br>  <span class="hljs-attr">fake-ip-filter:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">controlplane.tailscale.com</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">log.tailscale.io</span><br>  <span class="hljs-attr">default-nameserver:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">223.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span><br>  <span class="hljs-attr">nameserver:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://dns.alidns.com/dns-query</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tls://dns.alidns.com:853</span><br>  <span class="hljs-attr">fallback:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://1.1.1.1/dns-query</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://1.0.0.1/dns-query</span><br></code></pre></td></tr></table></figure><h3 id="开启-TUN"><a href="#开启-TUN" class="headerlink" title="开启 TUN"></a>开启 TUN</h3><p>在 Clash 配置文件中添加 TUN</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tun:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">stack:</span> <span class="hljs-string">system</span><br>  <span class="hljs-attr">auto-route:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto-detect-interface:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">dns-hijack:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">any:53</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tcp://any:53</span><br></code></pre></td></tr></table></figure><p>参考资料</p><p>1.<a href="https://clash.wiki/introduction/service.html">官方文档 - Clash 服务运行</a></p><p>2.<a href="https://clash.wiki/premium/tun-device.html">官方文档 - TUN设备</a></p><p>3.<a href="https://www.cfmem.com/2022/05/clash.html">Clash 如何简单开启透明网关功能</a></p><p>4.<a href="https://blog.iswiftai.com/posts/clash-linux/">在 Linux 中使用 Clash</a></p><p>5.<a href="https://github.com/Dreamacro/clash/issues/2251">clash与tailscale的兼容问题</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安裝FishShell+Tide主題與各種插件</title>
    <link href="/Linux-Shell/8db49697/"/>
    <url>/Linux-Shell/8db49697/</url>
    
    <content type="html"><![CDATA[<h2 id="開頭"><a href="#開頭" class="headerlink" title="開頭"></a>開頭</h2><p>本篇文章會安裝以下：</p><ul><li><a href="https://fishshell.com/">Fish Shell</a></li><li><a href="https://github.com/jorgebucaran/fisher">Fisher</a></li><li><a href="https://github.com/IlanCosman/tide">Tide</a></li><li><a href="https://github.com/jethrokuan/z">Z</a></li><li><a href="https://github.com/andreiborisov/sponge">Sponge</a></li><li><a href="https://github.com/jorgebucaran/autopair.fish">autopair.fish</a></li><li>fzf.fish<ul><li><a href="https://github.com/junegunn/fzf">fzf</a></li><li><a href="https://github.com/sharkdp/fd">fd</a></li><li><a href="https://github.com/sharkdp/bat">Bat</a></li></ul></li><li>asdf 自動完成</li></ul><p>安裝完，你會得到一個簡單好上手的指令介面。</p><p><img src="/./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/fig01.CwJEK6jr.webp" alt="fig01.webp"></p><h2 id="環境配置"><a href="#環境配置" class="headerlink" title="環境配置"></a>環境配置</h2><p>我的使用環境為 Windows 10 的 Windows Terminal + pwsh 連進 Ubuntu 22.04 LTS 使用。</p><p><img src="/./../images/Ubuntu%E5%AE%89%E8%A3%9DFishShell-Tide%E4%B8%BB%E9%A1%8C%E8%88%87%E5%90%84%E7%A8%AE%E6%8F%92%E4%BB%B6/fig02.Db_-5iYC.webp" alt="fig02.webp"></p><h2 id="安裝-必要套件"><a href="#安裝-必要套件" class="headerlink" title="安裝 必要套件"></a>安裝 必要套件</h2><p>shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install wget git curl vim -y<br></code></pre></td></tr></table></figure><h2 id="安裝-Patched-字型"><a href="#安裝-Patched-字型" class="headerlink" title="安裝 Patched 字型"></a>安裝 Patched 字型</h2><p>我們必須先安裝 Patched 過的字型，之後才能正確地顯示字型與圖示，這邊建議使用 <strong>MesloLGS NF</strong> 字體。</p><h3 id="第一種方式"><a href="#第一種方式" class="headerlink" title="第一種方式"></a>第一種方式</h3><p>下載並安裝以下四個字型：</p><ul><li>[MesloLGS NF Regular.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Regular.ttf)</li><li>[MesloLGS NF Bold.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Bold.ttf)</li><li>[MesloLGS NF Italic.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Italic.ttf)</li><li>[MesloLGS NF Bold Italic.ttf](<a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS">https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS</a> NF Bold Italic.ttf)</li></ul><p>或是 shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Regular.ttf &amp;&amp;<br><br><br>wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold.ttf &amp;&amp;<br><br><br>wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Italic.ttf &amp;&amp;<br><br><br>wget https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold%20Italic.ttf<br></code></pre></td></tr></table></figure><h3 id="第二種方式"><a href="#第二種方式" class="headerlink" title="第二種方式"></a>第二種方式</h3><p>Github <a href="https://github.com/ryanoasis/nerd-fonts?tab=readme-ov-file#tldr">@ryanoasis&#x2F;nerd-fonts</a></p><h2 id="安裝-Fish-shell"><a href="#安裝-Fish-shell" class="headerlink" title="安裝 Fish shell"></a>安裝 Fish shell</h2><p>新增來源庫 &gt; 更新 &gt; 安裝 <a href="https://fishshell.com/">Fish shell</a></p><p>shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-add-repository ppa:fish-shell/release-3<br><br><br>sudo apt update<br><br><br>sudo apt install fish<br></code></pre></td></tr></table></figure><h3 id="設定預設-Shell"><a href="#設定預設-Shell" class="headerlink" title="設定預設 Shell"></a>設定預設 Shell</h3><p>shell 輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s $(which fish)<br></code></pre></td></tr></table></figure><h2 id="安裝-Fisher"><a href="#安裝-Fisher" class="headerlink" title="安裝 Fisher"></a>安裝 Fisher</h2><p><a href="https://github.com/jorgebucaran/fisher">Fisher</a> 是插件管理員。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source &amp;&amp; fisher install jorgebucaran/fisher<br></code></pre></td></tr></table></figure><h3 id="查看已安裝插件"><a href="#查看已安裝插件" class="headerlink" title="查看已安裝插件"></a>查看已安裝插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher list<br></code></pre></td></tr></table></figure><p>結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ fisher list<br><br><br>jorgebucaran/fisher<br><br><br>ilancosman/tide@v6<br><br><br>jethrokuan/z<br><br><br>andreiborisov/sponge<br><br><br>jorgebucaran/autopair.fish<br><br><br>patrickf1/fzf.fish<br></code></pre></td></tr></table></figure><h2 id="安裝-Tide-主題"><a href="#安裝-Tide-主題" class="headerlink" title="安裝 Tide 主題"></a>安裝 Tide 主題</h2><p>還記得 Zsh 的 <a href="https://github.com/romkatv/powerlevel10k">PowerLevel10k</a> 嗎? Tide 基本上就很像 PowerLevel10k。</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"loop":"yes","screenshot":"yes","video":{"url":"/Ubuntu安裝FishShell-Tide主題與各種插件/w1.webm"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>安裝 <a href="https://github.com/IlanCosman/tide">Tide</a> ，輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install IlanCosman/tide@v6<br></code></pre></td></tr></table></figure><h3 id="設定-Tide-主題"><a href="#設定-Tide-主題" class="headerlink" title="設定 Tide 主題"></a>設定 Tide 主題</h3><p>安裝完成後，輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tide configure<br></code></pre></td></tr></table></figure><h2 id="安裝插件-Z"><a href="#安裝插件-Z" class="headerlink" title="安裝插件 Z"></a>安裝插件 Z</h2><p>插件 <a href="https://github.com/jethrokuan/z">Z</a> 類似於 <a href="https://github.com/wting/autojump">autojump</a> 的插件，比 <code>cd</code> 更快速地直接跳到想去的資料夾。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install jethrokuan/z<br></code></pre></td></tr></table></figure><h2 id="安裝插件-Sponge"><a href="#安裝插件-Sponge" class="headerlink" title="安裝插件 Sponge"></a>安裝插件 Sponge</h2><p><a href="https://github.com/meaningful-ooo/sponge">Sponge</a> 讓指令歷史紀錄更乾淨，不會去紀錄失敗或是打錯的指令到歷史清單中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install andreiborisov/sponge<br></code></pre></td></tr></table></figure><h3 id="清除指令歷史"><a href="#清除指令歷史" class="headerlink" title="清除指令歷史"></a>清除指令歷史</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">history clear<br></code></pre></td></tr></table></figure><h2 id="安裝插件-autopair-fish"><a href="#安裝插件-autopair-fish" class="headerlink" title="安裝插件 autopair.fish"></a>安裝插件 autopair.fish</h2><p><a href="https://github.com/jorgebucaran/autopair.fish">autopair.fish</a> 自動幫你補上 <code>()</code> ， <code>[]</code> ， <code>&#123;&#125;</code> ， <code>&quot;&quot;</code> ， 還有 <code>&#39;&#39;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install jorgebucaran/autopair.fish<br></code></pre></td></tr></table></figure><h2 id="安裝插件-fzf-fish"><a href="#安裝插件-fzf-fish" class="headerlink" title="安裝插件 fzf.fish"></a>安裝插件 fzf.fish</h2><p><a href="https://github.com/PatrickF1/fzf.fish">fzf.fish</a> 讓你的 Fish 互動性更強大。</p><p>找檔案 Ctrl + Alt + F</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"loop":"yes","screenshot":"yes","video":{"url":"https://cdn.tinqin881.top/hexo-blog/w2.webm"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>找指令歷史紀錄 Ctrl + R</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"loop":"yes","screenshot":"yes","video":{"url":"https://cdn.tinqin881.top/hexo-blog/w3.webm"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>找 PID Ctrl + Alt + P</p><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"loop":"yes","screenshot":"yes","video":{"url":"https://cdn.tinqin881.top/hexo-blog/w4.webm"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>還有很多功能，請參考 <a href="https://github.com/PatrickF1/fzf.fish">fzf.fish 來源庫</a> 。</p><h3 id="安裝前置套件-fzf"><a href="#安裝前置套件-fzf" class="headerlink" title="安裝前置套件 fzf"></a>安裝前置套件 fzf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf<br><br><br>~/.fzf/install<br></code></pre></td></tr></table></figure><h3 id="安裝前置套件-fd"><a href="#安裝前置套件-fd" class="headerlink" title="安裝前置套件 fd"></a>安裝前置套件 fd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install fd-find<br></code></pre></td></tr></table></figure><p>因為已經有其他叫 fd 的套件，為了避免衝突，所以執行檔是叫 fdfind。我們這邊建立個連結在 <code>/usr/local/bin</code> 叫做 <code>fd</code> 讓我們可以使用 <code>fd</code> 這個指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s $(which fdfind) /usr/local/bin/fd<br></code></pre></td></tr></table></figure><h3 id="安裝前置套件-bat"><a href="#安裝前置套件-bat" class="headerlink" title="安裝前置套件 bat"></a>安裝前置套件 bat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install bat<br></code></pre></td></tr></table></figure><p>因為已經有其他叫 bat 的套件，為了避免衝突，所以執行檔是叫 batcat。我們這邊建立個連結在 <code>/usr/local/bin</code> 叫做 <code>bat</code> 讓我們可以使用 <code>bat</code> 這個指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s $(which batcat) /usr/local/bin/bat<br></code></pre></td></tr></table></figure><h3 id="安裝-fzf-fish"><a href="#安裝-fzf-fish" class="headerlink" title="安裝 fzf.fish"></a>安裝 fzf.fish</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fisher install PatrickF1/fzf.fish<br></code></pre></td></tr></table></figure><h2 id="設定-asdf-自動完成"><a href="#設定-asdf-自動完成" class="headerlink" title="設定 asdf 自動完成"></a>設定 asdf 自動完成</h2><p>若已經有安裝使用 <a href="https://asdf-vm.com/">asdf</a> 軟體版本管理器，設定自動完成如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.config/fish/config.fish<br></code></pre></td></tr></table></figure><p>在 <code>~/.config/fish/config.fish</code> 文件最後添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.asdf/asdf.fish<br></code></pre></td></tr></table></figure><p>最後，輸入以下指令，連結自動完成的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/.config/fish/completions; and ln -s ~/.asdf/completions/asdf.fish ~/.config/fish/completions<br></code></pre></td></tr></table></figure><h2 id="完結"><a href="#完結" class="headerlink" title="完結"></a>完結</h2>]]></content>
    
    
    <categories>
      
      <category>Linux,Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDN 缓存配置和其它配置实用优化</title>
    <link href="/Web/39758bc7/"/>
    <url>/Web/39758bc7/</url>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.xinac.com/article/498.html">https://www.xinac.com/article/498.html</a></p><h2 id="一、缓存的作用"><a href="#一、缓存的作用" class="headerlink" title="一、缓存的作用"></a>一、缓存的作用</h2><p><code>CDN</code>加速静态资源时，将源站上的资源缓存到距离客户端最近的<code>CDN</code>节点上。当您访问该静态资源时，直接从缓存中获取，避免通过较长的链路回源，提高访问效率。</p><h2 id="二、配置说明"><a href="#二、配置说明" class="headerlink" title="二、配置说明"></a>二、配置说明</h2><p>本文以阿里云为例说明</p><h3 id="（1）缓存过期时间"><a href="#（1）缓存过期时间" class="headerlink" title="（1）缓存过期时间"></a>（1）缓存过期时间</h3><p>支持2种类型</p><ul><li>目录</li></ul><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image.png" alt="CDN缓存配置和其它配置实用优化"></p><ul><li>文件后缀名</li></ul><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-1.png" alt="CDN缓存配置和其它配置实用优化"></p><ul><li>配置建议</li></ul><table><thead><tr><th>地址</th><th>类型</th><th>过期时间</th></tr></thead><tbody><tr><td>ico,jpg,png,gif,jpeg</td><td>文件后缀名</td><td>1个月</td></tr><tr><td>flv,mp4</td><td>文件后缀名</td><td>3个月</td></tr><tr><td>txt,md</td><td>文件后缀名</td><td>1个月</td></tr><tr><td>js,css,map,json</td><td>文件后缀名</td><td>1个月</td></tr><tr><td>svg,eot,ttf,woff,woff2,otf,ttc</td><td>文件后缀名</td><td>3个月</td></tr><tr><td>rar,zip,tar,gz,tgz,7z,jar,exe,msi</td><td>文件后缀名</td><td>3个月</td></tr><tr><td>&#x2F;</td><td>目录</td><td>3天</td></tr></tbody></table><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-5.png" alt="CDN缓存配置和其它配置实用优化"></p><h3 id="（2）状态码过期时间"><a href="#（2）状态码过期时间" class="headerlink" title="（2）状态码过期时间"></a>（2）状态码过期时间</h3><p>可以针对静态资源配置指定目录和文件后缀名的状态码过期时间，资源过期后，自动从<code>CDN</code>节点删除。通过本文您可以了解状态码过期时间的配置方法。</p><p>在设置状态码过期时间时，注意事项如下：</p><ul><li>对于<code>状态码303、304、401、407、600和601</code>，不进行缓存。</li><li>对于<code>状态码204、305、400、403、404、405、414、500、501、502、503和504</code>，如果源站响应了<code>Cache-Control</code>，则遵循源站的<code>Cache-Control</code>原则。如果未设置状态码，则缓存时间默认为1秒。</li><li>如果您同时设置了目录和文件后缀名这两种类型的状态码过期时间，那么先设置的类型生效。</li></ul><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-6.png" alt="CDN缓存配置和其它配置实用优化"></p><h3 id="（3）HTTP头"><a href="#（3）HTTP头" class="headerlink" title="（3）HTTP头"></a>（3）HTTP头</h3><p>如果要允许<code>跨域请求</code>，需要在这里增加配置。</p><p>配置参考：</p><table><thead><tr><th>参数</th><th>取值</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td>*</td></tr><tr><td>Access-Control-Allow-Headers</td><td>*</td></tr><tr><td>Access-Control-Allow-Methods</td><td>GET, POST, OPTIONS</td></tr></tbody></table><h3 id="（4）自定义页面"><a href="#（4）自定义页面" class="headerlink" title="（4）自定义页面"></a>（4）自定义页面</h3><p>可自定义设置<code>404、403、503、504</code>等页面</p><h3 id="（5）rewrite重写"><a href="#（5）rewrite重写" class="headerlink" title="（5）rewrite重写"></a>（5）rewrite重写</h3><p>重写功能支持对请求的URI进行修改、302重定向。可以配置多条<code>rewrite</code>匹配规则。支持正则表达式。</p><h2 id="三、CDN其它配置优化"><a href="#三、CDN其它配置优化" class="headerlink" title="三、CDN其它配置优化"></a>三、CDN其它配置优化</h2><ol><li>基本配置–源站信息，可配置多个源站信息</li></ol><p>多源站可配置<code>多个服务器</code>或<code>服务器+OSS</code>，提升服务质量</p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-4.png" alt="CDN缓存配置和其它配置实用优化"></p><ol><li>回源配置</li></ol><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">回源HOST`，一般要配置为`源站域名<br></code></pre></td></tr></table></figure><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-3.png" alt="CDN缓存配置和其它配置实用优化"></p><p><code>回源SNI</code>，一般配置为<code>源站域名</code>，尽量启用，https访问时需要</p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-2.png" alt="CDN缓存配置和其它配置实用优化"></p><ol><li><code>HTTPS证书</code>，到期<code>自动续签</code></li></ol><p>在CDN里配置<code>https证书</code>时，选择<code>免费证书</code>可以<code>自动续签</code>。如果申请好证书再配置到这里，无法自动续签。</p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-8.png" alt="CDN缓存配置和其它配置实用优化"></p><p><img src="/./../images/CDN%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%85%B6%E5%AE%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%94%A8%E4%BC%98%E5%8C%96/1719278964-image-7.png" alt="CDN缓存配置和其它配置实用优化"></p><ol><li>尽量启用<code>HTTP/2</code>，<code>OCSP Stapling</code>和<code>TLSv1.3</code></li><li>访问控制，<code>Referer防盗链</code>和<code>UA黑/白名单</code></li></ol><p>如果你的网站盗链严重，可以开启<code>Referer防盗链</code></p><p>如果你的网站被爬虫严重，可以配置<code>IP黑/白名单</code>和<code>UA黑/白名单</code>。<code>IP黑/白名单</code>可以禁止某些IP的高频率访问；<code>UA黑/白名单</code>可以限制某些爬虫的请求</p><ol><li>性能优化，如无特殊需要，尽量启用<code>页面优化</code>、<code>智能压缩</code>、<code>Brotli压缩</code></li><li>其它配置可自行测试效果</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sip 服务器（Freeswitch）屏蔽国外 IP</title>
    <link href="/Linux-Web/67a7fc07/"/>
    <url>/Linux-Web/67a7fc07/</url>
    
    <content type="html"><![CDATA[<p>SIP攻击很常见，特别是各大云服务器，基本上开了个公网IP绑定到实例机器就会被外国IP一遍怼。防范也容易，就是把外国IP禁掉。<br>实现：iptables+ipset，只允许中国IP访问本机，也就实现了封禁国外IP的效果。<br>优点：匹配迅速，免去iptables单链匹配。</p><p>操作步骤：</p><p>1.安装ipset 以及iptabls</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装ipset：</span><br>RedHat：yum install ipset<br>Debian：apt-get install ipset<br><span class="hljs-comment">#建表</span><br>ipset create china <span class="hljs-built_in">hash</span>:net hashsize 10000 maxelem 1000000<br><span class="hljs-comment">#批量增加中国IP到ipset的china表</span><br><span class="hljs-comment">#以下内容保存成脚本执行即可</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">rm</span> -f cn.zone<br>wget http://www.ipdeny.com/ipblocks/data/countries/cn.zone<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">cat</span> cn.zone`<br><span class="hljs-keyword">do</span><br>    ipset add china <span class="hljs-variable">$i</span> <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>2.创建规则文件（<code>vim iptabls.rule</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">*filter<br>:INPUT DROP [0:0]<br>:FORWARD DROP [0:0]<br>:OUTPUT ACCEPT [0:0]<br>-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -m <span class="hljs-built_in">set</span> --match-set china src -p tcp -m tcp --dport 1:65535 -j ACCEPT<br>-A INPUT -m <span class="hljs-built_in">set</span> --match-set china src -p udp -m udp --dport 1:65535 -j ACCEPT<br>-A INPUT -p udp -m udp --dport 16384:32768 -j ACCEPT<br>-A INPUT -s 172.18.0.0/16 -j ACCEPT<br>-A INPUT -p icmp -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A OUTPUT -o lo -j ACCEPT<br>COMMIT<br></code></pre></td></tr></table></figure><p>3.导入规则文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导入规则文件</span><br>iptables-restore &lt; iptabls.rule <br><span class="hljs-comment"># 应用生效</span><br>iptables-apply <br></code></pre></td></tr></table></figure><p>如果提示下面的错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@opensips:~# iptables-apply <br>Error: rulesfile not readable: /etc/network/iptables.up.rules<br></code></pre></td></tr></table></figure><p>可以先创建iptables.up.rules文件，然后再次执行apply即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /etc/network/iptables.up.rules<br></code></pre></td></tr></table></figure><p>4.查看iptables规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@opensips:~# iptables -L<br>Chain INPUT (policy DROP)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED<br>ACCEPT     tcp  --  anywhere             anywhere             match-set china src tcp dpts:tcpmux:65535<br>ACCEPT     udp  --  anywhere             anywhere             match-set china src udp dpts:1:65535<br>ACCEPT     udp  --  anywhere             anywhere             udp dpts:16384:32768<br>ACCEPT     all  --  172.18.0.0/16        anywhere            <br>ACCEPT     icmp --  anywhere             anywhere            <br>ACCEPT     all  --  anywhere             anywhere            <br> <br>Chain FORWARD (policy DROP)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br> <br>Chain OUTPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>ACCEPT     all  --  anywhere             anywhere     <br></code></pre></td></tr></table></figure><p>如果看到上面的信息，iptables就生效了。现在再去看freeswitch的日志就会发现那些乱七八糟的信息都没了。</p><p>参考链接：</p><p><a href="https://www.codeleading.com/article/6624712284">https://www.codeleading.com/article/6624712284</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux,Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Openbox 作为基底打造你自己的 Linux 桌面环境</title>
    <link href="/Linux/bd980760/"/>
    <url>/Linux/bd980760/</url>
    
    <content type="html"><![CDATA[<p>这篇文章会教你如何使用 Openbox 作为基底打造你自己的 Linux 桌面环境。</p><p>很久没有写过这类教程了，如果发现文章中的问题或不足，可以在评论中告诉我😁</p><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><h2 id="Openbox-是什么？"><a href="#Openbox-是什么？" class="headerlink" title="Openbox 是什么？"></a>Openbox 是什么？</h2><p>对于能够找到这篇文章的你，这应该不是你想问的问题吧…</p><p>Openbox 是一个 WM（Window Manager&#x2F;窗口管理器）用来显示并管理每个 GUI 程序的窗口。 经常被人们提到的 Gnome、KDE 之类的东西是 DE（Desktop Environment&#x2F;桌面环境）。一个 DE 通常会包括一个 DM（Display Manager&#x2F;显示管理器，通常用于用户登录并启动桌面环境）、一个 WM（用于显示窗口）、一个 compositor（或许可以翻译为“合成器”？用于渲染特效、透明效果等）和一大堆附加组件（如窗口列表、dock 栏、托盘）。 理论上讲，各个 DE 中的每个部分都可以被替换掉，例如用 LightDM 替换掉 Gnome 自带的 DM：GDM，或用 openbox 替换掉 XFCE 自带的 WM：xfwm。</p><h2 id="为什么不用已有的桌面环境？"><a href="#为什么不用已有的桌面环境？" class="headerlink" title="为什么不用已有的桌面环境？"></a>为什么不用已有的桌面环境？</h2><p>原因如下：</p><ul><li>打包好的桌面环境总会包含你不需要的组件。这就像你去饭店点了一份不要辣椒的菜，结果上的菜里还是有辣椒，老板说这辣椒是送你的，免费的──你觉得 compositor 影响性能，不想要它，但大多数桌面环境（就算是最小化安装的也一样）都会“免费”送你一个，虽说你可以禁用掉它，但是有你完全用不到的组件在你的系统里，还由于软件包依赖问题无法卸装，这还是挺恶心的。</li><li>重量级的桌面环境总是会有类似于 Windows 注册表的东西，例如 dconf。一个文本配置文件就能解决的问题，非要搞得这么复杂。</li><li>你很难搞清桌面环境中每一个组件、每一个软件包的用途，这导致出现 bug 时的问题排查与解决变得非常麻烦复杂。</li><li>你就是喜欢折腾，你就是喜欢与众不同🥴</li></ul><p>自己动手拼凑桌面环境就不会有这些问题。你喜欢 LXDE 的 Panel、Xfce 的终端、Gnome 的截图工具？没有任何问题，你可以你自己喜欢的所有组件放在一起。这就是不使用已有桌面环境的最大优点。</p><p>你的桌面环境是什么样的并不重要，重要的是它是否能让你用得顺手，符合你的习惯，提升你的效率。</p><h2 id="为什么选用-Openbox？"><a href="#为什么选用-Openbox？" class="headerlink" title="为什么选用 Openbox？"></a>为什么选用 Openbox？</h2><p>Openbox 可以说是一个较为“传统”的窗口管理器。它并不支持 wayland，只能运行在传统的 X11 上，但这也保证了它的稳定性，并且对 N 卡有更好的支持。 另外，Openbox 在交互上偏向于使用鼠标。虽然你可以按照你的喜好设置一大堆快捷键，但如果你对键盘操作特别钟情，或是讨厌操作鼠标，可能 <a href="https://i3wm.org/">i3</a>（X11）、<a href="https://swaywm.org/">sway</a>（wayland）类的桌面更适合你。</p><p>相较于重量级的 DE，如 Gnome、KDE，Openbox 极其轻量，并且基本不存在什么依赖。 对于其他轻量级 WM，openbox 可以说是配置起来最简单的，并且有几乎是最完备的生态和社区。</p><h2 id="目标与准则"><a href="#目标与准则" class="headerlink" title="目标与准则"></a>目标与准则</h2><p>这篇文章会以我的桌面环境的配置为例，详细地介绍如何拼凑一个桌面环境。我会详细介绍我自己的方案，但也会给出其它方案，你可以按照自己的喜好来选择。就算WM相同，两个人的桌面也可以从外观和使用上完全不同。</p><p>我自己的准则：</p><ul><li>选择稳定、不频繁更改功能、但仍在开发中的组件</li><li>不使用已过时或已停止开发&#x2F;支持的组件，也不使用有已过时依赖（如python2）的组件</li><li>尽量使用图形库比较新的组件，也就是尽量不用使用了 GTK2&#x2F;QT4 的组件</li><li>效率优先，不在外观与特效上花太多心思，当然成品看起来也不能丑</li><li>在日常使用上，能用 GUI 解决的操作，绝不用 terminal</li><li>使用配置起来简单的组件，就是那些就算用直接改配置文件的方式更改设置也不会很难的组件</li><li>用到的所有组件都可以透过 Arch 官方源与 AUR 安装，当然手动编译也不难</li></ul><p>再次强调，你不需要完全照搬我的配置，我也不推荐你这么做，毕竟只有尝试过更多方案才能选择出最适合你的。这正是 Linux 的精髓。</p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><p>在这里，假设你的系统是 Arch（其他系统也大同小异，只不过可能需要手动编译一些组件），且系统中还没有安装桌面环境与 X Window System。</p><p>下面列出的程序全部都是没有过时或停止开发&#x2F;支持并且依赖也没有过时的。</p><h2 id="基础软件包：X-Window-System、Display-Manager-和-Openbox"><a href="#基础软件包：X-Window-System、Display-Manager-和-Openbox" class="headerlink" title="基础软件包：X Window System、Display Manager 和 Openbox"></a>基础软件包：X Window System、Display Manager 和 Openbox</h2><p>首先需要的是处在最底层的 X Window System。一般来说只需要 xorg-server 包和它的依赖。 另外，这里还需要安装你的显卡对应的 xf86-video 包，如 xf86-video-intel。如果你的机器同时有核显与独显，最好暂时只安装核显的包。</p><p>你还需要一个 DM 来启动 Openbox，我用的是 <a href="https://wiki.archlinux.org/index.php/LightDM">LightDM</a>，当然还有其它选择，如 <a href="https://wiki.archlinux.org/index.php/LXDM">LXDM</a>。顺便一提，如果你准备使用 LXDM 的话，要注意它有 GTK2 与 GTK3 两个版本，一般来说选择 GTK3 版本的比较好。 如果你和我一样选择了 LightDM，那么你还需要一个 Greeter 用来在 GUI 下登录。这里有很多选择，可以参考 <a href="https://wiki.archlinux.org/index.php/LightDM#Greeter">Wiki 中的 Greeter 一节</a>。我使用的是默认的 lightdm-gtk-greeter，主要原因是它可以使用与桌面环境相同的 GTK 主题来保持界面风格的一致。</p><p>当然，不用 DM 也是完全可以的。利用 <a href="https://wiki.archlinux.org/index.php/Xinit">Xinit</a> 你可以在终端中启动 X Window System，并且可以通过切 tty 来实现多用户。</p><p>最后，别忘了安装 Openbox。这里最好顺便装上 xterm，因为刚刚安装好的 Openbox 的应用菜单默认是硬编码的，常用的终端只有 xterm 在菜单中，后面将你喜欢的 GUI 终端添加到 Openbox 应用菜单后你可以直接将 xterm 卸装掉。不装 xterm 也没有任何问题，只不过稍微麻烦一点，最初几步中你需要切换到其它 tty 来执行命令。</p><p>将你的 DM 设置为自启后，重启电脑，不出意外的话重启后你会进入 DM 的登录界面。登录后，你便可以进入 Openbox。</p><h2 id="使桌面环境“可用”"><a href="#使桌面环境“可用”" class="headerlink" title="使桌面环境“可用”"></a>使桌面环境“可用”</h2><p>进入一个未经配置的 Openbox，你只会看到黑色的背景，没有任何其它东西，鼠标右键会显示应用菜单。</p><p>这时你的桌面系统还远远达不到“可用”，至少还需要窗口列表和系统托盘。</p><h3 id="窗口列表与系统托盘"><a href="#窗口列表与系统托盘" class="headerlink" title="窗口列表与系统托盘"></a>窗口列表与系统托盘</h3><p>这里有几种不同方案：</p><h4 id="方案一：使用一个-Dock-栏和一个系统托盘"><a href="#方案一：使用一个-Dock-栏和一个系统托盘" class="headerlink" title="方案一：使用一个 Dock 栏和一个系统托盘"></a>方案一：使用一个 Dock 栏和一个系统托盘</h4><p>这种情况下，你没有窗口列表来显示已打开的窗口，所以需要一个可以显示并重新打开最小化后的窗口的 Dock 栏，这里列出 2 个可选项：</p><ul><li><a href="https://wiki.archlinux.org/index.php/Cairo-Dock">Cairo-Dock</a>──可定制程度比较高，但我个人不太喜欢，因为它不是很轻量，特效太多，而且一些功能需要 compositor 来实现。在我的笔记本（只开了核显）上打开它后散热风扇竟然都会开始转…</li><li><a href="https://wiki.archlinux.org/index.php/Plank">Plank</a>──非常轻量化，可定制性也不错，只是缺少工作区切换的功能，但可以通过设置 Openbox 快捷键或使用其它小组件实现</li></ul><p>窗口列表实现了，但你还需要一个系统托盘，可以选择 <a href="https://wiki.archlinux.org/index.php/Stalonetray">Stalonetray</a>，或 <a href="https://github.com/sargon/trayer-srg">trayer-srg</a>，或 <a href="https://github.com/taffybar/taffybar">taffybar</a></p><h4 id="方案二：使用一个-Panel"><a href="#方案二：使用一个-Panel" class="headerlink" title="方案二：使用一个 Panel"></a>方案二：使用一个 Panel</h4><p>这是我选择的方案。</p><p>Panel 一般会包含窗口列表、工作区切换器、系统托盘之类的东西。通常来说，有一个 Panel 已经足够让你的桌面环境“可用”了。 下面列出几个可选的 Panel：</p><ul><li><a href="https://wiki.archlinux.org/index.php/Tint2">tint2</a>或许是最大名鼎鼎的独立 Panel，很轻量，也高度可定制化</li><li><a href="https://wiki.lxde.org/en/LXPanel">LXPanel</a>是LXDE桌面环境的默认 Panel，也没什么依赖，可以脱离 LXDE 而单独运行，轻量且定制性也不错，有 GTK2 和 GTK3 版本。在我这里 GTK2 版本可以完美运行，但 GTK3 版本系统托盘中的图标貌似有点 bug,不能实时更新。</li><li><a href="https://github.com/lxqt/lxqt-panel">lxqt-panel</a>和 LXPanel 差不多，是 LXQt 桌面环境的默认 Panel。</li><li><a href="https://docs.xfce.org/xfce/xfce4-panel/start">Xfce Panel</a>是我最终的选择（后面会讲到为什么），它是 xfce 桌面环境的默认 Panel，也没什么依赖可以独立运行。它足够简单，可以定制的部分也不少，并且有很多使用的插件。</li></ul><h4 id="方案三：使用一个-Panel-和一个-Dock-栏"><a href="#方案三：使用一个-Panel-和一个-Dock-栏" class="headerlink" title="方案三：使用一个 Panel 和一个 Dock 栏"></a>方案三：使用一个 Panel 和一个 Dock 栏</h4><p>通常 Panel 也可以作为 Dock 栏使用，但如果你很想再揉进去一个独立的 Dock 也没有问题。</p><h2 id="决定是否将桌面作为一个目录"><a href="#决定是否将桌面作为一个目录" class="headerlink" title="决定是否将桌面作为一个目录"></a>决定是否将桌面作为一个目录</h2><p>要不要在桌面上堆放文件？</p><h3 id="需要在桌面上堆放文件"><a href="#需要在桌面上堆放文件" class="headerlink" title="需要在桌面上堆放文件"></a>需要在桌面上堆放文件</h3><p>如果你喜欢平时把一些文件和目录直接放在桌面上以便操作，就遵照这个部分进行。 下面列出几种选择让你能够在桌面放置文件和目录：</p><ul><li><a href="https://wiki.archlinux.org/index.php/PCManFM">PCManFM</a> 是一个文件管理器，不过它有将桌面作为一个目录进行管理的功能。它有 GTK2、GTK3 和 QT 版。但要注意，PCManFM 与 LXPanel 共同依赖于 libfm 库，而 libfm 分为 GTK2 和 GTK3 版本且相互冲突。也就是说，如果你同时使用 LXPanel 与 PCManFM，那么两者必须是同一 GTK 版本的。PCManFM-GTK3 在我这里有拖动文件时不显示的 bug，而 GTK2 毕竟是 10 年前的老设计，个人感觉不太美观，所以最后弃用了这个方案。</li><li><a href="https://docs.xfce.org/xfce/xfdesktop/start">xfdesktop</a> 是 XFCE 用来管理桌面的程序，简单易用，但它依赖 <a href="https://wiki.archlinux.org/index.php/Thunar">Thunar</a> 文件管理器，如果你本身就准备使用 Thunar 的话倒是没什么，但如果你不喜欢 Thunar，xfdesktop 可能不是个好的选择。</li><li><a href="http://rox.sourceforge.net/desktop">ROX</a> 其实本身就可以认为是一个桌面环境了，不过它也可以用来管理桌面。我没有用过 ROX，所以就不做更多表述了。</li></ul><p>一般来说，用户的“桌面”文件夹在 <code>~/Desktop</code>，但修改起来也不难。<del>我就是直接将我的 home 目录作为桌面目录的。</del></p><h3 id="不需要在桌面上堆放文件"><a href="#不需要在桌面上堆放文件" class="headerlink" title="不需要在桌面上堆放文件"></a>不需要在桌面上堆放文件</h3><p>如果你为了为了整洁的外观或是其它原因不准备在桌面上放置文件，在这一步你最好开始编辑 Openbox 的右键菜单与壁纸。</p><h4 id="编辑-Openbox-的右键菜单"><a href="#编辑-Openbox-的右键菜单" class="headerlink" title="编辑 Openbox 的右键菜单"></a>编辑 Openbox 的右键菜单</h4><p>ArchWiki 中有很详细的介绍，可以直接参照<a href="https://wiki.archlinux.org/index.php/openbox#Menus">这里</a></p><h4 id="设置壁纸"><a href="#设置壁纸" class="headerlink" title="设置壁纸"></a>设置壁纸</h4><p>在桌面模式下运行的 PCManFM、xfdesktop 和 ROX 都支持设置壁纸，但在不用它们的情况下，<a href="https://wiki.archlinux.org/index.php/Nitrogen">Nitrogen</a> 可以用来设置壁纸。</p><h2 id="让程序自启动"><a href="#让程序自启动" class="headerlink" title="让程序自启动"></a>让程序自启动</h2><p>只需要在 <code>~/.config/openbox/autostart</code> 或 <code>~/.xprofile</code> 加入需要自动执行的命令。两个文件的区别在于，<code>~/.xprofile</code> 中的命令是在 X Server 启动时执行的，而 <code>~/.config/openbox/autostart</code> 中的内容是在 Openbox 启动后才执行的，一般来说两者区别不大。</p><p>一个例子：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">xfdesktop <span class="hljs-meta">&amp;</span><br>xfce4<span class="hljs-punctuation">-</span>panel <span class="hljs-meta">&amp;</span><br>nm<span class="hljs-punctuation">-</span>applet <span class="hljs-meta">&amp;</span><br>optimus<span class="hljs-punctuation">-</span>manager<span class="hljs-punctuation">-</span>qt <span class="hljs-meta">&amp;</span><br>pasystray <span class="hljs-meta">&amp;</span><br>blueman<span class="hljs-punctuation">-</span>applet <span class="hljs-meta">&amp;</span><br>xfce4<span class="hljs-punctuation">-</span>power<span class="hljs-punctuation">-</span>manager <span class="hljs-meta">&amp;</span><br>fcitx5 <span class="hljs-meta">&amp;</span><br></code></pre></td></tr></table></figure><h2 id="“设置”程序"><a href="#“设置”程序" class="headerlink" title="“设置”程序"></a>“设置”程序</h2><p>Openbox 有自己的设置程序 <a href="http://openbox.org/wiki/ObConf:About">ObConf</a>，需要单独安装。</p><p><a href="https://wiki.lxde.org/en/LXAppearance">lxappearance</a> 可以用来设置 GTK 主题等一些选项，虽说从名字里看它是 LXDE 的组件，但它完全可以独立运行。推荐安装它的GTK3版本。</p><p>如果你的电脑同时有核显和独显，Arch 系可以用<a href="https://github.com/Askannz/optimus-manager">optimus-manager</a>配合 GUI 前端 <a href="https://github.com/Shatur95/optimus-manager-qt">optimus-manager-qt</a> 切换显卡，体验极佳。</p><h2 id="一些重要的程序"><a href="#一些重要的程序" class="headerlink" title="一些重要的程序"></a>一些重要的程序</h2><p>到这里，你的 Openbox 已经达到“可用”状态了，但还需要一些如文件管理器、终端之类的程序。</p><h3 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h3><p>有很多选择，之前提到的 PCManFM、Thunar 都是很不错的轻量级文件管理器，而且在网上随便查查就能找到不少其它的选择。</p><p>注意，大多数文件管理器会通过 <a href="https://wiki.archlinux.org/index.php/File_manager_functionality">gvfs</a> 实现回收站和自动挂载可移动设备的功能，并且可能需要通过一个 daemon 进程监听。</p><p>我选择的是 Thunar。</p><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><p>之前我们一直临时在用 xterm 作为终端。有很多更好的终端，我自己在用的是 <a href="https://launchpad.net/sakura">Sakura</a>，非常简洁轻量。<a href="https://docs.xfce.org/apps/terminal/start">xfce4-terminal</a>、<a href="https://wiki.archlinux.org/index.php/Termite">Termite</a> 也是不错的选择。</p><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p>同样有很多选择。单纯作为文本编辑器，<a href="https://github.com/codebrainz/mousepad">mousepad</a> 很不错。如果你喜欢 Windows 上 Notepad++ 的体验，<a href="https://notepadqq.com/">notepadqq</a> 几乎一模一样，只是现版本的行首缩进貌似有些 bug。 我用的是 Gvim，这个就不用多解释了。</p><h3 id="用来锁定、退出、关机和重启的面板"><a href="#用来锁定、退出、关机和重启的面板" class="headerlink" title="用来锁定、退出、关机和重启的面板"></a>用来锁定、退出、关机和重启的面板</h3><p>我用的是 <a href="https://wiki.archlinux.org/index.php/Oblogout">Oblogout</a>。</p><h2 id="系统托盘中的东西"><a href="#系统托盘中的东西" class="headerlink" title="系统托盘中的东西"></a>系统托盘中的东西</h2><p>这里列出我使用的组件：</p><ul><li><a href="https://wiki.archlinux.org/index.php/NetworkManager#nm-applet">nm-applet</a> 是 NetworkManager 的托盘程序，我还在用 NetworkManager 的原因就是其它网络管理程序没有什么好的 GUI──Wicd 因为使用 Python2 而被 pass 掉，netctl 也没有可以与 nm-applet 媲美的 GUI 前端。</li><li><a href="https://wiki.archlinux.org/index.php/Blueman">blueman-applet</a> 配合 blueman-manager 可以很方便地管理蓝牙。想要通过 PulseAudio 使用 APTX 或 LDAC 的话可以使用 <a href="https://github.com/EHfive/pulseaudio-modules-bt">pulseaudio-modules-bt</a>，Arch 系可以直接通过 AUR 安装，同时要安装 libldac。</li><li><a href="https://github.com/christophgysin/pasystray">pasystray</a> 是 PulseAudio 的托盘，功能非常强大，配合 <a href="https://freedesktop.org/software/pulseaudio/pavucontrol">pavucontrol</a>，操作音频设备就非常容易了。</li><li><a href="https://docs.xfce.org/xfce/xfce4-power-manager/start">xfce4-power-manager</a> 是 XFCE 管理电源和屏幕亮度的托盘程序，可以脱离 XFCE 独立安装运行。</li><li><a href="https://github.com/Shatur95/optimus-manager-qt">optimus-manager-qt</a> 之前提到过，是 optimus-manager 的 GUI 前端，用来切换显卡。</li></ul><h2 id="定义键盘快捷键"><a href="#定义键盘快捷键" class="headerlink" title="定义键盘快捷键"></a>定义键盘快捷键</h2><p>Openbox的键盘快捷键可以通过编辑 <code>~/.config/openbox/rc.xml</code> 修改，当然也有 GUI 前端可以修改快捷键，但是我觉得没有必要，因为 <code>rc.xml</code> 修改起来非常简单。</p><p>可以参考 <a href="https://wiki.archlinux.org/index.php/openbox#Keybinds">Arch Wiki 中 Openbox 词条的 Keybinds 章节</a>进行配置。</p><p>下面列出我的 <code>rc.xml</code> 中的 <code>&lt;keyboard&gt;</code> 段，其中包含一些有用的小组件，下文会提到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">keyboard</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Oblogout 面板 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-A-Delete&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>oblogout<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 窗口与工作区相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;W-a&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ToggleShowDesktop&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;A-Left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PreviousWindow&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;A-Right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;NextWindow&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-Left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DesktopLeft&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-Right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DesktopRight&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-A-Left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SendToDesktopLeft&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-A-Right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SendToDesktopRight&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dialog</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">wrap</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">wrap</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 用 pactl 控制音量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioMute&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>pactl set-sink-mute 0 toggle<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioRaiseVolume&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>pactl set-sink-volume @DEFAULT_SINK@ +5%<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioLowerVolume&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>pactl set-sink-volume @DEFAULT_SINK@ -5%<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 用 playerctl 控制上一曲、下一曲、播放与暂停 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioPrev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>playerctl next<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioPlay&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>playerctl play-pause<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;XF86AudioNext&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>playerctl previous<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 用 escrotum 截图 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum -C<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum -Cs<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;S-Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keybind</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C-S-Print&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>escrotum -s<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keybind</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keyboard</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一些好用的程序与小工具"><a href="#一些好用的程序与小工具" class="headerlink" title="一些好用的程序与小工具"></a>一些好用的程序与小工具</h2><ul><li><a href="https://github.com/Roger/escrotum">escrotum</a> 是一个非常轻量的截图工具。</li><li><a href="https://deadbeef.sourceforge.io/">DeaDBeeF</a> 神似 foobar2000，很轻量好用的音乐播放器，可惜用的不是 MPRIS D-Bus Interface Specification 标准，不过可以在应用内设置快捷键达到一样的效果。</li><li><a href="https://github.com/altdesktop/playerctl">playerctl</a> 可以控制使用了 <a href="https://specifications.freedesktop.org/mpris-spec">MPRIS D-Bus Interface Specification</a> 标准的播放器进行上一曲、下一曲、播放与暂停操作。</li><li><a href="https://wiki.lxde.org/en/GPicView">GPicView</a> 是 LXDE 默认的图片查看器，轻量好用。有 GTK2 和 GTK3 版本，一般用 GTK3 版本就可以了。</li><li><a href="https://github.com/mate-desktop/engrampa">Engrampa</a> 是 MATE 默认的压缩文件管理器，个人认为 Linux 下最好的 GUI 压缩文件管理器。</li><li><a href="http://parcellite.sourceforge.net/">Parcellite</a> 是一个轻量的剪切板管理器，简单够用。</li></ul><h2 id="关于-compositor"><a href="#关于-compositor" class="headerlink" title="关于 compositor"></a>关于 compositor</h2><p>首先你需要问问自己，你是否真的需要 compositor？ 诚然，compositor 可以装饰窗口、实现透明效果，Compiz 这样重量级的 compositor 甚至可以实现很多炫酷的特效。但这值得吗？这些效果无法带来实质上的效率提升。compositor 在后台会占用很多 GPU 资源从而导致帧率的下降，如果你是游戏玩家的话这尤为关键：在我的电脑上，开启 compositor 后 CS:GO 的帧率会下降接近四分之一。 另外，没有正确配置的 compositor 可能会导致令人很不舒服的画面撕裂等问题。</p><p>如果你一定要使用 compositor，我推荐以下两个：</p><ul><li><a href="https://wiki.archlinux.org/index.php/Picom">picom</a> 是已经停止开发的 Compton 的后继开发产物，简单轻量，适合不需要太多装饰与特效的人。</li><li><a href="http://www.compiz.org/">Compiz</a> 是最有名的重量级 compositor，它甚至可以单独作为一个 WM 使用。能实现非常多效果，并且有完备的生态与社区。</li></ul><h2 id="对触控板的调校"><a href="#对触控板的调校" class="headerlink" title="对触控板的调校"></a>对触控板的调校</h2><p>可以参考我的另一篇文章<a href="https://www.eaimty.com/2020/09/optimize-touchpad-on-linux-with-libinput-driver.html">《对 Linux 下触控板按键、加速和手势的优化（libinput）》</a></p><h1 id="写作初衷"><a href="#写作初衷" class="headerlink" title="写作初衷"></a>写作初衷</h1><p>去年我买了一台游戏本作为主力 PC，当时觉得，既然是游戏本，那用 Windows 应该是理所当然的，就把我的整个工作环境迁移到了 Windows 上。用了大概半年，我彻底受够了 Windows：催命般的 Windows Update、相当于没有的包管理…最恶心的还是注册表，这东西简直就是人类科技的倒退。</p><p>今年一月，我切换到了最近大红大紫的 Manjaro，具体版本是 Manjaro XFCE Edition Minimal。 这一用就是半年，我最终还是决定换掉它，原因就是：它注重“傻瓜化”。但我不是傻瓜啊…Manjaro 为了达到“开箱即用”的状态集成了太多没用的组件，就算是 Minimal 版本也是如此。例如，yay 已经够好了，然而 Manjaro 还是要再带一个 pamac，虽然说 pamac 的重点在于它的 GUI,但市面上 pacman 和 AUR Helper 的 GUI 已经很多了，使用体验不错的也有不少。另外，不知为何，Manjaro 经常会在更新时搞坏一些东西，默认的 theme 就在某次大版本更新时坏掉过，导致很多 GTK 程序变得辣眼睛；Optimus Manager 也在某次更新过后出过问题，需要重启 2 次 DE 才能成功切换显卡。每次处理这类问题都十分麻烦耗时，这也是庞大臃肿系统桌面环境的通病。 我对 Manjaro 的最终印象是：适合小白与非常懒的用户（连手动配置一次环境都懒得做的那类人），且由于 Manjaro 基于 Arch，有 AUR 这样一个方便的软件包来源，几乎没有手动编译软件的需要。</p><p>最终我还是换回了 Arch，自己动手拼凑了桌面环境。 感觉在中文互联网上关于自己拼凑 Linux 桌面环境的文章少之又少，于是便有了写这篇文章的想法。在鸽了 N 个星期后，终于写完并发布了这篇文章。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nano 编辑器可以做些什么？</title>
    <link href="/Linux/e527aabb/"/>
    <url>/Linux/e527aabb/</url>
    
    <content type="html"><![CDATA[<p>终端下如果你不喜欢 Vim&#x2F;Emacs 的话，Nano 是一个不错的选择，它是一个真正意义上的跨平台编辑器，基本上在所有 Linux 发行版上都默认自带 Nano，并且有 Windows 版本。</p><p>不少初学 Linux 都很喜欢用 Nano，但是我发现他们很多都是在裸用，既没配置，也一直在用一些比较低效的操作方法。</p><p><strong>Q：下面的帮助占三行，很碍眼，能否隐藏？</strong></p><p>可以在编辑时使用 ALT+x 就可以切换下面的帮助信息，或者在你的 ~&#x2F;.nanorc 里面加一行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> nohelp <br></code></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image-2.webp" alt="img"></p><p>恩，那两行恶心的帮助已经被我们去掉了，需要时还可以用 ALT+x 把它切换回来。</p><p><strong>Q：如何打开语法高亮？</strong></p><p>有的 Linux 发行版自带了 &#x2F;etc&#x2F;nanorc 文件，里面定义了语法高亮，而另外一些系统可能没有这个定义，你需要在 ~&#x2F;.nanorc 中加一行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/usr/share/nano/*.nanorc&quot;</span><br></code></pre></td></tr></table></figure><p>各种语言的语法文件一般位于：&#x2F;usr&#x2F;share&#x2F;nano&#x2F; 下面，设置前先确认一下。</p><p><strong>Q：怎么编辑 ~&#x2F;.nanorc，常用设置有哪些？</strong></p><p>常见的 nano 配置如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> tabsize 4       # 设置制表符宽度<br><span class="hljs-built_in">set</span> autoindent      # 允许自动缩进<br><span class="hljs-built_in">set</span> cut             # 设置 CTRL-K 可以剪贴到行末<br><span class="hljs-built_in">set</span> noconvert       # 不要转换 DOS/UNIX 换行符<br><span class="hljs-built_in">set</span> nowrap          # 不要自动换行<br><span class="hljs-built_in">set</span> nohelp          # 不显示下面两行帮助<br><span class="hljs-built_in">set</span> morespace       # 隐藏标题下的空白行，换取更多编辑空间<br><span class="hljs-built_in">set</span> smooth          # 平滑卷屏<br><span class="hljs-built_in">set</span> suspend         # 允许 ctrl-z 将 nano 置于后台<br><span class="hljs-built_in">set</span> smarthome       # 第一次 Home 跳到行首非空字符，第二次到行首<br><span class="hljs-built_in">set</span> tabstospaces    # 展开制表符为空格（如果需要的话）<br><span class="hljs-built_in">set</span> mouse           # 允许鼠标<br><span class="hljs-built_in">set</span> linenumbers     # 显示行号（可以在编辑时 ALT-# 切换）<br><span class="hljs-built_in">set</span> backupdir path  # 设置备份路径<br><span class="hljs-built_in">set</span> backup          # 允许保存备份<br><span class="hljs-built_in">set</span> casesensitive   # 搜索使用大小写敏感<br><span class="hljs-built_in">set</span> multibuffer     # 使用 CTRL-r 读取文件时，默认读取到新缓存<br><span class="hljs-built_in">set</span> nonewlines      # 不在文件末尾添加新行<br>include &lt;filename&gt;  # 加载额外配置，通常是 /usr/share/nano 下的各种语法文件<br></code></pre></td></tr></table></figure><p>上面配置因人而异，可以选择性添加，不过一般向类似：制表符宽度，隐藏帮助，显示行号，语法高亮，以及平滑卷屏等基本上是必开的选项：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image-3.webp" alt="img"></p><p>经过调教，nano看起来比较顺眼了，你如果嫌弃行号碍眼，可以从 nanorc 里去除，或者需要的时候用 ALT+# 切换。</p><p><strong>Q：如何复制粘贴？</strong></p><p>原来下面的帮助并没有复制粘贴的信息，一般用 ALT+a 开始选择，ALT+^ 复制选择的部分，CTRL+u 粘贴先前复制的东西。版本 2.7.4 以后可以 SHIFT+方向 直接选择，然后 ALT+^ 复制。</p><p><strong>Q：如果 Redo&#x2F;Undo ?</strong></p><p>ALT+u 可以撤销，ALT+e 可以重复。</p><p><strong>Q：可以进行多文档编辑吗？</strong></p><p>见很多人用 Nano 都是命令行：nano &lt;文件名&gt; 编辑完以后 CTRL+O，CTRL+X 保存退出，然后再打开另外一个文件，编辑完又退出。其实 nano 下面可以很高效的同时打开多个文档进行编辑，然后用下面一组快捷键切换文件：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ALT<span class="hljs-punctuation">+</span>&lt;    <span class="hljs-meta"># 切换到上一个文件</span><br>ALT<span class="hljs-punctuation">+</span>&gt;    <span class="hljs-meta"># 切换到下一个文件</span><br></code></pre></td></tr></table></figure><p>其实不用 ALT+SHIFT+, 来输入 ALT+&lt;，有个简易快捷 ALT+, 直接等同于 ALT+&lt;：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image-1.webp" alt="img"></p><p>切换了文件后，最下面会显示现在切换到了哪个文件。</p><p>某个文件编辑完了可以 CTRL+X 关闭，如果所有文件都关闭了，就会退出 nano。打开新文件可以用 CTRL+r ALT+f ，然后输入文件名即可打开，输入文件名时可以用 TAB 进行补全。</p><p>很多人不知道，其实 Nano 中还自带一个“文件浏览器”，按 CTRL+R CTRL+T 后，打开浏览器选择文件界面，可以让你方便的在文本界面中选择希望打开的文件：</p><p><img src="/./../images/Nano%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88/1719295700-image.webp" alt="img"></p><p>该界面下用方向键控制光标，回车键打开文件或者进入目录，CTRL+C 退出文件选择界面。</p><p><strong>Q：哪里寻找更多关于 Nano 的使用帮助？</strong></p><p>其他 Nano 更多关于：复制，粘贴，搜索，替换的内容，见我制作的《<a href="https://github.com/skywind3000/awesome-cheatsheets/blob/master/editors/nano.txt">Nano指令速查表</a>》，除此之外，还有一些有用的网络资源：</p><ul><li>最新下载：<a href="https://www.nano-editor.org/">https://www.nano-editor.org/</a></li><li>官方手册：<a href="https://www.nano-editor.org/dist/v2.9/nano.html">https://www.nano-editor.org/dist/v2.9/nano.html</a></li><li>中文帮助：<a href="http://blog.sina.com.cn/s/blog_5d9f545101010b1y.html">http://blog.sina.com.cn/s/blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程_Scoop:超好用的Windows包管理器</title>
    <link href="/Scoop-Windows/23e0cb97/"/>
    <url>/Scoop-Windows/23e0cb97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/lukesampson/scoop">Scoop</a> 是一个 Win­dows 包管理工具，类似于 De­bian 的 <code>apt</code>、ma­cOS 的 <code>homebrew</code>。它由开源社区驱动，体验可能是是目前所有 Win­dows 包管理工具中最好的。对开发者来说，包管理器能非常方便的部署开发环境，比如 Python 、Node.js 。而对于像博主这样的普通的计算机使用者来说，可以方便的安装一些常用软件，尤其是开源软件，免去了手动去官网下载的繁琐步骤，而且后续对软件进行升级只需要输入一行命令，非常便捷。</p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Windows 7 SP1 + &#x2F; Windows Server 2008+</li><li><a href="https://p3terx.com/go/aHR0cHM6Ly9ha2EubXMvd21mNWRvd25sb2Fk">PowerShell 5</a>（或更高版本，包括 <a href="https://p3terx.com/go/aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcG93ZXJzaGVsbC9zY3JpcHRpbmcvaW5zdGFsbC9pbnN0YWxsaW5nLXBvd2Vyc2hlbGwtY29yZS1vbi13aW5kb3dzP3ZpZXc9cG93ZXJzaGVsbC02">PowerShell Core</a>）和 <a href="https://p3terx.com/go/aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9uZXQvZG93bmxvYWQ">.NET Framework 4.5</a>（或更高版本）Win10(11)默认满足此条件</li><li>Windows 用户名为英文（Windows 用户环境变量中路径值不支持中文字符）</li><li><strong>正常、快速</strong>的访问 GitHub 并下载资源</li></ul><h2 id="安装-Scoop"><a href="#安装-Scoop" class="headerlink" title="安装 Scoop"></a>安装 Scoop</h2><p>Scoop 默认使用普通用户权限，其本体和安装的软件默认会放在 <code>%USERPROFILE%\scoop</code>(即 <code>C:\Users\用户名\scoop</code>)，使用管理员权限进行全局安装 (<code>-g</code>) 的软件在 <code>C:\ProgramData\scoop</code>。如果有自定安装路径的需求，那么要提前设置好环境变量，否则后续再改不是一件容易的事情。</p><ul><li>打开 PowerShell</li><li>设置用户安装路径</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP=<span class="hljs-string">&#x27;C:\Scoop&#x27;</span></span><br>[<span class="hljs-title class_">Environment</span>]<span class="hljs-symbol">:</span><span class="hljs-symbol">:SetEnvironmentVariable</span>(<span class="hljs-string">&#x27;SCOOP&#x27;</span>, <span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP</span>, <span class="hljs-string">&#x27;User&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>设置全局安装路径（需要管理员权限）</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP_GLOBAL=<span class="hljs-string">&#x27;C:\Scoop_Global&#x27;</span></span><br>[<span class="hljs-title class_">Environment</span>]<span class="hljs-symbol">:</span><span class="hljs-symbol">:SetEnvironmentVariable</span>(<span class="hljs-string">&#x27;SCOOP_GLOBAL&#x27;</span>, <span class="hljs-variable">$env</span><span class="hljs-symbol">:SCOOP_GLOBAL</span>, <span class="hljs-string">&#x27;Machine&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>设置允许 PowerShell 执行本地脚本</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Set</span><span class="hljs-operator">-</span>ExecutionPolicy <span class="hljs-operator">-</span>ExecutionPolicy RemoteSigned <span class="hljs-operator">-</span><span class="hljs-keyword">Scope</span> CurrentUser<br></code></pre></td></tr></table></figure><ul><li>安装 Scoop</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iwr</span> <span class="hljs-literal">-useb</span> get.scoop.sh | <span class="hljs-built_in">iex</span>  <br><span class="hljs-built_in">iex</span> (<span class="hljs-built_in">new-object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://get.scoop.sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>其实,上面两种都不可行</strong><br>先配置Host文件，加上<br>199.232.68.133 raw.githubusercontent.com<br>然后执行另一条可用的网址的命令:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">iex (<span class="hljs-keyword">new</span>-<span class="hljs-built_in">object</span> net.webclient).downloadstring(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1&#x27;</span>)  <br></code></pre></td></tr></table></figure><ul><li>没安装过 Git 则需要安装。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>最基础的使用方法和其它包管理器类似，这里就不做赘述了，直接上命令列表：</p><ul><li><code>scoop search &lt;app&gt;</code> - 搜索软件</li><li><code>scoop install &lt;app&gt;</code> - 安装软件</li><li><code>scoop info &lt;app&gt;</code> - 查看软件详细信息</li><li><code>scoop list</code> - 查看已安装软件</li><li><code>scoop uninstall &lt;app&gt;</code> - 卸载软件，<code>-p</code>删除配置文件。</li><li><code>scoop update</code> - 更新 scoop 本体和软件列表</li><li><code>scoop update &lt;app&gt;</code> - 更新指定软件</li><li><code>scoop update *</code> - 更新所有已安装的软件</li><li><code>scoop checkup</code> - 检查 scoop 的问题并给出解决问题的建议</li><li><code>scoop help</code> - 查看命令列表</li><li><code>scoop help &lt;command&gt;</code> - 查看命令帮助说明</li></ul><h3 id="迁移到新电脑"><a href="#迁移到新电脑" class="headerlink" title="迁移到新电脑"></a>迁移到新电脑</h3><p>将文件夹拷贝到新电脑,将文件夹添加到环境变量然后<code>scoop reset *</code></p><h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><p>因为某些原因，Scoop在国内经常访问不了，可以选择更换源比如<a href="https://gitee.com/squallliu/scoop">这个</a>,但本人并未使用此方法，更建议配置代理。</p><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="添加-bucket"><a href="#添加-bucket" class="headerlink" title="添加 bucket"></a>添加 bucket</h3><p>所有的包管理器都会有相应的软件仓库 ，而 bucket 就是 Scoop 中的软件仓库。细心的你可能会发现 <code>scoop</code> 翻译为中文是 “舀”，而 <code>bucket</code> 是 “水桶”，所以安装软件可以理解为从水桶里舀水，似乎很形象的说。<br>Scoop 默认软件仓库（main bucket）软件数量是有限的，但是可以进行额外的添加。通过 <code>scoop bucket known</code> 命令可以查看官方认可的 bucket：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span>known<br>main<br><span class="hljs-keyword">extras</span><br><span class="hljs-keyword"></span>versions<br>nightlies<br>nirsoft<br>php<br>nerd-fonts<br>nonportable<br><span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>games<br><span class="hljs-keyword">jetbrains</span><br></code></pre></td></tr></table></figure><p>以上官方认可的 bucket 可以通过下面这个命令直接添加：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span>&lt;<span class="hljs-keyword">bucketname&gt;</span><br></code></pre></td></tr></table></figure><p>好像有人添加bucket出现问题？如有，请在评论区提出。</p><p><a href="https://github.com/lukesampson/scoop-extras">extras</a> 涵盖了大部分因为种种原因不能被收录进主仓库的常用软件，这个是强推荐添加的。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span><span class="hljs-keyword">extras</span><br></code></pre></td></tr></table></figure><p>常用的写盘工具 Ru­fus 就在 <code>extras</code> 这个仓库中。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>rufus<br></code></pre></td></tr></table></figure><p><a href="https://github.com/matthewjberger/scoop-nerd-fonts">nerd-fonts</a> 包含了美化终端时会用到的 Pow­er­line 字体</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">bucket </span><span class="hljs-keyword">add </span>nerd-fonts<br></code></pre></td></tr></table></figure><p>当添加 <code>nerd-fonts</code> 仓库后可以通过以下命令搜索到所有的字体：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">scoop <span class="hljs-keyword">search</span> &quot;-NF&quot;<br></code></pre></td></tr></table></figure><p>安装字体需要使用管理员权限：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo <span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>FiraCode-NF<br></code></pre></td></tr></table></figure><h4 id="第三方-bucket"><a href="#第三方-bucket" class="headerlink" title="第三方 bucket"></a>第三方 bucket</h4><p>添加第三方 bucket</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">scoop bucket <span class="hljs-keyword">add</span> &lt;bucketname&gt; https:<span class="hljs-comment">//github.com/xxx/xxx</span><br></code></pre></td></tr></table></figure><p>从第三方 bucket 中安装软件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>&lt;<span class="hljs-keyword">bucketname&gt;/&lt;app&gt;</span><br></code></pre></td></tr></table></figure><p>这里给出一个第三方软件源<a href="https://github.com/rasa/scoop-directory">Scoop Directory</a>,它记录了 Github 上各种 bucket。</p><h3 id="清理安装包缓存"><a href="#清理安装包缓存" class="headerlink" title="清理安装包缓存"></a>清理安装包缓存</h3><p>Scoop 会保留下载的安装包，对于卸载后又想再安装的情况，不需要重复下载。但长期累积会占用大量的磁盘空间，如果用不到就成了垃圾。这时可以使用 <code>scoop cache</code> 命令来清理。</p><ul><li><code>scoop cache show</code> - 显示安装包缓存</li><li><code>scoop cache rm &lt;app&gt;</code> - 删除指定应用的安装包缓存</li><li><code>scoop cache rm *</code> - 删除所有的安装包缓存</li></ul><p>如果你不希望安装和更新软件时保留安装包缓存，可以加上 <code>-k</code> 或 <code>--no-cache</code> 选项来禁用缓存：</p><ul><li><code>scoop install -k &lt;app&gt;</code></li><li><code>scoop update -k *</code></li></ul><h3 id="删除旧版本软件"><a href="#删除旧版本软件" class="headerlink" title="删除旧版本软件"></a>删除旧版本软件</h3><p>当软件被更新后 Scoop 还会保留软件的旧版本，更新软件后可以通过 <code>scoop cleanup</code> 命令进行删除。</p><ul><li><code>scoop cleanup &lt;app&gt;</code> - 删除指定软件的旧版本</li><li><code>scoop cleanup *</code> - 删除所有软件的旧版本</li></ul><p>与安装软件一样，删除旧版本软件的同时也可以清理安装包缓存，同样是加上 <code>-k</code> 选项。</p><ul><li><code>scoop cleanup -k &lt;app&gt;</code> - 删除指定软件的旧版本并清除安装包缓存</li><li><code>scoop cleanup -k *</code> - 删除所有软件的旧版本并清除安装包缓存</li></ul><h3 id="在同一程序的不同版本之间切换"><a href="#在同一程序的不同版本之间切换" class="headerlink" title="在同一程序的不同版本之间切换"></a>在同一程序的不同版本之间切换</h3><p>使用命令：<code>scoop reset [app]@[version]</code><br>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop reset idea-ultimate-eap@201.6668.13<br><br>scoop reset idea-ultimate-eap@201.6073.9<br><br><span class="hljs-comment"># 切换到最新版本</span><br>scoop reset idea-ultimate-eap<br></code></pre></td></tr></table></figure><p>对应版本的程序需要已经安装于本地系统中；所以在你清除某个软件的旧版本时考虑一下自己是否还会再次使用到此旧版本。<br>另外 idea-ultimate-eap 切换过程可能需要更长时间。</p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>全局安装就是给系统中的所有用户都安装，且环境变量是系统变量，对于需要设置系统变量的一些软件就需要全局安装，比如 Node.js、Python ，否则某些情况会出现无法找到命令的问题。</p><p>使用 <code>scoop install &lt;app&gt;</code> 命令加上 <code>-g</code> 或 <code>--global</code> 选项可对软件进行全局安装，全局安装需要管理员权限，所以需要提前以管理员权限运行的 Pow­er­Shell 。更简单的方式是先安装 <code>sudo</code>，然后用 <code>sudo</code> 命令来提权执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>sudo<br>sudo <span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>-g &lt;app&gt;<br></code></pre></td></tr></table></figure><blockquote><p>达成在 Win­dows 上使用<code>sudo</code>的成就</p></blockquote><p>使用 <code>scoop list</code> 命令查看已装软件时，全局安装的软件末尾会有 <code>*global*</code> 标志。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">➜ <span class="hljs-keyword">scoop </span>list<br><span class="hljs-keyword">Installed </span>apps:<br><br>  <span class="hljs-number">7</span>zip <span class="hljs-number">19</span>.<span class="hljs-number">00</span><br>  adb <span class="hljs-number">30</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>  aria2 <span class="hljs-number">1</span>.<span class="hljs-number">35</span>.<span class="hljs-number">0</span><span class="hljs-number">-1</span><br>  <span class="hljs-keyword">busybox </span><span class="hljs-number">3466</span>-g53c09d0e1<br>  CascadiaCode-NF <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> [nerd-fonts]<br>  colortool <span class="hljs-number">1904</span>.<span class="hljs-number">29002</span><br>  dark <span class="hljs-number">3</span>.<span class="hljs-number">11</span>.<span class="hljs-number">2</span> *global*<br>  ffmpeg <span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br>  figlet <span class="hljs-number">1</span>.<span class="hljs-number">0</span>-go<br>  FiraCode-NF <span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> [nerd-fonts]<br>  git <span class="hljs-number">2</span>.<span class="hljs-number">26</span>.<span class="hljs-number">2</span>.windows.<span class="hljs-number">1</span> *global*<br>  innounp <span class="hljs-number">0</span>.<span class="hljs-number">49</span><br>  iperf3 <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span><br>  lessmsi <span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">91</span> *global*<br>  lxrunoffline <span class="hljs-number">3</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span> [<span class="hljs-keyword">extras]</span><br><span class="hljs-keyword"></span>  nano <span class="hljs-number">4</span>.<span class="hljs-number">9</span><span class="hljs-number">-4</span><br>  neofetch <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>  nodejs-lts <span class="hljs-number">12</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span> *global*<br>  python <span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">3</span> *global*<br>  rclone <span class="hljs-number">1</span>.<span class="hljs-number">52</span>.<span class="hljs-number">0</span><br>  rufus <span class="hljs-number">3</span>.<span class="hljs-number">10</span> [<span class="hljs-keyword">extras]</span><br><span class="hljs-keyword"></span>  <span class="hljs-keyword">screentogif </span><span class="hljs-number">2</span>.<span class="hljs-number">24</span>.<span class="hljs-number">2</span> [<span class="hljs-keyword">extras]</span><br><span class="hljs-keyword"></span>  sudo <span class="hljs-number">0</span>.<span class="hljs-number">2020</span>.<span class="hljs-number">01</span>.<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p>此外对于全局软件的更新和卸载等其它操作，都需要加上 <code>-g</code> 选项：</p><ul><li><code>sudo scoop update -g *</code> - 更新所有软件（且包含全局软件）</li><li><code>sudo scoop uninstall -g &lt;app&gt;</code> - 卸载全局软件</li><li><code>sudo scoop uninstall -gp &lt;app&gt;</code> - 卸载全局软件（并删除配置文件）</li><li><code>sudo scoop cleanup -g *</code> - 删除所有全局软件的旧版本</li><li><code>sudo scoop cleanup -gk *</code> - 删除所有全局软件的旧版本（并清除安装包包缓存）</li></ul><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><blockquote><p>⚠️️ 注意：请在 Powershell 中运行下面的命令</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 可用操作</span><br>scoop alias add|list|<span class="hljs-built_in">rm</span> [&lt;<span class="hljs-type">args</span>&gt;]<br><br><span class="hljs-comment">## 添加别名，格式：</span><br>scoop alias add &lt;name&gt; &lt;command&gt; &lt;description&gt;<br><br><span class="hljs-comment"># 示例：（注意：必须在 Powershell中运行）</span><br>scoop alias add st <span class="hljs-string">&#x27;scoop status&#x27;</span> <span class="hljs-string">&#x27;检查更新&#x27;</span><br><span class="hljs-comment"># 检查已添加的别名</span><br>scoop alias list <span class="hljs-literal">-v</span><br><br>Name Command      Summary<br><span class="hljs-literal">----</span> <span class="hljs-literal">-------</span>      <span class="hljs-literal">-------</span><br>st   scoop status 检查更新<br><br><span class="hljs-comment"># 测试已添加的别名 st</span><br>scoop st<br><br><br><span class="hljs-comment"># 另一个示例：</span><br>scoop alias add <span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;scoop uninstall $args[0]&#x27;</span> <span class="hljs-string">&#x27;卸载某 app&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><blockquote><p>因为种种原因，有时Scoop会连不上Github，请检查您的代理服务器(比如重启代理软件)。</p></blockquote><p>Scoop 默认使用的是系统代理，如果你想手动指定代理，可以输入下面的命令。需要注意的是只支持 http 协议。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-built_in">config</span> proxy localhost:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><p><strong>警告：有些代理软件器http协议使用端口与https协议使用端口并不相同，比如Vray，配置的时候需要使用正确的端口，有的是用使用系统默认代理设置也是可以的，具体情况具体看待吧。</strong><br><a href="https://fastly.jsdelivr.net/gh/Edge-coordinates/PicBed/imgs_for_blogs/20220712084509.png"><img src="https://fastly.jsdelivr.net/gh/Edge-coordinates/PicBed/imgs_for_blogs/20220712084509.png" alt="img"></a></p><blockquote><p>设置完可以通过<code>scoop config proxy</code>查看。</p></blockquote><p>如果你想取消代理，那么输入下面的命令，这将会恢复使用系统代理。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-built_in">config</span> rm proxy<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>手动配置http代理后aria2多线程下载有概率不可使用，求修复方案。。。谢谢！</li></ul><h3 id="开启多线程下载"><a href="#开启多线程下载" class="headerlink" title="开启多线程下载"></a>开启多线程下载</h3><p>使用 Scoop 安装 Aria2 后，Scoop 会自动调用 Aria2 进行多线程加速下载。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>aria2<br></code></pre></td></tr></table></figure><p>使用 <code>scoop config</code> 命令可以对 Aria2 进行设置，比如 <code>scoop config aria2-enabled false</code> 可以禁止调用 Aria2 下载。以下是与 Aria2 有关的设置选项：</p><ul><li><code>aria2-enabled</code>: 开启 Aria2 下载，默认<code>true</code></li><li><code>aria2-retry-wait</code>: 重试等待秒数，默认<code>2</code></li><li><code>aria2-split</code>: 单任务最大连接数，默认<code>5</code></li><li><code>aria2-max-connection-per-server</code>: 单服务器最大连接数，默认<code>5</code> ，最大<code>16</code></li><li><code>aria2-min-split-size</code>: 最小文件分片大小，默认<code>5M</code></li></ul><p>更详细的见<a href="https://aria2.github.io/manual/en/html/aria2c.html#cmdoption-retry-wait">这里</a>，博主在这里推荐以下优化设置，单任务最大连接数设置为 <code>32</code>，单服务器最大连接数设置为 <code>16</code>，最小文件分片大小设置为 <code>1M</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop config aria2-split 32<br>scoop config aria2-max-connection-per-server 16<br>scoop config aria2-min-split-size 1M<br></code></pre></td></tr></table></figure><h3 id="利用-aria2-进行断点续传"><a href="#利用-aria2-进行断点续传" class="headerlink" title="利用 aria2 进行断点续传"></a>利用 aria2 进行断点续传</h3><p>先看具体示例：</p><p>scoop 更新 vscode 时下载到 80% 的时候 失败了（安装时处理方法也一样）。我们需要在提示中找到如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;D:\Scoop\Applications\apps\aria2\current\aria2c.exe&#x27;</span> --input-file=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\vscode-portable.txt&#x27;</span> <br>--user-agent=<span class="hljs-string">&#x27;Scoop/1.0 (+http://scoop.sh/) PowerShell/5.1 (Windows NT 10.0; Win64; x64; Desktop)&#x27;</span> <br>--allow-overwrite=<span class="hljs-literal">true</span> --auto-file-renaming=<span class="hljs-literal">false</span> --retry-wait=2 <br>--<span class="hljs-built_in">split</span>=5 --max-connection-per-server=5 --min-split-size=5M <br>--console-log-level=warn --enable-color=<span class="hljs-literal">false</span> --no-conf=<span class="hljs-literal">true</span> <br>--follow-metalink=<span class="hljs-literal">true</span> --metalink-preferred-protocol=https <br>--min-tls-version=TLSv1.2 --stop-with-process=15584 --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><p>我们从上面的信息中提取出下面的命令；若要进行断点续传，只需再次执行下面的命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aria2c.exe --input-file=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\vscode-portable.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>当提示下载完成后，我们需要再次运行 scoop 对应的 app 更新命令（或安装命令），即可完成 app 更新（或安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scoop update vscode-portable<br></code></pre></td></tr></table></figure><h2 id="一些使用实例"><a href="#一些使用实例" class="headerlink" title="一些使用实例"></a>一些使用实例</h2><h3 id="安装和切换JDK、Python的版本"><a href="#安装和切换JDK、Python的版本" class="headerlink" title="安装和切换JDK、Python的版本"></a>安装和切换JDK、Python的版本</h3><blockquote><p>转载自<a href="https://www.thisfaner.com/p/scoop/#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%87%E6%8D%A2jdkpython%E7%9A%84%E7%89%88%E6%9C%AC">Scoop包管理器的相关技巧和知识</a>，相关内容仅作介绍，一般来说版本管理还是交给专门软件比较好，python可以使用虚拟环境或Anaconda.</p></blockquote><p>这里需要使用<code>scoop reset</code>它的作用是：重置一个应用程序来解决冲突。<br>命令格式为：<code>scoop reset &lt;java&gt;[@&lt;version&gt;]</code></p><p>安装和切换不同的 JDK 版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:&gt; scoop bucket add java<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install oraclejdk<br>Installing <span class="hljs-string">&#x27;oraclejdk&#x27;</span> (<span class="hljs-number">12.0</span>.<span class="hljs-number">2</span><span class="hljs-literal">-10</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install zulu6<br>Installing <span class="hljs-string">&#x27;zulu6&#x27;</span> (<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop install openjdk10<br>Installing <span class="hljs-string">&#x27;openjdk10&#x27;</span> (<span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>) [<span class="hljs-number">64</span><span class="hljs-type">bit</span>]<br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>openjdk version <span class="hljs-string">&quot;10.0.1&quot;</span> <span class="hljs-number">2018</span><span class="hljs-literal">-04-17</span><br>OpenJDK Runtime Environment (build <span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">10</span>)<br>OpenJDK <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">10.0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">10</span>, mixed mode)<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop reset zulu6<br>Resetting zulu6 (<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span>).<br>Linking ~\scoop\apps\zulu6\current =&gt; ~\scoop\apps\zulu6\<span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>openjdk version <span class="hljs-string">&quot;1.6.0-99&quot;</span><br>OpenJDK Runtime Environment (Zulu <span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><span class="hljs-literal">-win64</span>) (build <span class="hljs-number">1.6</span>.<span class="hljs-number">0</span><span class="hljs-literal">-99-b99</span>)<br>OpenJDK <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (Zulu <span class="hljs-number">6.18</span>.<span class="hljs-number">1.5</span><span class="hljs-literal">-win64</span>) (build <span class="hljs-number">23.77</span><span class="hljs-literal">-b99</span>, mixed mode)<br><br><span class="hljs-built_in">PS</span> C:&gt; scoop reset oraclejdk<br><br><span class="hljs-built_in">PS</span> C:&gt; java <span class="hljs-literal">-version</span><br>java version <span class="hljs-string">&quot;12.0.2&quot;</span> <span class="hljs-number">2019</span><span class="hljs-literal">-07-16</span><br>Java(TM) SE Runtime Environment (build <span class="hljs-number">12.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">10</span>)<br>Java HotSpot(TM) <span class="hljs-number">64</span><span class="hljs-literal">-Bit</span> Server VM (build <span class="hljs-number">12.0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">10</span>, mixed mode, sharing)<br></code></pre></td></tr></table></figure><p>安装和切换不同的 Python 版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scoop bucket add versions <span class="hljs-comment"># add the &#x27;versions&#x27; bucket if you haven&#x27;t already</span><br><br>scoop install python27 python<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 3.6.2</span><br><br><span class="hljs-comment"># switch to python 2.7.x</span><br>scoop reset python27<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 2.7.13</span><br><br><span class="hljs-comment"># switch back (to 3.x)</span><br>scoop reset python<br>python <span class="hljs-literal">--version</span> <span class="hljs-comment"># -&gt; Python 3.6.2</span><br></code></pre></td></tr></table></figure><h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><p>emm想要记住上文那么多的知识有些困难，这里总结一下 Scoop 在日常使用中常用的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 更新 scoop 及软件包列表</span><br>scoop update<br><br><span class="hljs-comment">## 安装软件 ##</span><br><span class="hljs-comment"># 非全局安装（并禁止安装包缓存）</span><br>scoop install <span class="hljs-literal">-k</span> &lt;app&gt;<br><span class="hljs-comment"># 全局安装（并禁止安装包缓存）</span><br>sudo scoop install <span class="hljs-literal">-gk</span> &lt;app&gt;<br><br><span class="hljs-comment">## 卸载软件 ##</span><br><span class="hljs-comment"># 卸载非全局软件（并删除配置文件）</span><br>scoop uninstall <span class="hljs-literal">-p</span> &lt;app&gt;<br><span class="hljs-comment"># 卸载全局软件（并删除配置文件）</span><br>sudo scoop uninstall <span class="hljs-literal">-gp</span> &lt;app&gt;<br><br><span class="hljs-comment">## 更新软件 ##</span><br><span class="hljs-comment"># 更新所有非全局软件（并禁止安装包缓存）</span><br>scoop update <span class="hljs-literal">-k</span> *<br><span class="hljs-comment"># 更新所有软件（并禁止安装包缓存）</span><br>sudo scoop update <span class="hljs-literal">-gk</span> *<br><br><span class="hljs-comment">## 垃圾清理 ##</span><br><span class="hljs-comment"># 删除所有旧版本非全局软件（并删除软件包缓存）</span><br>scoop cleanup <span class="hljs-literal">-k</span> *<br><span class="hljs-comment"># 删除所有旧版本软件（并删除软件包缓存）</span><br>sudo scoop cleanup <span class="hljs-literal">-gk</span> *<br><span class="hljs-comment"># 清除软件包缓存</span><br>scoop cache <span class="hljs-built_in">rm</span> *<br></code></pre></td></tr></table></figure><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>文章仍有许多不足之处，希望大家可以指出，如有疑问，请大家在评论区中提出，也请看到的人积极回答，我将尽力解答并收集问题以完善文章。</p><h2 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h2><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><h4 id="fatal-unable-to-access-‘https-github-com-lukesampson-scoop-extras-‘-OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#fatal-unable-to-access-‘https-github-com-lukesampson-scoop-extras-‘-OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="fatal: unable to access ‘https://github.com/lukesampson/scoop-extras/‘: OpenSSL SSL_read: Connection was reset, errno 10054"></a>fatal: unable to access ‘<a href="https://github.com/lukesampson/scoop-extras/">https://github.com/lukesampson/scoop-extras/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">fatal: unable to access <span class="hljs-string">&#x27;https://github.com/lukesampson/scoop/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno <span class="hljs-number">10054</span><br>Update failed.<br>fatal: unable to access <span class="hljs-string">&#x27;https://github.com/lukesampson/scoop-extras/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno <span class="hljs-number">10054</span><br></code></pre></td></tr></table></figure><p>遇到这种情况请<strong>检查代理</strong>，参考<a href="https://www.cnblogs.com/Edge-coordinates/p/15130184.html#%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">代理设置</a></p><h4 id="手动配置http代理后aria2多线程下载不可使用"><a href="#手动配置http代理后aria2多线程下载不可使用" class="headerlink" title="手动配置http代理后aria2多线程下载不可使用"></a>手动配置http代理后aria2多线程下载不可使用</h4><p>如题，求解决方案，如果有大佬知道可以分享在评论区，谢谢~</p><h3 id="安装软件失败"><a href="#安装软件失败" class="headerlink" title="安装软件失败"></a>安装软件失败</h3><h4 id="网络问题导致app安装失败"><a href="#网络问题导致app安装失败" class="headerlink" title="网络问题导致app安装失败"></a>网络问题导致app安装失败</h4><p>step1:<strong>检查代理</strong>,下载7zip,aria2失败需要开代理，可以直接将代理软件设为全局，也可以自己配置。<br>step2:<strong>手动下载安装文件</strong><br>一个实例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">ERROR</span> <span class="hljs-title class_">Download</span> failed! (<span class="hljs-title class_">Error</span> <span class="hljs-number">1</span>) <span class="hljs-title class_">An</span> unknown error occurred<br><span class="hljs-variable constant_">ERROR</span> <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mediaarea.net/download</span><span class="hljs-regexp">/binary/mediainfo</span><span class="hljs-regexp">/19.09/</span><span class="hljs-title class_">MediaInfo</span>_CLI_19.09_Windows_x64.zip<br>    referer=<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/mediaarea.net/download</span><span class="hljs-regexp">/binary/mediainfo</span><span class="hljs-regexp">/19.09/</span><br>    dir=<span class="hljs-symbol">D:</span>\<span class="hljs-title class_">Scoop</span>\<span class="hljs-title class_">Applications</span>\cache<br>    out=mediainfo<span class="hljs-comment">#19.09#https_mediaarea.net_download_binary_mediainfo_19.09_MediaInfo_CLI_19.09_Windows_x64.zip</span><br><br><span class="hljs-variable constant_">ERROR</span> &amp; <span class="hljs-string">&#x27;D:\Scoop\Applications\apps\aria2\current\aria2c.exe&#x27;</span> --input-file=<span class="hljs-string">&#x27;D:\Scoop\Applications\cache\mediainfo.txt&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以发现文件的下载路径和下载后的文件名称，这里 <code>out=</code> 后面的压缩包就是下载后 文件的名称，(也可以在 scoop 的 <code>cache</code> 目录下的 <code>mediainfo.txt</code> 文件中找到下载路径与文 件名称)</p><p>然后我们可以尝试在浏览器或其他下载程序中（可以 fq 的程序中）下载该程序，下载完成 后再更改文件名并将其放入 scoop 的 <code>cache</code> 目录，最后再次运行 <code>scoop install mediainfo</code> 即可安装。</p><h4 id="其它问题导致安装失败"><a href="#其它问题导致安装失败" class="headerlink" title="其它问题导致安装失败"></a>其它问题导致安装失败</h4><p><img src="/./../images/%E6%95%99%E7%A8%8B-Scoop-%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/1719502269-scoop%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%A4%B1%E8%B4%A5.png" alt="img"></p><p>下载其他软件失败看看你有没有装某些软件，如sudo(用于全局安装的，导致某些语法无法使用，详见前文说的全局安装),反正我吧sudo删掉就好了~</p><h4 id="Scoop安装软件失败的原因分类"><a href="#Scoop安装软件失败的原因分类" class="headerlink" title="Scoop安装软件失败的原因分类"></a>Scoop安装软件失败的原因分类</h4><ol><li>未及时更新仓库</li><li>连不上Github，因为众所周知的原因，解决方案的话可以参考代理设置中的重启&#x2F;更换代理（参考：<a href="https://www.cnblogs.com/Edge-coordinates/p/15130184.html#%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE">代理设置</a>），还不可以的话可以尝试在浏览器中打开Github，然后再尝试。</li></ol><hr><blockquote><p>参考资料<br><a href="https://github.com/lukesampson/scoop/wiki">Scoop Documentation</a><br><a href="https://chawyehsu.com/blog/talk-about-scoop-the-package-manager-for-windows-again">再谈谈 Scoop 这个 Windows 下的软件包管理器</a><br><a href="https://sspai.com/post/52496">「一行代码」搞定软件安装卸载，用 Scoop 管理你的 Windows 软件</a><br><a href="https://p3terx.com/archives/scoop-the-best-windows-package-manager.html">Scoop - 最好用的 Windows 包管理器</a><br><a href="https://www.cnblogs.com/lioa/p/13565622.html">scoop的安装及基本使用</a><br><a href="https://zhuanlan.zhihu.com/p/135278662">你需要掌握的Scoop技巧和知识</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Scoop,Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win</tag>
      
      <tag>Scoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4 种实用方法：如何设置 Windows10/11 自动登录</title>
    <link href="/Windows/21f09687/"/>
    <url>/Windows/21f09687/</url>
    
    <content type="html"><![CDATA[<p>当启动 Windows PC 时，登录界面会列出一个或多个用户账户。你需要选择一个账户并通过身份验证才能进入桌面。Windows 支持多种登录验证方式，如密码和 <a href="https://www.sysgeek.cn/introduction-windows-hello-business/">Windows Hello</a>，这对于多用户设备来说会十分便利。</p><p>虽然现代计算机加载 Windows 的速度已经非常快，但跳过登录验证可以更快地开始工作。如果你是电脑的唯一使用者，还可以选择取消登录验证。接下来，我们就介绍如何在 Windows 11&#x2F;10 设备上设置自动登录。</p><h2 id="什么是-Windows-自动登录"><a href="#什么是-Windows-自动登录" class="headerlink" title="什么是 Windows 自动登录"></a>什么是 Windows 自动登录</h2><p>自动登录是 Windows 的一项便捷功能，允许不输入密码或 PIN 码即可登录电脑。它不仅能缩短开机时间，还能在从睡眠状态唤醒时省去重复验证的步骤，从而提升效率。</p><h3 id="使用场景与潜在风险"><a href="#使用场景与潜在风险" class="headerlink" title="使用场景与潜在风险"></a>使用场景与潜在风险</h3><p>通常情况下，我们不推荐在 Windows 设备上启用自动登录。因为任何能够物理接触到设备的人都能轻松访问你的敏感信息，并获得完整的管理权限。</p><p>在决定启用 Windows 自动登录之前，请考虑以下几点：</p><ul><li>不推荐在笔记本电脑、平板电脑或其他便携设备上启用，因为这些设备通常会带着到处跑。</li><li>不推荐在多人共用的电脑上启用。</li><li>可以在没有重要数据的虚拟机上启用。</li><li>可以在仅个人使用的家用电脑上启用（相对安全）。</li></ul><p>如果你的 Windows 中有多个用户账户，也可以只为某一个账户单独设置自动登录，从而保持其他主要账户的安全。</p><h2 id="在-Windows-中设置自动登录"><a href="#在-Windows-中设置自动登录" class="headerlink" title="在 Windows 中设置自动登录"></a>在 Windows 中设置自动登录</h2><p>Windows 并没有直接开启自动登录的选项，但我们可以通过以下 4 种方法来实现自动登录。</p><h3 id="方法-1：通过「用户账户」设置"><a href="#方法-1：通过「用户账户」设置" class="headerlink" title="方法 1：通过「用户账户」设置"></a>方法 1：通过「用户账户」设置</h3><p>1如果你使用 Microsoft 账户，请用<code>Windows + I</code>快捷键打开「Windows 设置」。</p><p>2选择「账户」-「登录选项」，然后关闭「为了提高安全性，仅允许对此设备上的 Microsoft 账户使用 Windows Hello 登录 」开关。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581002-windows-auto-login-p2-jpg.webp" alt="Windows 10">]</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581002-windows-auto-login-p3-jpg.webp" alt="Windows 11">]</p><p>3.使用<code>Windows + R</code>快捷键调出「运行」对话框，输入<code>netplwiz</code>打开「用户账户」设置窗口。</p><p>4取消勾选「要使用本计算机，用户必需输入用户名和密码」，然后点击「应用」按钮。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581003-windows-auto-login-p4-jpg.webp" alt="通过「用户账户」设置 Windows 自动登录">]</p><p>5此时会弹出「自动登录」对话框，在此输入密码两次，确认无误后点击「确定」即可。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581004-windows-auto-login-p5-jpg.webp" alt="输入账户密码">]</p><p>设置完成后，在登录时会自动帮你验证密码，但密码并未删除。如果你更改了账户密码，需要按以上步骤重新设置。</p><h3 id="方法-2：更改注册表设置"><a href="#方法-2：更改注册表设置" class="headerlink" title="方法 2：更改注册表设置"></a>方法 2：更改注册表设置</h3><p>我们也可以更改注册表配置来实现 Windows 10&#x2F;11 自动登录，操作步骤如下：</p><p>1使用<code>Windows + R</code>快捷键打开「运行」，输入<code>regedit</code>打开注册表编辑器。</p><p>2浏览到以下路径：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<br></code></pre></td></tr></table></figure><p>3在右侧窗口中并双击名为<code>AutoAdminLogon</code>的<strong>字符串值</strong>（如果没有就新建一个），并将其值设置为：</p><ul><li><code>0</code>禁用自动登录</li><li><code>1</code>启用自动登录</li></ul><p>4在右侧窗口中分别并双击名为<code>DefaultUserName</code>和<code>DefaultPassword</code>的<strong>字符串值</strong>（如果没有就新建），并将其值设置为：</p><ul><li><code>DefaultUserName</code>用于自动登录的账户名称</li><li><code>DefaultPassword</code>对应的账户密码</li></ul><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581005-windows-auto-login-p6-jpg.webp" alt="通过注册表设置 Windows 自动登录">]</p><p>注册表更改完成后，重启 Windows 就会生效。</p><p>手动更改注册表时，<code>DefaultPassword</code>使用的是明文。使用 Autologon 时，密码在注册表中会加密为 LSA 密文。</p><h3 id="方法-3：使用-Autologon-工具"><a href="#方法-3：使用-Autologon-工具" class="headerlink" title="方法 3：使用 Autologon 工具"></a>方法 3：使用 Autologon 工具</h3><p>如果想用更简单的方式来设置自动登录，<a href="https://www.sysgeek.cn/what-is-sysinternals-tools/">Sysinternals</a> 提供的 Autologon 工具是个不错的选择。它会自动修改注册表，帮助你启用 Windows 的自动登录功能，而无需去手动编辑。</p><p>1从 Microsoft 官方网站<a href="https://learn.microsoft.com/en-us/sysinternals/downloads/autologon">下载 Autologon 工具</a>。</p><p>2解压下载的文件，并根据你的 Windows 系统架构运行对应的 Autologon 程序。</p><p>3在打开的界面中核对用户名，然后在「Password」栏填入登录密码，并点击「Enable」按钮。一般家用电脑都是工作组环境，因此「Domain」一栏通常无需更改。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581006-windows-auto-login-p7-jpg.webp" alt="使用 Autologon 工具设置 Windows 自动登录">]</p><p>Autologon 不会校验密码是否正确，也不会检查用户账户是否有权限登录。</p><p>4设置成功后，屏幕会有「Autologon successfully configured」提示。点击「OK」完成设置。</p><p>完成以上步骤后，只需重启 Windows PC，就能实现免密码登录。要关闭此功能，可以重新打开 Autologon 并点击「Disable」禁用即可。</p><h3 id="方法-4：使用空密码账户（不推荐）"><a href="#方法-4：使用空密码账户（不推荐）" class="headerlink" title="方法 4：使用空密码账户（不推荐）"></a>方法 4：使用空密码账户（不推荐）</h3><p>我们也可以通过删除账户密码，也就是使用「空密码」来实现 Windows 自动登录。以下是操作步骤：</p><p>1使用<code>Windows + R</code>快捷键打开「运行」，输入<code>lusrmgr.msc</code>打开「本地用户和组」。</p><p>2在打开的窗口中，点击左侧的「用户」选项卡，然后在右侧面板中选择要删除密码的账户，右键点击并选择「设置密码」。</p><p>3当出现警告框时，点击「继续」按钮。</p><p>4在接下来的对话框中，不要输入任何内容，保持「新密码」和「确认密码」栏为空，直接点击「确定」完成设置。</p><p>[<img src="/./../images/4%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEWindows10-11%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/1719581006-windows-auto-login-p8-jpg.webp" alt="使用空密码账户实现 Windows 自动登录">]</p><p>执行以上步骤后，Windows 将不再要求输入密码来登录账户，也可以实现自动登录。</p><p>因为账户没有了密码保护，所带来的安全风险极大。而且空密码默认无法使用远程桌面协议（RDP）和 NTLM 认证服务。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Ubuntu 上安装和使用 Flatpak</title>
    <link href="/Linux/49383a15/"/>
    <url>/Linux/49383a15/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Ubuntu 可能默认安装了 Snap，但你仍然可以使用 Flatpak 通用软件包。</p></blockquote><p>Linux 世界有三种“通用”打包格式，允许在“任何” Linux 发行版上运行：Snap、Flatpak 和 AppImage。</p><p>Ubuntu 内置了 Snap，但大多数发行版和开发人员都避免使用它，因为它的闭源性质。他们更喜欢 <a href="https://itsfoss.com/what-is-flatpak/">Fedora 的 Flatpak 打包系统</a>。</p><p>作为 Ubuntu 用户，你并不局限于 Snap。你还可以在 Ubuntu 系统上使用 Flatpak。</p><p>在本教程中，我将讨论以下内容：</p><ul><li>在 Ubuntu 上启用 Flatpak 支持</li><li>使用 Flatpak 命令来管理包</li><li>从 Flathub 获取包</li><li>将 Flatpak 软件包添加到软件中心</li></ul><p>听起来很令人兴奋？ 让我们一一看看。</p><h3 id="在-Ubuntu-上安装-Flatpak"><a href="#在-Ubuntu-上安装-Flatpak" class="headerlink" title="在 Ubuntu 上安装 Flatpak"></a>在 Ubuntu 上安装 Flatpak</h3><p>你可以使用以下命令轻松安装 Flatpak：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install flatpak<br></code></pre></td></tr></table></figure><p>对于 <strong>Ubuntu 18.04 或更早版本</strong>，请使用 PPA：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:flatpak/stablesudo apt updatesudo apt install flatpak<br></code></pre></td></tr></table></figure><h4 id="添加-Flathub-仓库"><a href="#添加-Flathub-仓库" class="headerlink" title="添加 Flathub 仓库"></a>添加 Flathub 仓库</h4><p>你已在 Ubuntu 系统中安装了 Flatpak 支持。但是，如果你尝试安装 Flatpak 软件包，你将收到 <a href="https://itsfoss.com/no-remote-ref-found-flatpak/">“No remote refs found”</a> 错误。这是因为没有添加 Flatpak 仓库，因此 Flatpak 甚至不知道应该从哪里获取应用。</p><p>Flatpak 有一个名为 “Flathub” 的集中仓库，可以从此处找到并下载许多 Flatpak 应用。</p><p>你应该添加 Flathub 仓库来访问这些应用。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">flatpak remote-add --<span class="hljs-keyword">if</span>-<span class="hljs-keyword">not</span>-exists flathub https:<span class="hljs-comment">//flathub.org/repo/flathub.flatpakrepo</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230051f1l2wqiwlcxpyivw.svg" alt="Install Flatpak in latest versions of Ubuntu and then add Flathub repo"></p><p><em>Install Flatpak in latest versions of Ubuntu and then add Flathub repo</em></p><p>安装并配置 Flatpak 后，<strong>重启你的系统</strong>。否则，已安装的 Flatpak 应用将不会在你的系统菜单上可见。</p><p>不过，你始终可以通过运行以下命令来运行 Flatpak 应用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">flatpak <span class="hljs-built_in">run</span> &lt;package-name&gt;<br></code></pre></td></tr></table></figure><h3 id="常用-Flatpak-命令"><a href="#常用-Flatpak-命令" class="headerlink" title="常用 Flatpak 命令"></a>常用 Flatpak 命令</h3><p>现在你已经安装了 Flatpak 打包支持，是时候学习包管理所需的一些最常见的 Flatpak 命令了。</p><h4 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h4><p>如果你知道应用名称，请使用 Flathub 网站或使用以下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">flatpak <span class="hljs-keyword">search</span> &lt;package-<span class="hljs-type">name</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230051kcig3cgzrmio87zr.svg" alt="Search for a package using Flatpak Search command"></p><p><em>Search for a package using Flatpak Search command</em></p><blockquote><p>🚧 除了搜索 Flatpak 包之外，在其他情况下， 指的是正确的 Flatpak 包名称，例如 <code>com.raggesilver.BlackBox</code>（上面截图中的应用 ID）。你还可以使用应用 ID 的最后一个词 <code>Blackbox</code>。</p></blockquote><h4 id="安装-Flatpak-包"><a href="#安装-Flatpak-包" class="headerlink" title="安装 Flatpak 包"></a>安装 Flatpak 包</h4><p>以下是安装 Flatpak 包的语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">flatpak install <span class="hljs-tag">&lt;<span class="hljs-name">remote-repo</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package-name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于几乎所有时候你都会从 Flathub 获取应用，因此远程仓库将是 <code>flathub</code>：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">flatpak install flathub &lt;<span class="hljs-keyword">package</span>-name&gt;<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230051fhqi8sggp4tgsing.svg" alt="Install a package after searching for its name"></p><p><em>Install a package after searching for its name</em></p><p>在极少数情况下，你可以直接从开发人员的仓库安装 Flatpak 包，而不是 Flathub。在这种情况下，你可以使用如下语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">flatpak install --<span class="hljs-keyword">from</span> https:<span class="hljs-comment">//flathub.org/repo/appstream/com.spotify.Client.flatpakref</span><br></code></pre></td></tr></table></figure><h4 id="从-flatpakref-安装包"><a href="#从-flatpakref-安装包" class="headerlink" title="从 flatpakref 安装包"></a>从 flatpakref 安装包</h4><p>这是可选的，也很少见。但有时，你会获得应用的 <code>.flatpakref</code> 文件。这<strong>不是离线安装</strong>。.flatpakref 包含有关从何处获取包的必要详细信息。</p><p>要从此类文件安装，请打开终端并运行：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">flatpak install &lt;path-<span class="hljs-keyword">to</span>-flatpakref <span class="hljs-built_in">file</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052um1hkeotfzcxx10x.svg" alt="Install a Flatpak package from Flatpakref file"></p><p><em>Install a Flatpak package from Flatpakref file</em></p><h4 id="从终端运行-Flatpak-应用"><a href="#从终端运行-Flatpak-应用" class="headerlink" title="从终端运行 Flatpak 应用"></a>从终端运行 Flatpak 应用</h4><p>再说一遍，这是你不会经常做的事情。大多数情况下，你将在系统菜单中搜索安装应用并从那里运行该应用。</p><p>但是，你也可以使用以下命令从终端运行它们：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">flatpak <span class="hljs-built_in">run</span> &lt;package-name&gt;<br></code></pre></td></tr></table></figure><h4 id="列出已安装的-Flatpak-软件包"><a href="#列出已安装的-Flatpak-软件包" class="headerlink" title="列出已安装的 Flatpak 软件包"></a>列出已安装的 Flatpak 软件包</h4><p>想要查看你的系统上安装了哪些 Flatpak 应用？ 像这样列出它们：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flatpak list</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052lfssbnuia7dxxmxj.svg" alt="List all the installed Flatpak packages on your system"></p><p><em>List all the installed Flatpak packages on your system</em></p><h4 id="卸载-Flatpak-包"><a href="#卸载-Flatpak-包" class="headerlink" title="卸载 Flatpak 包"></a>卸载 Flatpak 包</h4><p>你可以通过以下方式删除已安装的 Flatpak 包：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">flatpak uninstall &lt;<span class="hljs-keyword">package</span>-name&gt;<br></code></pre></td></tr></table></figure><p>如果你想<strong>清除不再需要的剩余包和运行时</strong>，请使用：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">flatpak uninstall <span class="hljs-comment">--unused</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052obp5gbxy33pzhph7.svg" alt="Remove a Flatpak package and later, if there is any unused runtimes or packages, remove them"></p><p><em>Remove a Flatpak package and later, if there is any unused runtimes or packages, remove them</em></p><p>它可能会帮助你 <a href="https://itsfoss.com/free-up-space-ubuntu-linux/">在 Ubuntu 上节省一些磁盘空间</a>。</p><h3 id="Flatpak-命令总结"><a href="#Flatpak-命令总结" class="headerlink" title="Flatpak 命令总结"></a>Flatpak 命令总结</h3><p>以下是你在上面学到的命令的快速摘要：</p><table><thead><tr><th>用途</th><th>命令</th></tr></thead><tbody><tr><td>搜索包</td><td><code>flatpak search</code></td></tr><tr><td>安装包</td><td><code>flatpak install</code></td></tr><tr><td>列出已安装的包</td><td><code>flatpak list</code></td></tr><tr><td>从 flatpakref 安装</td><td><code>flatpak install &lt;package-name.flatpakref&gt;</code></td></tr><tr><td>卸载软件包</td><td><code>flatpak uninstall</code></td></tr><tr><td>卸载未使用的运行时和包</td><td><code>flatpak uninstall --unused</code></td></tr></tbody></table><h3 id="使用-Flathub-探索-Flatpak-包"><a href="#使用-Flathub-探索-Flatpak-包" class="headerlink" title="使用 Flathub 探索 Flatpak 包"></a>使用 Flathub 探索 Flatpak 包</h3><p>我知道通过命令行搜索 Flatpak 包并不是最好的体验，这就是 <a href="https://flathub.org/en-GB">Flathub 网站</a> 的用武之地。</p><p>你可以在 Flathub 上浏览 Flatpak 应用，它提供了更多详细信息，例如经过验证的发布商、下载总数等。</p><p>你还将在应用页面底部获得安装应用所需的命令。</p><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230052e8mfr77mfpkonmqn.png" alt="img"></p><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230053yqkbxk1zf0v8bv87.png" alt="img"></p><h3 id="额外信息：使用支持-Flatpak-软件包的软件中心"><a href="#额外信息：使用支持-Flatpak-软件包的软件中心" class="headerlink" title="额外信息：使用支持 Flatpak 软件包的软件中心"></a>额外信息：使用支持 Flatpak 软件包的软件中心</h3><p>你可以将 Flatpak 包添加到 GNOME 软件中心，并使用它以图形方式安装软件包。</p><p>有一个专用插件可以将 Flatpak 添加到 GNOME 软件中心。</p><blockquote><p>🚧 从 Ubuntu 20.04 开始，Ubuntu 默认的软件中心是 Snap Store，并且不支持 Flatpak 集成。因此，安装以下软件包将产生两个软件中心：一个 Snap 和另一个 DEB。</p></blockquote><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230053bm51mdp57m2x6wup.png" alt="When you install GNOME Software Flatpak plugin in Ubuntu, a DEB version of GNOME Software is installed. So you will have two software center application"></p><p><em>When you install GNOME Software Flatpak plugin in Ubuntu, a DEB version of GNOME Software is installed. So you will have two software center application</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install gnome-software-plugin-flatpak<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8Flatpak/230054zfkgooqclhyfptrp.svg" alt="Installing GNOME Software Plugin in Ubuntu"></p><p><em>Installing GNOME Software Plugin in Ubuntu</em></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你在这里学到了很多东西。你学习了在 Ubuntu 中启用 Flatpak 支持并通过命令行管理 Flatpak 软件包。你还了解了与软件中心的集成。</p><p>我希望你现在对 Flatpaks 感觉更舒服一些。既然你发现了三个通用软件包之一，那么再 <a href="https://itsfoss.com/use-appimage-linux/">了解一下 Appimages</a> 怎么样？</p><p>如果你有疑问或遇到任何问题，请告诉我。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome：用uBlacklist屏蔽CSDN搜索结果</title>
    <link href="/Web/eb9d0ae5/"/>
    <url>/Web/eb9d0ae5/</url>
    
    <content type="html"><![CDATA[<p>CSDN现在广告满天飞，且很多博客需要先关注才能复制，非常令人无语。如果每次用Google搜索的时候都要加上”-csdn”选项，就非常麻烦。有没有更方便的办法呢？我们可以利用Chrome的uBlacklist插件。</p><p>首先，在Google应用商店中搜索并安装uBlacklist：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216030416_ublacklist%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97.png" alt="img"></p><p>安装后，进入”扩展程序选项”界面，将csdn的网址加入屏幕黑名单，然后点击保存：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216031007_%E9%BB%91%E5%90%8D%E5%8D%95.png" alt="img"></p><p>如果你要在其他搜索引擎中屏蔽，还可以在下面的选项中打钩：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216031218_%E5%85%B6%E5%AE%83%E5%BC%95%E6%93%8E.png" alt="img"></p><p>然后我们搜索一个很常见的报错，可以看到ublacklist已经帮我们屏蔽掉了一个结果：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216031750_pingbi.png" alt="img"></p><p>我们点击“显示”，发现该结果正是来自CSDN:</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216032012_csdn.png" alt="img"></p><p>如果我们想要彻底屏蔽掉，也就是连“uBlacklist已经屏蔽了1个网站”这个信息都不显示，可以回到“扩展程序选项界面”，将下列选项打钩：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_0c40283c.png" alt="img"></p><p>这样，任何提示信息都不会显示了：</p><p><img src="/./../images/Chrome%EF%BC%9A%E7%94%A8uBlacklist%E5%B1%8F%E8%94%BDCSDN%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/o_220216032948_final.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1Panel面板修改PHP构建扩展，GD扩展增加avif支持</title>
    <link href="/Web/662c4eb9/"/>
    <url>/Web/662c4eb9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过微调 1Panel面板PHP构建文件，可以为扩展编译增加更多的支持。<br>省去自己构建麻烦</p></blockquote><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>1Panel的PHP构建目录在 <code>/opt/1panel/runtime/php/</code> 目录下。</p><p>以我的 1Panel社区版：v1.10.5-lts PHP：8.2.15 举例。</p><p>进入以下目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/1panel/runtime/php/PHP82_15/php/extensions<br></code></pre></td></tr></table></figure><p>修改目录下的的 <code>install.sh</code> 文件。</p><p>搜索 <code>Install gd</code> ，找到判断GD扩展那一行。</p><p>我的在228行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;EXTENSIONS##*,gd,*&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---------- Install gd ----------&quot;</span><br>    isPhpVersionGreaterOrEqual 8 0<br><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;$?&quot;</span> = <span class="hljs-string">&quot;1&quot;</span> ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># &quot;--with-xxx-dir&quot; was removed from php 7.4,</span><br>        <span class="hljs-comment"># issue: https://github.com/docker-library/php/issues/912</span><br>        options=<span class="hljs-string">&quot;--with-freetype --with-jpeg --with-webp&quot;</span><br>    <span class="hljs-keyword">else</span><br>        options=<span class="hljs-string">&quot;--with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-webp-dir=/usr/include/&quot;</span><br>    <span class="hljs-keyword">fi</span><br><br>    apk add --no-cache \<br>        freetype \<br>        freetype-dev \<br>        libpng \<br>        libpng-dev \<br>        libjpeg-turbo \<br>        libjpeg-turbo-dev \<br>libwebp-dev \<br>    &amp;&amp; docker-php-ext-configure gd <span class="hljs-variable">$&#123;options&#125;</span> \<br>    &amp;&amp; docker-php-ext-install <span class="hljs-variable">$&#123;MC&#125;</span> gd \<br>    &amp;&amp; apk del \<br>        freetype-dev \<br>        libpng-dev \<br>        libjpeg-turbo-dev<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>修改最上面的 options。</p><p>增加 <code>--with-avif</code> ，使用AVIF支持进行编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">// old<br>options=<span class="hljs-string">&quot;--with-freetype --with-jpeg --with-webp&quot;</span><br><br>// new<br>options=<span class="hljs-string">&quot;--with-freetype --with-jpeg --with-webp --with-avif&quot;</span><br></code></pre></td></tr></table></figure><p>修改 apk add –no-cache 内部一行</p><p>在 freetype 和 libwebp-dev 中间添加 <code>libavif-dev</code>。</p><p>GD 扩展依赖于 libavif 软件包，以提供底层 AVIF 解码。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">   apk add --no-cache \<br>       freetype \<br>       freetype-dev \<br>       libpng \<br>       libpng-dev \<br>       libavif-dev \<br>       libjpeg-turbo \<br>       libjpeg-turbo-dev \<br>libwebp-dev \<br>   &amp;&amp; docker-php-ext-configure gd <span class="hljs-variable">$&#123;options&#125;</span> \<br>   &amp;&amp; docker-php-ext-install <span class="hljs-variable">$&#123;MC&#125;</span> gd \<br>   &amp;&amp; apk del \<br>       freetype-dev \<br>       libpng-dev \<br>       libjpeg-turbo-dev<br></code></pre></td></tr></table></figure><p>在 1Panel面板 运行环境 重建PHP应用</p><h3 id="备选方案"><a href="#备选方案" class="headerlink" title="备选方案"></a>备选方案</h3><p>理论上修改了构建命令，docker的缓存会失效，如果依然秒编译完成可以尝试手动清理全部缓存</p><p><a href="https://docs.docker.com/reference/cli/docker/builder/prune/">https://docs.docker.com/reference/cli/docker/builder/prune/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker builder prune -a<br>y<br></code></pre></td></tr></table></figure><p>如果依然不行可能新版构建目录换了地方</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>完成后可以在 phpinfo(); 查看GD扩展多出了 AVIF 支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">AVIF Supportenabled<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好世界！</title>
    <link href="/uncategorized/4a17b156/"/>
    <url>/uncategorized/4a17b156/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
